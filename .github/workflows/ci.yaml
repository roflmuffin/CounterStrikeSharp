name: CI

on:
  push:
    paths-ignore:
      - "docfx/**"
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1
      with:
        versionSpec: 6.0.x

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v1
      with:
        useConfigFile: true

  build_windows:
    needs: setup
    runs-on: windows-latest
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Visual Studio environment
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x64 -host_arch=x64
          )

          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Build
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..
          cmake --build . --config ${{env.BUILD_TYPE}} -- /m:16

      - name: Clean build directory
        run: |
          mkdir -p build/addons/counterstrikesharp/bin/win64
          mv build/${{env.BUILD_TYPE}}/*.dll build/addons/counterstrikesharp/bin/win64
          mkdir build/output/
          mv build/addons build/output

      - uses: actions/upload-artifact@v4
        with:
          name: counterstrikesharp-build-windows-${env:GitVersion_SemVer}
          path: build/output/

  build_linux:
    needs: setup
    runs-on: ubuntu-latest
    # Could not figure out how to run in a container only on some matrix paths, so I've split it out into its own build.
    container:
      image: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:latest
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Build
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..
          cmake --build . --config ${{env.BUILD_TYPE}} -- -j16

      - name: Clean build directory
        run: |
          mkdir build/output/
          mv build/addons build/output

      - uses: actions/upload-artifact@v4
        with:
          name: counterstrikesharp-build-linux-${env:GitVersion_SemVer}
          path: build/output/

  build_managed:
    needs: setup
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # We don't need expensive submodules for the managed side.
      - uses: actions/checkout@v4

      - name: Build runtime v${env:GitVersion_SemVer}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies
        run: dotnet restore managed/CounterStrikeSharp.sln

      - name: Run tests
        run: dotnet test --logger trx --results-directory "TestResults-${env:GitVersion_SemVer}" managed/CounterStrikeSharp.API.Tests/CounterStrikeSharp.API.Tests.csproj

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${env:GitVersion_SemVer}
          path: TestResults-${env:GitVersion_SemVer}
        if: ${{ always() }}

      - name: Publish artifacts
        run: |
          dotnet publish -c Release \
          /p:Version=${GitVersion_FullSemVer} \ 
          /p:AssemblyVersion=${GitVersion_AssemblySemVer} \
          /p:InformationalVersion=${GitVersion_InformationalVersion} \
          managed/CounterStrikeSharp.API
          
          dotnet pack -c Release \
          /p:Version=${GitVersion_FullSemVer} \ 
          /p:AssemblyVersion=${GitVersion_AssemblySemVer} \
          /p:InformationalVersion=${GitVersion_InformationalVersion} \
          managed/CounterStrikeSharp.API

      - uses: actions/upload-artifact@v4
        with:
          name: counterstrikesharp-build-api-${env:GitVersion_SemVer}
          path: managed/CounterStrikeSharp.API/bin/Release