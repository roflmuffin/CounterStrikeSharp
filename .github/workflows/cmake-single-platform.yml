name: Build & Publish

on:
  push:
    paths-ignore:
      - "docfx/**"
    branches: ["main", "dev"]
  pull_request:
    branches: ["main", "dev"]

env:
  BUILD_TYPE: Release

jobs:
  setup:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      buildnumber: "288"  # Fixed build number
    steps:
      - name: Set fixed build number
        run: echo "buildnumber=288" >> $GITHUB_ENV  # Set buildnumber to fixed version 288

  build_windows:
    needs: setup
    runs-on: windows-latest
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Fallback build number
        if: ${{ github.event_name == 'pull_request' || github.ref != 'refs/heads/main' }}
        shell: bash
        run: echo "BUILD_NUMBER=288" >> $GITHUB_ENV  # Use fixed build number

      - name: Main build number
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: echo "BUILD_NUMBER=288" >> $GITHUB_ENV  # Use fixed build number

      - name: Visual Studio environment
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x64 -host_arch=x64
          )

          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )

      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Build
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..
          cmake --build . --config ${{env.BUILD_TYPE}} -- /m:16

      - name: Clean build directory
        run: |
          mkdir -p build/addons/counterstrikesharp/bin/win64
          mv build/${{env.BUILD_TYPE}}/*.dll build/addons/counterstrikesharp/bin/win64
          mkdir build/output/
          mv build/addons build/output

      - uses: actions/upload-artifact@v3
        with:
          name: counterstrikesharp-build-windows-288-${{ env.GITHUB_SHA_SHORT }}
          path: build/output/

  build_linux:
    needs: setup
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.steamos.cloud/steamrt/sniper/sdk:latest
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Fallback build number
        if: ${{ github.event_name == 'pull_request' || github.ref != 'refs/heads/main' }}
        shell: bash
        run: echo "BUILD_NUMBER=288" >> $GITHUB_ENV  # Use fixed build number

      - name: Main build number
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: echo "BUILD_NUMBER=288" >> $GITHUB_ENV  # Use fixed build number

      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Build
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..
          cmake --build . --config ${{env.BUILD_TYPE}} -- -j16

      - name: Clean build directory
        run: |
          mkdir build/output/
          mv build/addons build/output

      - uses: actions/upload-artifact@v3
        with:
          name: counterstrikesharp-build-linux-288-${{ env.GITHUB_SHA_SHORT }}
          path: build/output/

  build_managed:
    needs: setup
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Fallback build number
        if: ${{ github.event_name == 'pull_request' || github.ref != 'refs/heads/main' }}
        shell: bash
        run: echo "BUILD_NUMBER=288" >> $GITHUB_ENV  # Use fixed build number

      - name: Main build number
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: echo "BUILD_NUMBER=288" >> $GITHUB_ENV  # Use fixed build number

      - uses: actions/checkout@v3

      - name: Build runtime v288
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies
        run: dotnet restore managed/CounterStrikeSharp.sln

      - name: Run tests
        run: dotnet test --logger trx --results-directory "TestResults-${{ env.GITHUB_SHA_SHORT }}" managed/CounterStrikeSharp.API.Tests/CounterStrikeSharp.API.Tests.csproj

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ env.GITHUB_SHA_SHORT }}
          path: TestResults-${{ env.GITHUB_SHA_SHORT }}
        if: ${{ always() }}

      - name: Publish artifacts
        run: |
          dotnet publish -c Release /p:Version=1.0.288 managed/CounterStrikeSharp.API
          dotnet pack -c Release /p:Version=1.0.288 managed/CounterStrikeSharp.API

      - uses: actions/upload-artifact@v3
        with:
          name: counterstrikesharp-build-api-288-${{ env.GITHUB_SHA_SHORT }}
          path: managed/CounterStrikeSharp.API/bin/Release

  publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    needs: ["setup", "build_linux", "build_windows", "build_managed"]
    runs-on: ubuntu-latest
    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: counterstrikesharp-build-windows-288-${{ env.GITHUB_SHA_SHORT }}
          path: build/windows

      - uses: actions/download-artifact@v3
        with:
          name: counterstrikesharp-build-linux-288-${{ env.GITHUB_SHA_SHORT }}
          path: build/linux

      - uses: actions/download-artifact@v3
        with:
          name: counterstrikesharp-build-api-288-${{ env.GITHUB_SHA_SHORT }}
          path: build/api

      - name: Add API to Artifacts
        run: |
          mkdir -p build/linux/addons/counterstrikesharp/api
          mkdir -p build/windows/addons/counterstrikesharp/api
          cp -r build/api/net8.0/publish/* build/linux/addons/counterstrikesharp/api
          cp -r build/api/net8.0/publish/* build/windows/addons/counterstrikesharp/api

      - name: Zip Builds
        run: |
          (cd build/linux && zip -qq -r ../../counterstrikesharp-build-288-linux-${{ env.GITHUB_SHA_SHORT }}.zip *)
          (cd build/windows && zip -qq -r ../../counterstrikesharp-build-288-windows-${{ env.GITHUB_SHA_SHORT }}.zip *)

      - name: Add dotnet runtime
        run: |
          mkdir -p build/linux/addons/counterstrikesharp/dotnet
          curl -s -L https://download.visualstudio.microsoft.com/download/pr/c1371dc2-eed2-47be-9af3-ae060dbe3c7d/bd509e0a87629764ed47608466d183e6/aspnetcore-runtime-8.0.3-linux-x64.tar.gz \
          | tar xvz -C build/linux/addons/counterstrikesharp/dotnet

          mkdir -p build/windows/addons/counterstrikesharp/dotnet
          curl -s -L https://download.visualstudio.microsoft.com/download/pr/086d1dd6-57a5-437a-a1ef-549cf702fb48/dd4a8fe6c53a1016a414d6f2925c1323/aspnetcore-runtime-8.0.3-win-x64.zip -o dotnet.zip
          unzip -qq dotnet.zip -d build/windows/addons/counterstrikesharp/dotnet

      - name: Zip Builds with runtime
        run: |
          (cd build/linux && zip -qq -r ../../counterstrikesharp-with-runtime-build-288-linux-${{ env.GITHUB_SHA_SHORT }}.zip *)
          (cd build/windows && zip -qq -r ../../counterstrikesharp-with-runtime-build-288-windows-${{ env.GITHUB_SHA_SHORT }}.zip *)

      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v288  # Fixed version tag
          files: |
            counterstrikesharp-build-288-windows-${{ env.GITHUB_SHA_SHORT }}.zip
            counterstrikesharp-with-runtime-build-288-windows-${{ env.GITHUB_SHA_SHORT }}.zip
            counterstrikesharp-build-288-linux-${{ env.GITHUB_SHA_SHORT }}.zip
            counterstrikesharp-with-runtime-build-288-linux-${{ env.GITHUB_SHA_SHORT }}.zip

      - name: Publish NuGet package
        run: |
          dotnet nuget push build/api/CounterStrikeSharp.API.1.0.288.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          dotnet nuget push build/api/CounterStrikeSharp.API.1.0.288.snupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Send Notification to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "A new release of CS# has been tagged (v288) at ${{ steps.release.outputs.url }}"
