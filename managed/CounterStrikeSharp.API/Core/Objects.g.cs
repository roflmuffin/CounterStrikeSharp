// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public enum ActionType_t : uint
{
    SOS_ACTION_NONE = 0x0,
    SOS_ACTION_LIMITER = 0x1,
    SOS_ACTION_TIME_LIMIT = 0x2,
    SOS_ACTION_SET_SOUNDEVENT_PARAM = 0x3,
}

public enum AimMatrixBlendMode : uint
{
    AimMatrixBlendMode_None = 0x0,
    AimMatrixBlendMode_Additive = 0x1,
    AimMatrixBlendMode_ModelSpaceAdditive = 0x2,
    AimMatrixBlendMode_BoneMask = 0x3,
}

public enum AmmoFlags_t : uint
{
    AMMO_FORCE_DROP_IF_CARRIED = 0x1,
    AMMO_RESERVE_STAYS_WITH_WEAPON = 0x2,
    AMMO_FLAG_MAX = 0x2,
}

public enum AmmoPosition_t : uint
{
    AMMO_POSITION_INVALID = 0xFFFFFFFF,
    AMMO_POSITION_PRIMARY = 0x0,
    AMMO_POSITION_SECONDARY = 0x1,
    AMMO_POSITION_COUNT = 0x2,
}

public enum AnimationProcessingType_t : uint
{
    ANIMATION_PROCESSING_SERVER_SIMULATION = 0x0,
    ANIMATION_PROCESSING_CLIENT_SIMULATION = 0x1,
    ANIMATION_PROCESSING_CLIENT_PREDICTION = 0x2,
    ANIMATION_PROCESSING_CLIENT_INTERPOLATION = 0x3,
    ANIMATION_PROCESSING_CLIENT_RENDER = 0x4,
    ANIMATION_PROCESSING_MAX = 0x5,
}

public enum AnimationSnapshotType_t : uint
{
    ANIMATION_SNAPSHOT_SERVER_SIMULATION = 0x0,
    ANIMATION_SNAPSHOT_CLIENT_SIMULATION = 0x1,
    ANIMATION_SNAPSHOT_CLIENT_PREDICTION = 0x2,
    ANIMATION_SNAPSHOT_CLIENT_INTERPOLATION = 0x3,
    ANIMATION_SNAPSHOT_CLIENT_RENDER = 0x4,
    ANIMATION_SNAPSHOT_FINAL_COMPOSITE = 0x5,
    ANIMATION_SNAPSHOT_MAX = 0x6,
}

public enum AnimationType_t : uint
{
    ANIMATION_TYPE_FIXED_RATE = 0x0,
    ANIMATION_TYPE_FIT_LIFETIME = 0x1,
    ANIMATION_TYPE_MANUAL_FRAMES = 0x2,
}

public enum AnimLoopMode_t : uint
{
    ANIM_LOOP_MODE_INVALID = 0xFFFFFFFF,
    ANIM_LOOP_MODE_NOT_LOOPING = 0x0,
    ANIM_LOOP_MODE_LOOPING = 0x1,
    ANIM_LOOP_MODE_USE_SEQUENCE_SETTINGS = 0x2,
    ANIM_LOOP_MODE_COUNT = 0x3,
}

public enum AnimNodeNetworkMode : uint
{
    ServerAuthoritative = 0x0,
    ClientSimulate = 0x1,
}

public enum AnimParamButton_t : uint
{
    ANIMPARAM_BUTTON_NONE = 0x0,
    ANIMPARAM_BUTTON_DPAD_UP = 0x1,
    ANIMPARAM_BUTTON_DPAD_RIGHT = 0x2,
    ANIMPARAM_BUTTON_DPAD_DOWN = 0x3,
    ANIMPARAM_BUTTON_DPAD_LEFT = 0x4,
    ANIMPARAM_BUTTON_A = 0x5,
    ANIMPARAM_BUTTON_B = 0x6,
    ANIMPARAM_BUTTON_X = 0x7,
    ANIMPARAM_BUTTON_Y = 0x8,
    ANIMPARAM_BUTTON_LEFT_SHOULDER = 0x9,
    ANIMPARAM_BUTTON_RIGHT_SHOULDER = 0xA,
    ANIMPARAM_BUTTON_LTRIGGER = 0xB,
    ANIMPARAM_BUTTON_RTRIGGER = 0xC,
}

public enum AnimParamNetworkSetting : uint
{
    Auto = 0x0,
    AlwaysNetwork = 0x1,
    NeverNetwork = 0x2,
}

public enum AnimParamType_t : byte
{
    ANIMPARAM_UNKNOWN = 0x0,
    ANIMPARAM_BOOL = 0x1,
    ANIMPARAM_ENUM = 0x2,
    ANIMPARAM_INT = 0x3,
    ANIMPARAM_FLOAT = 0x4,
    ANIMPARAM_VECTOR = 0x5,
    ANIMPARAM_QUATERNION = 0x6,
    ANIMPARAM_STRINGTOKEN = 0x7,
    ANIMPARAM_COUNT = 0x8,
}

public enum AnimPoseControl : uint
{
    NoPoseControl = 0x0,
    AbsolutePoseControl = 0x1,
    RelativePoseControl = 0x2,
}

public enum AnimScriptType : ushort
{
    ANIMSCRIPT_TYPE_INVALID = 0xFFFF,
    ANIMSCRIPT_FUSE_GENERAL = 0x0,
    ANIMSCRIPT_FUSE_STATEMACHINE = 0x1,
}

public enum AnimValueSource : uint
{
    MoveHeading = 0x0,
    MoveSpeed = 0x1,
    ForwardSpeed = 0x2,
    StrafeSpeed = 0x3,
    FacingHeading = 0x4,
    ManualFacingHeading = 0x5,
    LookHeading = 0x6,
    LookPitch = 0x7,
    LookDistance = 0x8,
    Parameter = 0x9,
    WayPointHeading = 0xA,
    WayPointDistance = 0xB,
    BoundaryRadius = 0xC,
    TargetMoveHeading = 0xD,
    TargetMoveSpeed = 0xE,
    AccelerationHeading = 0xF,
    AccelerationSpeed = 0x10,
    SlopeHeading = 0x11,
    SlopeAngle = 0x12,
    SlopePitch = 0x13,
    SlopeYaw = 0x14,
    GoalDistance = 0x15,
    AccelerationLeftRight = 0x16,
    AccelerationFrontBack = 0x17,
    RootMotionSpeed = 0x18,
    RootMotionTurnSpeed = 0x19,
    MoveHeadingRelativeToLookHeading = 0x1A,
    MaxMoveSpeed = 0x1B,
    FingerCurl_Thumb = 0x1C,
    FingerCurl_Index = 0x1D,
    FingerCurl_Middle = 0x1E,
    FingerCurl_Ring = 0x1F,
    FingerCurl_Pinky = 0x20,
    FingerSplay_Thumb_Index = 0x21,
    FingerSplay_Index_Middle = 0x22,
    FingerSplay_Middle_Ring = 0x23,
    FingerSplay_Ring_Pinky = 0x24,
}

public enum AnimVectorSource : uint
{
    MoveDirection = 0x0,
    FacingDirection = 0x1,
    LookDirection = 0x2,
    VectorParameter = 0x3,
    WayPointDirection = 0x4,
    Acceleration = 0x5,
    SlopeNormal = 0x6,
    SlopeNormal_WorldSpace = 0x7,
    LookTarget = 0x8,
    LookTarget_WorldSpace = 0x9,
    WayPointPosition = 0xA,
    GoalPosition = 0xB,
    RootMotionVelocity = 0xC,
}

public enum AnimVrBoneTransformSource_t : uint
{
    AnimVrBoneTransformSource_LiveStream = 0x0,
    AnimVrBoneTransformSource_GripLimit = 0x1,
}

public enum AnimVRFinger_t : uint
{
    AnimVrFinger_Thumb = 0x0,
    AnimVrFinger_Index = 0x1,
    AnimVrFinger_Middle = 0x2,
    AnimVrFinger_Ring = 0x3,
    AnimVrFinger_Pinky = 0x4,
}

public enum AnimVrFingerSplay_t : uint
{
    AnimVrFingerSplay_Thumb_Index = 0x0,
    AnimVrFingerSplay_Index_Middle = 0x1,
    AnimVrFingerSplay_Middle_Ring = 0x2,
    AnimVrFingerSplay_Ring_Pinky = 0x3,
}

public enum AnimVRHand_t : uint
{
    AnimVRHand_Left = 0x0,
    AnimVRHand_Right = 0x1,
}

public enum AnimVRHandMotionRange_t : uint
{
    MotionRange_WithController = 0x0,
    MotionRange_WithoutController = 0x1,
}

public enum attributeprovidertypes_t : uint
{
    PROVIDER_GENERIC = 0x0,
    PROVIDER_WEAPON = 0x1,
}

public enum BaseExplosionTypes_t : uint
{
    EXPLOSION_TYPE_DEFAULT = 0x0,
    EXPLOSION_TYPE_GRENADE = 0x1,
    EXPLOSION_TYPE_MOLOTOV = 0x2,
    EXPLOSION_TYPE_FIREWORKS = 0x3,
    EXPLOSION_TYPE_GASCAN = 0x4,
    EXPLOSION_TYPE_GASCYLINDER = 0x5,
    EXPLOSION_TYPE_EXPLOSIVEBARREL = 0x6,
    EXPLOSION_TYPE_ELECTRICAL = 0x7,
    EXPLOSION_TYPE_EMP = 0x8,
    EXPLOSION_TYPE_SHRAPNEL = 0x9,
    EXPLOSION_TYPE_SMOKEGRENADE = 0xA,
    EXPLOSION_TYPE_FLASHBANG = 0xB,
    EXPLOSION_TYPE_TRIPMINE = 0xC,
    EXPLOSION_TYPE_ICE = 0xD,
    EXPLOSION_TYPE_NONE = 0xE,
    EXPLOSION_TYPE_CUSTOM = 0xF,
    EXPLOSION_TYPE_COUNT = 0x10,
}

public enum BBoxVolumeType_t : uint
{
    BBOX_VOLUME = 0x0,
    BBOX_DIMENSIONS = 0x1,
    BBOX_MINS_MAXS = 0x2,
}

public enum BeamClipStyle_t : uint
{
    kNOCLIP = 0x0,
    kGEOCLIP = 0x1,
    kMODELCLIP = 0x2,
    kBEAMCLIPSTYLE_NUMBITS = 0x2,
}

public enum BeamType_t : uint
{
    BEAM_INVALID = 0x0,
    BEAM_POINTS = 0x1,
    BEAM_ENTPOINT = 0x2,
    BEAM_ENTS = 0x3,
    BEAM_HOSE = 0x4,
    BEAM_SPLINE = 0x5,
    BEAM_LASER = 0x6,
}

public enum BeginDeathLifeStateTransition_t : byte
{
    NO_CHANGE_IN_LIFESTATE = 0x0,
    TRANSITION_TO_LIFESTATE_DYING = 0x1,
    TRANSITION_TO_LIFESTATE_DEAD = 0x2,
}

public enum BinaryNodeChildOption : uint
{
    Child1 = 0x0,
    Child2 = 0x1,
}

public enum BinaryNodeTiming : uint
{
    UseChild1 = 0x0,
    UseChild2 = 0x1,
    SyncChildren = 0x2,
}

public enum Blend2DMode : uint
{
    Blend2DMode_General = 0x0,
    Blend2DMode_Directional = 0x1,
}

public enum BlendKeyType : uint
{
    BlendKey_UserValue = 0x0,
    BlendKey_Velocity = 0x1,
    BlendKey_Distance = 0x2,
    BlendKey_RemainingDistance = 0x3,
}

public enum BloomBlendMode_t : uint
{
    BLOOM_BLEND_ADD = 0x0,
    BLOOM_BLEND_SCREEN = 0x1,
    BLOOM_BLEND_BLUR = 0x2,
}

public enum BlurFilterType_t : uint
{
    BLURFILTER_GAUSSIAN = 0x0,
    BLURFILTER_BOX = 0x1,
}

public enum BoneMaskBlendSpace : uint
{
    BlendSpace_Parent = 0x0,
    BlendSpace_Model = 0x1,
    BlendSpace_Model_RotationOnly = 0x2,
    BlendSpace_Model_TranslationOnly = 0x3,
}

public enum BoneTransformSpace_t : uint
{
    BoneTransformSpace_Invalid = 0xFFFFFFFF,
    BoneTransformSpace_Parent = 0x0,
    BoneTransformSpace_Model = 0x1,
    BoneTransformSpace_World = 0x2,
}

public enum BrushSolidities_e : uint
{
    BRUSHSOLID_TOGGLE = 0x0,
    BRUSHSOLID_NEVER = 0x1,
    BRUSHSOLID_ALWAYS = 0x2,
}

public enum CAnimationGraphVisualizerPrimitiveType : uint
{
    ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Text = 0x0,
    ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Sphere = 0x1,
    ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Line = 0x2,
    ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Pie = 0x3,
    ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Axis = 0x4,
}

public enum CanPlaySequence_t : uint
{
    CANNOT_PLAY = 0x0,
    CAN_PLAY_NOW = 0x1,
    CAN_PLAY_ENQUEUED = 0x2,
}

public enum ChatIgnoreType_t : uint
{
    CHAT_IGNORE_NONE = 0x0,
    CHAT_IGNORE_ALL = 0x1,
    CHAT_IGNORE_TEAM = 0x2,
}

public enum ChickenActivity : uint
{
    IDLE = 0x0,
    WALK = 0x1,
    RUN = 0x2,
    HOP = 0x3,
    JUMP = 0x4,
    GLIDE = 0x5,
    LAND = 0x6,
}

public enum ChoiceBlendMethod : uint
{
    SingleBlendTime = 0x0,
    PerChoiceBlendTimes = 0x1,
}

public enum ChoiceChangeMethod : uint
{
    OnReset = 0x0,
    OnCycleEnd = 0x1,
    OnResetOrCycleEnd = 0x2,
}

public enum ChoiceMethod : uint
{
    WeightedRandom = 0x0,
    WeightedRandomNoRepeat = 0x1,
    Iterate = 0x2,
    IterateRandom = 0x3,
}

public enum Class_T : uint
{
    CLASS_NONE = 0x0,
    CLASS_PLAYER = 0x1,
    CLASS_PLAYER_ALLY = 0x2,
    CLASS_BOMB = 0x3,
    CLASS_FOOT_CONTACT_SHADOW = 0x4,
    CLASS_WEAPON = 0x5,
    CLASS_WATER_SPLASHER = 0x6,
    CLASS_WEAPON_VIEWMODEL = 0x7,
    CLASS_DOOR = 0x8,
    NUM_CLASSIFY_CLASSES = 0x9,
}

public enum CLogicBranchListLogicBranchListenerLastState_t : uint
{
    LOGIC_BRANCH_LISTENER_NOT_INIT = 0x0,
    LOGIC_BRANCH_LISTENER_ALL_TRUE = 0x1,
    LOGIC_BRANCH_LISTENER_ALL_FALSE = 0x2,
    LOGIC_BRANCH_LISTENER_MIXED = 0x3,
}

public enum ClosestPointTestType_t : uint
{
    PARTICLE_CLOSEST_TYPE_BOX = 0x0,
    PARTICLE_CLOSEST_TYPE_CAPSULE = 0x1,
    PARTICLE_CLOSEST_TYPE_HYBRID = 0x2,
}

public enum CommandEntitySpecType_t : uint
{
    SPEC_SEARCH = 0x0,
    SPEC_TYPES_COUNT = 0x1,
}

public enum CommandExecMode_t : uint
{
    EXEC_MANUAL = 0x0,
    EXEC_LEVELSTART = 0x1,
    EXEC_PERIODIC = 0x2,
    EXEC_MODES_COUNT = 0x3,
}

public enum CompMatPropertyMutatorConditionType_t : uint
{
    COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_EXISTS = 0x0,
    COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_VALUE_EXISTS = 0x1,
    COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_VALUE_EQUALS = 0x2,
}

public enum CompMatPropertyMutatorType_t : uint
{
    COMP_MAT_PROPERTY_MUTATOR_INIT = 0x0,
    COMP_MAT_PROPERTY_MUTATOR_COPY_MATCHING_KEYS = 0x1,
    COMP_MAT_PROPERTY_MUTATOR_COPY_KEYS_WITH_SUFFIX = 0x2,
    COMP_MAT_PROPERTY_MUTATOR_COPY_PROPERTY = 0x3,
    COMP_MAT_PROPERTY_MUTATOR_SET_VALUE = 0x4,
    COMP_MAT_PROPERTY_MUTATOR_GENERATE_TEXTURE = 0x5,
    COMP_MAT_PROPERTY_MUTATOR_CONDITIONAL_MUTATORS = 0x6,
    COMP_MAT_PROPERTY_MUTATOR_POP_INPUT_QUEUE = 0x7,
    COMP_MAT_PROPERTY_MUTATOR_DRAW_TEXT = 0x8,
    COMP_MAT_PROPERTY_MUTATOR_RANDOM_ROLL_INPUT_VARIABLES = 0x9,
}

public enum CompositeMaterialInputContainerSourceType_t : uint
{
    CONTAINER_SOURCE_TYPE_TARGET_MATERIAL = 0x0,
    CONTAINER_SOURCE_TYPE_MATERIAL_FROM_TARGET_ATTR = 0x1,
    CONTAINER_SOURCE_TYPE_SPECIFIC_MATERIAL = 0x2,
    CONTAINER_SOURCE_TYPE_LOOSE_VARIABLES = 0x3,
    CONTAINER_SOURCE_TYPE_VARIABLE_FROM_TARGET_ATTR = 0x4,
    CONTAINER_SOURCE_TYPE_TARGET_INSTANCE_MATERIAL = 0x5,
}

public enum CompositeMaterialInputLooseVariableType_t : uint
{
    LOOSE_VARIABLE_TYPE_BOOLEAN = 0x0,
    LOOSE_VARIABLE_TYPE_INTEGER1 = 0x1,
    LOOSE_VARIABLE_TYPE_INTEGER2 = 0x2,
    LOOSE_VARIABLE_TYPE_INTEGER3 = 0x3,
    LOOSE_VARIABLE_TYPE_INTEGER4 = 0x4,
    LOOSE_VARIABLE_TYPE_FLOAT1 = 0x5,
    LOOSE_VARIABLE_TYPE_FLOAT2 = 0x6,
    LOOSE_VARIABLE_TYPE_FLOAT3 = 0x7,
    LOOSE_VARIABLE_TYPE_FLOAT4 = 0x8,
    LOOSE_VARIABLE_TYPE_COLOR4 = 0x9,
    LOOSE_VARIABLE_TYPE_STRING = 0xA,
    LOOSE_VARIABLE_TYPE_SYSTEMVAR = 0xB,
    LOOSE_VARIABLE_TYPE_RESOURCE_MATERIAL = 0xC,
    LOOSE_VARIABLE_TYPE_RESOURCE_TEXTURE = 0xD,
}

public enum CompositeMaterialInputTextureType_t : uint
{
    INPUT_TEXTURE_TYPE_DEFAULT = 0x0,
    INPUT_TEXTURE_TYPE_NORMALMAP = 0x1,
    INPUT_TEXTURE_TYPE_COLOR = 0x2,
    INPUT_TEXTURE_TYPE_MASKS = 0x3,
    INPUT_TEXTURE_TYPE_ROUGHNESS = 0x4,
    INPUT_TEXTURE_TYPE_PEARLESCENCE_MASK = 0x5,
    INPUT_TEXTURE_TYPE_AO = 0x6,
}

public enum CompositeMaterialMatchFilterType_t : uint
{
    MATCH_FILTER_MATERIAL_ATTRIBUTE_EXISTS = 0x0,
    MATCH_FILTER_MATERIAL_SHADER = 0x1,
    MATCH_FILTER_MATERIAL_NAME_SUBSTR = 0x2,
    MATCH_FILTER_MATERIAL_ATTRIBUTE_EQUALS = 0x3,
    MATCH_FILTER_MATERIAL_PROPERTY_EXISTS = 0x4,
    MATCH_FILTER_MATERIAL_PROPERTY_EQUALS = 0x5,
}

public enum CompositeMaterialVarSystemVar_t : uint
{
    COMPMATSYSVAR_COMPOSITETIME = 0x0,
    COMPMATSYSVAR_EMPTY_RESOURCE_SPACER = 0x1,
}

public enum CRR_ResponseResponseEnum_t : uint
{
    MAX_RESPONSE_NAME = 0xC0,
    MAX_RULE_NAME = 0x80,
}

public enum CSPlayerBlockingUseAction_t : uint
{
    k_CSPlayerBlockingUseAction_None = 0x0,
    k_CSPlayerBlockingUseAction_DefusingDefault = 0x1,
    k_CSPlayerBlockingUseAction_DefusingWithKit = 0x2,
    k_CSPlayerBlockingUseAction_HostageGrabbing = 0x3,
    k_CSPlayerBlockingUseAction_HostageDropping = 0x4,
    k_CSPlayerBlockingUseAction_OpeningSafe = 0x5,
    k_CSPlayerBlockingUseAction_EquippingParachute = 0x6,
    k_CSPlayerBlockingUseAction_EquippingHeavyArmor = 0x7,
    k_CSPlayerBlockingUseAction_EquippingContract = 0x8,
    k_CSPlayerBlockingUseAction_EquippingTabletUpgrade = 0x9,
    k_CSPlayerBlockingUseAction_TakingOffHeavyArmor = 0xA,
    k_CSPlayerBlockingUseAction_PayingToOpenDoor = 0xB,
    k_CSPlayerBlockingUseAction_CancelingSpawnRappelling = 0xC,
    k_CSPlayerBlockingUseAction_EquippingExoJump = 0xD,
    k_CSPlayerBlockingUseAction_PickingUpBumpMine = 0xE,
    k_CSPlayerBlockingUseAction_MapLongUseEntity_Pickup = 0xF,
    k_CSPlayerBlockingUseAction_MapLongUseEntity_Place = 0x10,
    k_CSPlayerBlockingUseAction_MaxCount = 0x11,
}

public enum CSPlayerState : uint
{
    STATE_ACTIVE = 0x0,
    STATE_WELCOME = 0x1,
    STATE_PICKINGTEAM = 0x2,
    STATE_PICKINGCLASS = 0x3,
    STATE_DEATH_ANIM = 0x4,
    STATE_DEATH_WAIT_FOR_KEY = 0x5,
    STATE_OBSERVER_MODE = 0x6,
    STATE_GUNGAME_RESPAWN = 0x7,
    STATE_DORMANT = 0x8,
    NUM_PLAYER_STATES = 0x9,
}

public enum CSWeaponCategory : uint
{
    WEAPONCATEGORY_OTHER = 0x0,
    WEAPONCATEGORY_MELEE = 0x1,
    WEAPONCATEGORY_SECONDARY = 0x2,
    WEAPONCATEGORY_SMG = 0x3,
    WEAPONCATEGORY_RIFLE = 0x4,
    WEAPONCATEGORY_HEAVY = 0x5,
    WEAPONCATEGORY_COUNT = 0x6,
}

public enum CSWeaponMode : uint
{
    Primary_Mode = 0x0,
    Secondary_Mode = 0x1,
    WeaponMode_MAX = 0x2,
}

public enum CSWeaponSilencerType : uint
{
    WEAPONSILENCER_NONE = 0x0,
    WEAPONSILENCER_DETACHABLE = 0x1,
    WEAPONSILENCER_INTEGRATED = 0x2,
}

public enum CSWeaponState_t : uint
{
    WEAPON_NOT_CARRIED = 0x0,
    WEAPON_IS_CARRIED_BY_PLAYER = 0x1,
    WEAPON_IS_ACTIVE = 0x2,
}

public enum CSWeaponType : uint
{
    WEAPONTYPE_KNIFE = 0x0,
    WEAPONTYPE_PISTOL = 0x1,
    WEAPONTYPE_SUBMACHINEGUN = 0x2,
    WEAPONTYPE_RIFLE = 0x3,
    WEAPONTYPE_SHOTGUN = 0x4,
    WEAPONTYPE_SNIPER_RIFLE = 0x5,
    WEAPONTYPE_MACHINEGUN = 0x6,
    WEAPONTYPE_C4 = 0x7,
    WEAPONTYPE_TASER = 0x8,
    WEAPONTYPE_GRENADE = 0x9,
    WEAPONTYPE_EQUIPMENT = 0xA,
    WEAPONTYPE_STACKABLEITEM = 0xB,
    WEAPONTYPE_FISTS = 0xC,
    WEAPONTYPE_BREACHCHARGE = 0xD,
    WEAPONTYPE_BUMPMINE = 0xE,
    WEAPONTYPE_TABLET = 0xF,
    WEAPONTYPE_MELEE = 0x10,
    WEAPONTYPE_SHIELD = 0x11,
    WEAPONTYPE_ZONE_REPULSOR = 0x12,
    WEAPONTYPE_UNKNOWN = 0x13,
}

public enum DamageTypes_t : uint
{
    DMG_GENERIC = 0x0,
    DMG_CRUSH = 0x1,
    DMG_BULLET = 0x2,
    DMG_SLASH = 0x4,
    DMG_BURN = 0x8,
    DMG_VEHICLE = 0x10,
    DMG_FALL = 0x20,
    DMG_BLAST = 0x40,
    DMG_CLUB = 0x80,
    DMG_SHOCK = 0x100,
    DMG_SONIC = 0x200,
    DMG_ENERGYBEAM = 0x400,
    DMG_DROWN = 0x4000,
    DMG_POISON = 0x8000,
    DMG_RADIATION = 0x10000,
    DMG_DROWNRECOVER = 0x20000,
    DMG_ACID = 0x40000,
    DMG_PHYSGUN = 0x100000,
    DMG_DISSOLVE = 0x200000,
    DMG_BLAST_SURFACE = 0x400000,
    DMG_BUCKSHOT = 0x1000000,
    DMG_LASTGENERICFLAG = 0x1000000,
    DMG_HEADSHOT = 0x2000000,
    DMG_DANGERZONE = 0x4000000,
}

public enum DampingSpeedFunction : uint
{
    NoDamping = 0x0,
    Constant = 0x1,
    Spring = 0x2,
}

public enum DebugOverlayBits_t : ulong
{
    OVERLAY_TEXT_BIT = 0x1,
    OVERLAY_NAME_BIT = 0x2,
    OVERLAY_BBOX_BIT = 0x4,
    OVERLAY_PIVOT_BIT = 0x8,
    OVERLAY_MESSAGE_BIT = 0x10,
    OVERLAY_ABSBOX_BIT = 0x20,
    OVERLAY_RBOX_BIT = 0x40,
    OVERLAY_SHOW_BLOCKSLOS = 0x80,
    OVERLAY_ATTACHMENTS_BIT = 0x100,
    OVERLAY_INTERPOLATED_ATTACHMENTS_BIT = 0x200,
    OVERLAY_INTERPOLATED_PIVOT_BIT = 0x400,
    OVERLAY_SKELETON_BIT = 0x800,
    OVERLAY_INTERPOLATED_SKELETON_BIT = 0x1000,
    OVERLAY_TRIGGER_BOUNDS_BIT = 0x2000,
    OVERLAY_HITBOX_BIT = 0x4000,
    OVERLAY_INTERPOLATED_HITBOX_BIT = 0x8000,
    OVERLAY_AUTOAIM_BIT = 0x10000,
    OVERLAY_NPC_SELECTED_BIT = 0x20000,
    OVERLAY_JOINT_INFO_BIT = 0x40000,
    OVERLAY_NPC_ROUTE_BIT = 0x80000,
    OVERLAY_NPC_TRIANGULATE_BIT = 0x100000,
    OVERLAY_NPC_ZAP_BIT = 0x200000,
    OVERLAY_NPC_ENEMIES_BIT = 0x400000,
    OVERLAY_NPC_CONDITIONS_BIT = 0x800000,
    OVERLAY_NPC_COMBAT_BIT = 0x1000000,
    OVERLAY_NPC_TASK_BIT = 0x2000000,
    OVERLAY_NPC_BODYLOCATIONS = 0x4000000,
    OVERLAY_NPC_VIEWCONE_BIT = 0x8000000,
    OVERLAY_NPC_KILL_BIT = 0x10000000,
    OVERLAY_WC_CHANGE_ENTITY = 0x20000000,
    OVERLAY_BUDDHA_MODE = 0x40000000,
    OVERLAY_NPC_STEERING_REGULATIONS = 0x80000000,
    OVERLAY_NPC_TASK_TEXT_BIT = 0x100000000,
    OVERLAY_PROP_DEBUG = 0x200000000,
    OVERLAY_NPC_RELATION_BIT = 0x400000000,
    OVERLAY_VIEWOFFSET = 0x800000000,
    OVERLAY_VCOLLIDE_WIREFRAME_BIT = 0x1000000000,
    OVERLAY_NPC_NEAREST_NODE_BIT = 0x2000000000,
    OVERLAY_ACTORNAME_BIT = 0x4000000000,
    OVERLAY_NPC_CONDITIONS_TEXT_BIT = 0x8000000000,
}

public enum Detail2Combo_t : uint
{
    DETAIL_2_COMBO_UNINITIALIZED = 0xFFFFFFFF,
    DETAIL_2_COMBO_OFF = 0x0,
    DETAIL_2_COMBO_ADD = 0x1,
    DETAIL_2_COMBO_ADD_SELF_ILLUM = 0x2,
    DETAIL_2_COMBO_MOD2X = 0x3,
    DETAIL_2_COMBO_MUL = 0x4,
    DETAIL_2_COMBO_CROSSFADE = 0x5,
}

public enum DetailCombo_t : uint
{
    DETAIL_COMBO_OFF = 0x0,
    DETAIL_COMBO_ADD = 0x1,
    DETAIL_COMBO_ADD_SELF_ILLUM = 0x2,
    DETAIL_COMBO_MOD2X = 0x3,
}

public enum DisableShadows_t : byte
{
    kDisableShadows_None = 0x0,
    kDisableShadows_All = 0x1,
    kDisableShadows_Baked = 0x2,
    kDisableShadows_Realtime = 0x3,
}

public enum Disposition_t : uint
{
    D_ER = 0x0,
    D_HT = 0x1,
    D_FR = 0x2,
    D_LI = 0x3,
    D_NU = 0x4,
    D_ERROR = 0x0,
    D_HATE = 0x1,
    D_FEAR = 0x2,
    D_LIKE = 0x3,
    D_NEUTRAL = 0x4,
}

public enum doorCheck_e : uint
{
    DOOR_CHECK_FORWARD = 0x0,
    DOOR_CHECK_BACKWARD = 0x1,
    DOOR_CHECK_FULL = 0x2,
}

public enum DoorState_t : uint
{
    DOOR_STATE_CLOSED = 0x0,
    DOOR_STATE_OPENING = 0x1,
    DOOR_STATE_OPEN = 0x2,
    DOOR_STATE_CLOSING = 0x3,
    DOOR_STATE_AJAR = 0x4,
}

public enum EDemoBoneSelectionMode : uint
{
    CaptureAllBones = 0x0,
    CaptureSelectedBones = 0x1,
}

public enum EGrenadeThrowState : uint
{
    NotThrowing = 0x0,
    Throwing = 0x1,
    ThrowComplete = 0x2,
}

public enum EInButtonState : uint
{
    IN_BUTTON_UP = 0x0,
    IN_BUTTON_DOWN = 0x1,
    IN_BUTTON_DOWN_UP = 0x2,
    IN_BUTTON_UP_DOWN = 0x3,
    IN_BUTTON_UP_DOWN_UP = 0x4,
    IN_BUTTON_DOWN_UP_DOWN = 0x5,
    IN_BUTTON_DOWN_UP_DOWN_UP = 0x6,
    IN_BUTTON_UP_DOWN_UP_DOWN = 0x7,
    IN_BUTTON_STATE_COUNT = 0x8,
}

public enum EKillTypes_t : byte
{
    KILL_NONE = 0x0,
    KILL_DEFAULT = 0x1,
    KILL_HEADSHOT = 0x2,
    KILL_BLAST = 0x3,
    KILL_BURN = 0x4,
    KILL_SLASH = 0x5,
    KILL_SHOCK = 0x6,
    KILLTYPE_COUNT = 0x7,
}

public enum ELayoutNodeType : uint
{
    ROOT = 0x0,
    STYLES = 0x1,
    SCRIPT_BODY = 0x2,
    SCRIPTS = 0x3,
    SNIPPETS = 0x4,
    INCLUDE = 0x5,
    SNIPPET = 0x6,
    PANEL = 0x7,
    PANEL_ATTRIBUTE = 0x8,
    PANEL_ATTRIBUTE_VALUE = 0x9,
    REFERENCE_CONTENT = 0xA,
    REFERENCE_COMPILED = 0xB,
    REFERENCE_PASSTHROUGH = 0xC,
}

public enum EntFinderMethod_t : uint
{
    ENT_FIND_METHOD_NEAREST = 0x0,
    ENT_FIND_METHOD_FARTHEST = 0x1,
    ENT_FIND_METHOD_RANDOM = 0x2,
}

public enum EntityDisolveType_t : uint
{
    ENTITY_DISSOLVE_INVALID = 0xFFFFFFFF,
    ENTITY_DISSOLVE_NORMAL = 0x0,
    ENTITY_DISSOLVE_ELECTRICAL = 0x1,
    ENTITY_DISSOLVE_ELECTRICAL_LIGHT = 0x2,
    ENTITY_DISSOLVE_CORE = 0x3,
}

public enum EntityDormancyType_t : uint
{
    ENTITY_NOT_DORMANT = 0x0,
    ENTITY_DORMANT = 0x1,
    ENTITY_SUSPENDED = 0x2,
}

public enum EntityIOTargetType_t : uint
{
    ENTITY_IO_TARGET_INVALID = 0xFFFFFFFF,
    ENTITY_IO_TARGET_ENTITYNAME = 0x2,
    ENTITY_IO_TARGET_EHANDLE = 0x6,
    ENTITY_IO_TARGET_ENTITYNAME_OR_CLASSNAME = 0x7,
}

public enum EntitySubclassScope_t : uint
{
    SUBCLASS_SCOPE_NONE = 0xFFFFFFFF,
    SUBCLASS_SCOPE_PRECIPITATION = 0x0,
    SUBCLASS_SCOPE_PLAYER_WEAPONS = 0x1,
    SUBCLASS_SCOPE_COUNT = 0x2,
}

public enum EOverrideBlockLOS_t : uint
{
    BLOCK_LOS_DEFAULT = 0x0,
    BLOCK_LOS_FORCE_FALSE = 0x1,
    BLOCK_LOS_FORCE_TRUE = 0x2,
}

public enum EStyleNodeType : uint
{
    ROOT = 0x0,
    EXPRESSION = 0x1,
    PROPERTY = 0x2,
    DEFINE = 0x3,
    IMPORT = 0x4,
    KEYFRAMES = 0x5,
    KEYFRAME_SELECTOR = 0x6,
    STYLE_SELECTOR = 0x7,
    WHITESPACE = 0x8,
    EXPRESSION_TEXT = 0x9,
    EXPRESSION_URL = 0xA,
    EXPRESSION_CONCAT = 0xB,
    REFERENCE_CONTENT = 0xC,
    REFERENCE_COMPILED = 0xD,
    REFERENCE_PASSTHROUGH = 0xE,
}

public enum Explosions : uint
{
    expRandom = 0x0,
    expDirected = 0x1,
    expUsePrecise = 0x2,
}

public enum FacingMode : uint
{
    FacingMode_Manual = 0x0,
    FacingMode_Path = 0x1,
    FacingMode_LookTarget = 0x2,
}

public enum FieldNetworkOption : uint
{
    Auto = 0x0,
    ForceEnable = 0x1,
    ForceDisable = 0x2,
}

public enum fieldtype_t : byte
{
    FIELD_VOID = 0x0,
    FIELD_FLOAT32 = 0x1,
    FIELD_STRING = 0x2,
    FIELD_VECTOR = 0x3,
    FIELD_QUATERNION = 0x4,
    FIELD_INT32 = 0x5,
    FIELD_BOOLEAN = 0x6,
    FIELD_INT16 = 0x7,
    FIELD_CHARACTER = 0x8,
    FIELD_COLOR32 = 0x9,
    FIELD_EMBEDDED = 0xA,
    FIELD_CUSTOM = 0xB,
    FIELD_CLASSPTR = 0xC,
    FIELD_EHANDLE = 0xD,
    FIELD_POSITION_VECTOR = 0xE,
    FIELD_TIME = 0xF,
    FIELD_TICK = 0x10,
    FIELD_SOUNDNAME = 0x11,
    FIELD_INPUT = 0x12,
    FIELD_FUNCTION = 0x13,
    FIELD_VMATRIX = 0x14,
    FIELD_VMATRIX_WORLDSPACE = 0x15,
    FIELD_MATRIX3X4_WORLDSPACE = 0x16,
    FIELD_INTERVAL = 0x17,
    FIELD_UNUSED = 0x18,
    FIELD_VECTOR2D = 0x19,
    FIELD_INT64 = 0x1A,
    FIELD_VECTOR4D = 0x1B,
    FIELD_RESOURCE = 0x1C,
    FIELD_TYPEUNKNOWN = 0x1D,
    FIELD_CSTRING = 0x1E,
    FIELD_HSCRIPT = 0x1F,
    FIELD_VARIANT = 0x20,
    FIELD_UINT64 = 0x21,
    FIELD_FLOAT64 = 0x22,
    FIELD_POSITIVEINTEGER_OR_NULL = 0x23,
    FIELD_HSCRIPT_NEW_INSTANCE = 0x24,
    FIELD_UINT32 = 0x25,
    FIELD_UTLSTRINGTOKEN = 0x26,
    FIELD_QANGLE = 0x27,
    FIELD_NETWORK_ORIGIN_CELL_QUANTIZED_VECTOR = 0x28,
    FIELD_HMATERIAL = 0x29,
    FIELD_HMODEL = 0x2A,
    FIELD_NETWORK_QUANTIZED_VECTOR = 0x2B,
    FIELD_NETWORK_QUANTIZED_FLOAT = 0x2C,
    FIELD_DIRECTION_VECTOR_WORLDSPACE = 0x2D,
    FIELD_QANGLE_WORLDSPACE = 0x2E,
    FIELD_QUATERNION_WORLDSPACE = 0x2F,
    FIELD_HSCRIPT_LIGHTBINDING = 0x30,
    FIELD_V8_VALUE = 0x31,
    FIELD_V8_OBJECT = 0x32,
    FIELD_V8_ARRAY = 0x33,
    FIELD_V8_CALLBACK_INFO = 0x34,
    FIELD_UTLSTRING = 0x35,
    FIELD_NETWORK_ORIGIN_CELL_QUANTIZED_POSITION_VECTOR = 0x36,
    FIELD_HRENDERTEXTURE = 0x37,
    FIELD_HPARTICLESYSTEMDEFINITION = 0x38,
    FIELD_UINT8 = 0x39,
    FIELD_UINT16 = 0x3A,
    FIELD_CTRANSFORM = 0x3B,
    FIELD_CTRANSFORM_WORLDSPACE = 0x3C,
    FIELD_HPOSTPROCESSING = 0x3D,
    FIELD_MATRIX3X4 = 0x3E,
    FIELD_SHIM = 0x3F,
    FIELD_CMOTIONTRANSFORM = 0x40,
    FIELD_CMOTIONTRANSFORM_WORLDSPACE = 0x41,
    FIELD_ATTACHMENT_HANDLE = 0x42,
    FIELD_AMMO_INDEX = 0x43,
    FIELD_CONDITION_ID = 0x44,
    FIELD_AI_SCHEDULE_BITS = 0x45,
    FIELD_MODIFIER_HANDLE = 0x46,
    FIELD_ROTATION_VECTOR = 0x47,
    FIELD_ROTATION_VECTOR_WORLDSPACE = 0x48,
    FIELD_HVDATA = 0x49,
    FIELD_SCALE32 = 0x4A,
    FIELD_STRING_AND_TOKEN = 0x4B,
    FIELD_ENGINE_TIME = 0x4C,
    FIELD_ENGINE_TICK = 0x4D,
    FIELD_WORLD_GROUP_ID = 0x4E,
    FIELD_TYPECOUNT = 0x4F,
}

public enum filter_t : uint
{
    FILTER_AND = 0x0,
    FILTER_OR = 0x1,
}

public enum FixAngleSet_t : byte
{
    None = 0x0,
    Absolute = 0x1,
    Relative = 0x2,
}

public enum FlexOpCode_t : uint
{
    FLEX_OP_CONST = 0x1,
    FLEX_OP_FETCH1 = 0x2,
    FLEX_OP_FETCH2 = 0x3,
    FLEX_OP_ADD = 0x4,
    FLEX_OP_SUB = 0x5,
    FLEX_OP_MUL = 0x6,
    FLEX_OP_DIV = 0x7,
    FLEX_OP_NEG = 0x8,
    FLEX_OP_EXP = 0x9,
    FLEX_OP_OPEN = 0xA,
    FLEX_OP_CLOSE = 0xB,
    FLEX_OP_COMMA = 0xC,
    FLEX_OP_MAX = 0xD,
    FLEX_OP_MIN = 0xE,
    FLEX_OP_2WAY_0 = 0xF,
    FLEX_OP_2WAY_1 = 0x10,
    FLEX_OP_NWAY = 0x11,
    FLEX_OP_COMBO = 0x12,
    FLEX_OP_DOMINATE = 0x13,
    FLEX_OP_DME_LOWER_EYELID = 0x14,
    FLEX_OP_DME_UPPER_EYELID = 0x15,
    FLEX_OP_SQRT = 0x16,
    FLEX_OP_REMAPVALCLAMPED = 0x17,
    FLEX_OP_SIN = 0x18,
    FLEX_OP_COS = 0x19,
    FLEX_OP_ABS = 0x1A,
}

public enum FootFallTagFoot_t : uint
{
    FOOT1 = 0x0,
    FOOT2 = 0x1,
    FOOT3 = 0x2,
    FOOT4 = 0x3,
    FOOT5 = 0x4,
    FOOT6 = 0x5,
    FOOT7 = 0x6,
    FOOT8 = 0x7,
}

public enum FootLockSubVisualization : uint
{
    FOOTLOCKSUBVISUALIZATION_ReachabilityAnalysis = 0x0,
    FOOTLOCKSUBVISUALIZATION_IKSolve = 0x1,
}

public enum FootPinningTimingSource : uint
{
    FootMotion = 0x0,
    Tag = 0x1,
    Parameter = 0x2,
}

public enum FootstepLandedFootSoundType_t : uint
{
    FOOTSOUND_Left = 0x0,
    FOOTSOUND_Right = 0x1,
    FOOTSOUND_UseOverrideSound = 0x2,
}

public enum ForcedCrouchState_t : uint
{
    FORCEDCROUCH_NONE = 0x0,
    FORCEDCROUCH_CROUCHED = 0x1,
    FORCEDCROUCH_UNCROUCHED = 0x2,
}

public enum FuncDoorSpawnPos_t : uint
{
    FUNC_DOOR_SPAWN_CLOSED = 0x0,
    FUNC_DOOR_SPAWN_OPEN = 0x1,
}

public enum FuseVariableAccess_t : byte
{
    WRITABLE = 0x0,
    READ_ONLY = 0x1,
}

public enum FuseVariableType_t : byte
{
    INVALID = 0x0,
    BOOL = 0x1,
    INT8 = 0x2,
    INT16 = 0x3,
    INT32 = 0x4,
    UINT8 = 0x5,
    UINT16 = 0x6,
    UINT32 = 0x7,
    FLOAT32 = 0x8,
}

public enum GameAnimEventIndex_t : uint
{
    AE_EMPTY = 0x0,
    AE_CL_PLAYSOUND = 0x1,
    AE_CL_PLAYSOUND_ATTACHMENT = 0x2,
    AE_CL_PLAYSOUND_POSITION = 0x3,
    AE_SV_PLAYSOUND = 0x4,
    AE_CL_STOPSOUND = 0x5,
    AE_CL_PLAYSOUND_LOOPING = 0x6,
    AE_CL_CREATE_PARTICLE_EFFECT = 0x7,
    AE_CL_STOP_PARTICLE_EFFECT = 0x8,
    AE_CL_CREATE_PARTICLE_EFFECT_CFG = 0x9,
    AE_SV_CREATE_PARTICLE_EFFECT_CFG = 0xA,
    AE_SV_STOP_PARTICLE_EFFECT = 0xB,
    AE_FOOTSTEP = 0xC,
    AE_RAGDOLL = 0xD,
    AE_CL_STOP_RAGDOLL_CONTROL = 0xE,
    AE_CL_ENABLE_BODYGROUP = 0xF,
    AE_CL_DISABLE_BODYGROUP = 0x10,
    AE_CL_BODYGROUP_SET_VALUE = 0x11,
    AE_SV_BODYGROUP_SET_VALUE = 0x12,
    AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN = 0x13,
    AE_WPN_PRIMARYATTACK = 0x14,
    AE_WPN_SECONDARYATTACK = 0x15,
    AE_FIRE_INPUT = 0x16,
    AE_CL_CLOTH_ATTR = 0x17,
    AE_CL_CLOTH_GROUND_OFFSET = 0x18,
    AE_CL_CLOTH_STIFFEN = 0x19,
    AE_CL_CLOTH_EFFECT = 0x1A,
    AE_CL_CREATE_ANIM_SCOPE_PROP = 0x1B,
    AE_CL_WEAPON_TRANSITION_INTO_HAND = 0x1C,
    AE_CL_BODYGROUP_SET_TO_CLIP = 0x1D,
    AE_CL_BODYGROUP_SET_TO_NEXTCLIP = 0x1E,
    AE_SV_SHOW_SILENCER = 0x1F,
    AE_SV_ATTACH_SILENCER_COMPLETE = 0x20,
    AE_SV_HIDE_SILENCER = 0x21,
    AE_SV_DETACH_SILENCER_COMPLETE = 0x22,
    AE_CL_EJECT_MAG = 0x23,
    AE_WPN_COMPLETE_RELOAD = 0x24,
    AE_WPN_HEALTHSHOT_INJECT = 0x25,
    AE_CL_C4_SCREEN_TEXT = 0x26,
}

public enum gear_slot_t : uint
{
    GEAR_SLOT_INVALID = 0xFFFFFFFF,
    GEAR_SLOT_RIFLE = 0x0,
    GEAR_SLOT_PISTOL = 0x1,
    GEAR_SLOT_KNIFE = 0x2,
    GEAR_SLOT_GRENADES = 0x3,
    GEAR_SLOT_C4 = 0x4,
    GEAR_SLOT_RESERVED_SLOT6 = 0x5,
    GEAR_SLOT_RESERVED_SLOT7 = 0x6,
    GEAR_SLOT_RESERVED_SLOT8 = 0x7,
    GEAR_SLOT_RESERVED_SLOT9 = 0x8,
    GEAR_SLOT_RESERVED_SLOT10 = 0x9,
    GEAR_SLOT_RESERVED_SLOT11 = 0xA,
    GEAR_SLOT_BOOSTS = 0xB,
    GEAR_SLOT_UTILITY = 0xC,
    GEAR_SLOT_COUNT = 0xD,
    GEAR_SLOT_FIRST = 0x0,
    GEAR_SLOT_LAST = 0xC,
}

public enum GrenadeType_t : uint
{
    GRENADE_TYPE_EXPLOSIVE = 0x0,
    GRENADE_TYPE_FLASH = 0x1,
    GRENADE_TYPE_FIRE = 0x2,
    GRENADE_TYPE_DECOY = 0x3,
    GRENADE_TYPE_SMOKE = 0x4,
    GRENADE_TYPE_SENSOR = 0x5,
    GRENADE_TYPE_SNOWBALL = 0x6,
    GRENADE_TYPE_TOTAL = 0x7,
}

public enum HierarchyType_t : uint
{
    HIERARCHY_NONE = 0x0,
    HIERARCHY_BONE_MERGE = 0x1,
    HIERARCHY_ATTACHMENT = 0x2,
    HIERARCHY_ABSORIGIN = 0x3,
    HIERARCHY_BONE = 0x4,
    HIERARCHY_TYPE_COUNT = 0x5,
}

public enum HitboxLerpType_t : uint
{
    HITBOX_LERP_LIFETIME = 0x0,
    HITBOX_LERP_CONSTANT = 0x1,
}

public enum HitGroup_t : uint
{
    HITGROUP_INVALID = 0xFFFFFFFF,
    HITGROUP_GENERIC = 0x0,
    HITGROUP_HEAD = 0x1,
    HITGROUP_CHEST = 0x2,
    HITGROUP_STOMACH = 0x3,
    HITGROUP_LEFTARM = 0x4,
    HITGROUP_RIGHTARM = 0x5,
    HITGROUP_LEFTLEG = 0x6,
    HITGROUP_RIGHTLEG = 0x7,
    HITGROUP_NECK = 0x8,
    HITGROUP_UNUSED = 0x9,
    HITGROUP_GEAR = 0xA,
    HITGROUP_SPECIAL = 0xB,
    HITGROUP_COUNT = 0xC,
}

public enum HorizJustification_e : uint
{
    HORIZ_JUSTIFICATION_LEFT = 0x0,
    HORIZ_JUSTIFICATION_CENTER = 0x1,
    HORIZ_JUSTIFICATION_RIGHT = 0x2,
    HORIZ_JUSTIFICATION_NONE = 0x3,
}

public enum Hull_t : uint
{
    HULL_HUMAN = 0x0,
    HULL_SMALL_CENTERED = 0x1,
    HULL_WIDE_HUMAN = 0x2,
    HULL_TINY = 0x3,
    HULL_MEDIUM = 0x4,
    HULL_TINY_CENTERED = 0x5,
    HULL_LARGE = 0x6,
    HULL_LARGE_CENTERED = 0x7,
    HULL_MEDIUM_TALL = 0x8,
    HULL_SMALL = 0x9,
    NUM_HULLS = 0xA,
    HULL_NONE = 0xB,
}

public enum IChoreoServicesChoreoState_t : uint
{
    STATE_PRE_SCRIPT = 0x0,
    STATE_WAIT_FOR_SCRIPT = 0x1,
    STATE_WALK_TO_MARK = 0x2,
    STATE_SYNCHRONIZE_SCRIPT = 0x3,
    STATE_PLAY_SCRIPT = 0x4,
    STATE_PLAY_SCRIPT_POST_IDLE = 0x5,
    STATE_PLAY_SCRIPT_POST_IDLE_DONE = 0x6,
}

public enum IChoreoServicesScriptState_t : uint
{
    SCRIPT_PLAYING = 0x0,
    SCRIPT_WAIT = 0x1,
    SCRIPT_POST_IDLE = 0x2,
    SCRIPT_CLEANUP = 0x3,
    SCRIPT_WALK_TO_MARK = 0x4,
    SCRIPT_RUN_TO_MARK = 0x5,
    SCRIPT_CUSTOM_MOVE_TO_MARK = 0x6,
}

public enum IKChannelMode : uint
{
    TwoBone = 0x0,
    TwoBone_Translate = 0x1,
    OneBone = 0x2,
    OneBone_Translate = 0x3,
}

public enum IkEndEffectorType : uint
{
    IkEndEffector_Attachment = 0x0,
    IkEndEffector_Bone = 0x1,
}

public enum IKSolverType : uint
{
    IKSOLVER_Perlin = 0x0,
    IKSOLVER_TwoBone = 0x1,
    IKSOLVER_Fabrik = 0x2,
    IKSOLVER_DogLeg3Bone = 0x3,
    IKSOLVER_CCD = 0x4,
    IKSOLVER_COUNT = 0x5,
}

public enum IKTargetCoordinateSystem : uint
{
    IKTARGETCOORDINATESYSTEM_WorldSpace = 0x0,
    IKTARGETCOORDINATESYSTEM_ModelSpace = 0x1,
    IKTARGETCOORDINATESYSTEM_COUNT = 0x2,
}

public enum IKTargetSource : uint
{
    IKTARGETSOURCE_Bone = 0x0,
    IKTARGETSOURCE_AnimgraphParameter = 0x1,
    IKTARGETSOURCE_COUNT = 0x2,
}

public enum IkTargetType : uint
{
    IkTarget_Attachment = 0x0,
    IkTarget_Bone = 0x1,
    IkTarget_Parameter_ModelSpace = 0x2,
    IkTarget_Parameter_WorldSpace = 0x3,
}

public enum InheritableBoolType_t : uint
{
    INHERITABLE_BOOL_INHERIT = 0x0,
    INHERITABLE_BOOL_FALSE = 0x1,
    INHERITABLE_BOOL_TRUE = 0x2,
}

public enum InputBitMask_t : ulong
{
    IN_NONE = 0x0,
    IN_ALL = 0xFFFFFFFFFFFFFFFF,
    IN_ATTACK = 0x1,
    IN_JUMP = 0x2,
    IN_DUCK = 0x4,
    IN_FORWARD = 0x8,
    IN_BACK = 0x10,
    IN_USE = 0x20,
    IN_TURNLEFT = 0x80,
    IN_TURNRIGHT = 0x100,
    IN_MOVELEFT = 0x200,
    IN_MOVERIGHT = 0x400,
    IN_ATTACK2 = 0x800,
    IN_RELOAD = 0x2000,
    IN_SPEED = 0x10000,
    IN_JOYAUTOSPRINT = 0x20000,
    IN_FIRST_MOD_SPECIFIC_BIT = 0x100000000,
    IN_USEORRELOAD = 0x100000000,
    IN_SCORE = 0x200000000,
    IN_ZOOM = 0x400000000,
    IN_LOOK_AT_WEAPON = 0x800000000,
}

public enum InputLayoutVariation_t : uint
{
    INPUT_LAYOUT_VARIATION_DEFAULT = 0x0,
    INPUT_LAYOUT_VARIATION_STREAM1_INSTANCEID = 0x1,
    INPUT_LAYOUT_VARIATION_STREAM1_INSTANCEID_MORPH_VERT_ID = 0x2,
    INPUT_LAYOUT_VARIATION_MAX = 0x3,
}

public enum ItemFlagTypes_t : byte
{
    ITEM_FLAG_NONE = 0x0,
    ITEM_FLAG_CAN_SELECT_WITHOUT_AMMO = 0x1,
    ITEM_FLAG_NOAUTORELOAD = 0x2,
    ITEM_FLAG_NOAUTOSWITCHEMPTY = 0x4,
    ITEM_FLAG_LIMITINWORLD = 0x8,
    ITEM_FLAG_EXHAUSTIBLE = 0x10,
    ITEM_FLAG_DOHITLOCATIONDMG = 0x20,
    ITEM_FLAG_NOAMMOPICKUPS = 0x40,
    ITEM_FLAG_NOITEMPICKUP = 0x80,
}

public enum JiggleBoneSimSpace : uint
{
    SimSpace_Local = 0x0,
    SimSpace_Model = 0x1,
    SimSpace_World = 0x2,
}

public enum JointAxis_t : uint
{
    JOINT_AXIS_X = 0x0,
    JOINT_AXIS_Y = 0x1,
    JOINT_AXIS_Z = 0x2,
    JOINT_AXIS_COUNT = 0x3,
}

public enum JointMotion_t : uint
{
    JOINT_MOTION_FREE = 0x0,
    JOINT_MOTION_LOCKED = 0x1,
    JOINT_MOTION_COUNT = 0x2,
}

public enum JumpCorrectionMethod : uint
{
    ScaleMotion = 0x0,
    AddCorrectionDelta = 0x1,
}

public enum LatchDirtyPermission_t : uint
{
    LATCH_DIRTY_DISALLOW = 0x0,
    LATCH_DIRTY_SERVER_CONTROLLED = 0x1,
    LATCH_DIRTY_CLIENT_SIMULATED = 0x2,
    LATCH_DIRTY_PREDICTION = 0x3,
    LATCH_DIRTY_FRAMESIMULATE = 0x4,
    LATCH_DIRTY_PARTICLE_SIMULATE = 0x5,
}

public enum LayoutPositionType_e : uint
{
    LAYOUTPOSITIONTYPE_VIEWPORT_RELATIVE = 0x0,
    LAYOUTPOSITIONTYPE_FRACTIONAL = 0x1,
    LAYOUTPOSITIONTYPE_NONE = 0x2,
}

public enum LessonPanelLayoutFileTypes_t : uint
{
    LAYOUT_HAND_DEFAULT = 0x0,
    LAYOUT_WORLD_DEFAULT = 0x1,
    LAYOUT_CUSTOM = 0x2,
}

public enum LifeState_t : uint
{
    LIFE_ALIVE = 0x0,
    LIFE_DYING = 0x1,
    LIFE_DEAD = 0x2,
    LIFE_RESPAWNABLE = 0x3,
    LIFE_RESPAWNING = 0x4,
}

public enum loadout_slot_t : uint
{
    LOADOUT_SLOT_INVALID = 0xFFFFFFFF,
    LOADOUT_SLOT_MELEE = 0x0,
    LOADOUT_SLOT_C4 = 0x1,
    LOADOUT_SLOT_FIRST_AUTO_BUY_WEAPON = 0x0,
    LOADOUT_SLOT_LAST_AUTO_BUY_WEAPON = 0x1,
    LOADOUT_SLOT_SECONDARY0 = 0x2,
    LOADOUT_SLOT_SECONDARY1 = 0x3,
    LOADOUT_SLOT_SECONDARY2 = 0x4,
    LOADOUT_SLOT_SECONDARY3 = 0x5,
    LOADOUT_SLOT_SECONDARY4 = 0x6,
    LOADOUT_SLOT_SECONDARY5 = 0x7,
    LOADOUT_SLOT_SMG0 = 0x8,
    LOADOUT_SLOT_SMG1 = 0x9,
    LOADOUT_SLOT_SMG2 = 0xA,
    LOADOUT_SLOT_SMG3 = 0xB,
    LOADOUT_SLOT_SMG4 = 0xC,
    LOADOUT_SLOT_SMG5 = 0xD,
    LOADOUT_SLOT_RIFLE0 = 0xE,
    LOADOUT_SLOT_RIFLE1 = 0xF,
    LOADOUT_SLOT_RIFLE2 = 0x10,
    LOADOUT_SLOT_RIFLE3 = 0x11,
    LOADOUT_SLOT_RIFLE4 = 0x12,
    LOADOUT_SLOT_RIFLE5 = 0x13,
    LOADOUT_SLOT_HEAVY0 = 0x14,
    LOADOUT_SLOT_HEAVY1 = 0x15,
    LOADOUT_SLOT_HEAVY2 = 0x16,
    LOADOUT_SLOT_HEAVY3 = 0x17,
    LOADOUT_SLOT_HEAVY4 = 0x18,
    LOADOUT_SLOT_HEAVY5 = 0x19,
    LOADOUT_SLOT_FIRST_WHEEL_WEAPON = 0x2,
    LOADOUT_SLOT_LAST_WHEEL_WEAPON = 0x19,
    LOADOUT_SLOT_FIRST_PRIMARY_WEAPON = 0x8,
    LOADOUT_SLOT_LAST_PRIMARY_WEAPON = 0x19,
    LOADOUT_SLOT_FIRST_WHEEL_GRENADE = 0x1A,
    LOADOUT_SLOT_GRENADE0 = 0x1A,
    LOADOUT_SLOT_GRENADE1 = 0x1B,
    LOADOUT_SLOT_GRENADE2 = 0x1C,
    LOADOUT_SLOT_GRENADE3 = 0x1D,
    LOADOUT_SLOT_GRENADE4 = 0x1E,
    LOADOUT_SLOT_GRENADE5 = 0x1F,
    LOADOUT_SLOT_LAST_WHEEL_GRENADE = 0x1F,
    LOADOUT_SLOT_EQUIPMENT0 = 0x20,
    LOADOUT_SLOT_EQUIPMENT1 = 0x21,
    LOADOUT_SLOT_EQUIPMENT2 = 0x22,
    LOADOUT_SLOT_EQUIPMENT3 = 0x23,
    LOADOUT_SLOT_EQUIPMENT4 = 0x24,
    LOADOUT_SLOT_EQUIPMENT5 = 0x25,
    LOADOUT_SLOT_FIRST_WHEEL_EQUIPMENT = 0x20,
    LOADOUT_SLOT_LAST_WHEEL_EQUIPMENT = 0x25,
    LOADOUT_SLOT_CLOTHING_CUSTOMPLAYER = 0x26,
    LOADOUT_SLOT_PET = 0x27,
    LOADOUT_SLOT_CLOTHING_FACEMASK = 0x28,
    LOADOUT_SLOT_CLOTHING_HANDS = 0x29,
    LOADOUT_SLOT_FIRST_COSMETIC = 0x29,
    LOADOUT_SLOT_LAST_COSMETIC = 0x29,
    LOADOUT_SLOT_CLOTHING_EYEWEAR = 0x2A,
    LOADOUT_SLOT_CLOTHING_HAT = 0x2B,
    LOADOUT_SLOT_CLOTHING_LOWERBODY = 0x2C,
    LOADOUT_SLOT_CLOTHING_TORSO = 0x2D,
    LOADOUT_SLOT_CLOTHING_APPEARANCE = 0x2E,
    LOADOUT_SLOT_MISC0 = 0x2F,
    LOADOUT_SLOT_MISC1 = 0x30,
    LOADOUT_SLOT_MISC2 = 0x31,
    LOADOUT_SLOT_MISC3 = 0x32,
    LOADOUT_SLOT_MISC4 = 0x33,
    LOADOUT_SLOT_MISC5 = 0x34,
    LOADOUT_SLOT_MISC6 = 0x35,
    LOADOUT_SLOT_MUSICKIT = 0x36,
    LOADOUT_SLOT_FLAIR0 = 0x37,
    LOADOUT_SLOT_SPRAY0 = 0x38,
    LOADOUT_SLOT_FIRST_ALL_CHARACTER = 0x36,
    LOADOUT_SLOT_LAST_ALL_CHARACTER = 0x38,
    LOADOUT_SLOT_COUNT = 0x39,
}

public enum MaterialProxyType_t : uint
{
    MATERIAL_PROXY_STATUS_EFFECT = 0x0,
    MATERIAL_PROXY_TINT = 0x1,
}

public enum Materials : uint
{
    matGlass = 0x0,
    matWood = 0x1,
    matMetal = 0x2,
    matFlesh = 0x3,
    matCinderBlock = 0x4,
    matCeilingTile = 0x5,
    matComputer = 0x6,
    matUnbreakableGlass = 0x7,
    matRocks = 0x8,
    matWeb = 0x9,
    matNone = 0xA,
    matLastMaterial = 0xB,
}

public enum MatterialAttributeTagType_t : uint
{
    MATERIAL_ATTRIBUTE_TAG_VALUE = 0x0,
    MATERIAL_ATTRIBUTE_TAG_COLOR = 0x1,
}

public enum MedalRank_t : uint
{
    MEDAL_RANK_NONE = 0x0,
    MEDAL_RANK_BRONZE = 0x1,
    MEDAL_RANK_SILVER = 0x2,
    MEDAL_RANK_GOLD = 0x3,
    MEDAL_RANK_COUNT = 0x4,
}

public enum MeshDrawPrimitiveFlags_t : uint
{
    MESH_DRAW_FLAGS_NONE = 0x0,
    MESH_DRAW_FLAGS_USE_SHADOW_FAST_PATH = 0x1,
    MESH_DRAW_FLAGS_USE_COMPRESSED_NORMAL_TANGENT = 0x2,
    MESH_DRAW_INPUT_LAYOUT_IS_NOT_MATCHED_TO_MATERIAL = 0x8,
    MESH_DRAW_FLAGS_USE_COMPRESSED_PER_VERTEX_LIGHTING = 0x10,
    MESH_DRAW_FLAGS_USE_UNCOMPRESSED_PER_VERTEX_LIGHTING = 0x20,
    MESH_DRAW_FLAGS_CAN_BATCH_WITH_DYNAMIC_SHADER_CONSTANTS = 0x40,
    MESH_DRAW_FLAGS_DRAW_LAST = 0x80,
}

public enum MissingParentInheritBehavior_t : uint
{
    MISSING_PARENT_DO_NOTHING = 0xFFFFFFFF,
    MISSING_PARENT_KILL = 0x0,
    MISSING_PARENT_FIND_NEW = 0x1,
    MISSING_PARENT_SAME_INDEX = 0x2,
}

public enum ModelBoneFlexComponent_t : uint
{
    MODEL_BONE_FLEX_INVALID = 0xFFFFFFFF,
    MODEL_BONE_FLEX_TX = 0x0,
    MODEL_BONE_FLEX_TY = 0x1,
    MODEL_BONE_FLEX_TZ = 0x2,
}

public enum ModelConfigAttachmentType_t : uint
{
    MODEL_CONFIG_ATTACHMENT_INVALID = 0xFFFFFFFF,
    MODEL_CONFIG_ATTACHMENT_BONE_OR_ATTACHMENT = 0x0,
    MODEL_CONFIG_ATTACHMENT_ROOT_RELATIVE = 0x1,
    MODEL_CONFIG_ATTACHMENT_BONEMERGE = 0x2,
    MODEL_CONFIG_ATTACHMENT_COUNT = 0x3,
}

public enum ModelSkeletonData_tBoneFlags_t : uint
{
    FLAG_NO_BONE_FLAGS = 0x0,
    FLAG_BONEFLEXDRIVER = 0x4,
    FLAG_CLOTH = 0x8,
    FLAG_PHYSICS = 0x10,
    FLAG_ATTACHMENT = 0x20,
    FLAG_ANIMATION = 0x40,
    FLAG_MESH = 0x80,
    FLAG_HITBOX = 0x100,
    FLAG_BONE_USED_BY_VERTEX_LOD0 = 0x400,
    FLAG_BONE_USED_BY_VERTEX_LOD1 = 0x800,
    FLAG_BONE_USED_BY_VERTEX_LOD2 = 0x1000,
    FLAG_BONE_USED_BY_VERTEX_LOD3 = 0x2000,
    FLAG_BONE_USED_BY_VERTEX_LOD4 = 0x4000,
    FLAG_BONE_USED_BY_VERTEX_LOD5 = 0x8000,
    FLAG_BONE_USED_BY_VERTEX_LOD6 = 0x10000,
    FLAG_BONE_USED_BY_VERTEX_LOD7 = 0x20000,
    FLAG_BONE_MERGE_READ = 0x40000,
    FLAG_BONE_MERGE_WRITE = 0x80000,
    FLAG_ALL_BONE_FLAGS = 0xFFFFF,
    BLEND_PREALIGNED = 0x100000,
    FLAG_RIGIDLENGTH = 0x200000,
    FLAG_PROCEDURAL = 0x400000,
}

public enum ModifyDamageReturn_t : uint
{
    CONTINUE_TO_APPLY_DAMAGE = 0x0,
    ABORT_DO_NOT_APPLY_DAMAGE = 0x1,
}

public enum MoodType_t : uint
{
    eMoodType_Head = 0x0,
    eMoodType_Body = 0x1,
}

public enum MorphBundleType_t : uint
{
    MORPH_BUNDLE_TYPE_NONE = 0x0,
    MORPH_BUNDLE_TYPE_POSITION_SPEED = 0x1,
    MORPH_BUNDLE_TYPE_NORMAL_WRINKLE = 0x2,
    MORPH_BUNDLE_TYPE_COUNT = 0x3,
}

public enum MorphFlexControllerRemapType_t : uint
{
    MORPH_FLEXCONTROLLER_REMAP_PASSTHRU = 0x0,
    MORPH_FLEXCONTROLLER_REMAP_2WAY = 0x1,
    MORPH_FLEXCONTROLLER_REMAP_NWAY = 0x2,
    MORPH_FLEXCONTROLLER_REMAP_EYELID = 0x3,
}

public enum MoveCollide_t : byte
{
    MOVECOLLIDE_DEFAULT = 0x0,
    MOVECOLLIDE_FLY_BOUNCE = 0x1,
    MOVECOLLIDE_FLY_CUSTOM = 0x2,
    MOVECOLLIDE_FLY_SLIDE = 0x3,
    MOVECOLLIDE_COUNT = 0x4,
    MOVECOLLIDE_MAX_BITS = 0x3,
}

public enum MoveLinearAuthoredPos_t : uint
{
    MOVELINEAR_AUTHORED_AT_START_POSITION = 0x0,
    MOVELINEAR_AUTHORED_AT_OPEN_POSITION = 0x1,
    MOVELINEAR_AUTHORED_AT_CLOSED_POSITION = 0x2,
}

public enum MoveMountingAmount_t : uint
{
    MOVE_MOUNT_NONE = 0x0,
    MOVE_MOUNT_LOW = 0x1,
    MOVE_MOUNT_HIGH = 0x2,
    MOVE_MOUNT_MAXCOUNT = 0x3,
}

public enum MoveType_t : byte
{
    MOVETYPE_NONE = 0x0,
    MOVETYPE_OBSOLETE = 0x1,
    MOVETYPE_WALK = 0x2,
    MOVETYPE_STEP = 0x3,
    MOVETYPE_FLY = 0x4,
    MOVETYPE_FLYGRAVITY = 0x5,
    MOVETYPE_VPHYSICS = 0x6,
    MOVETYPE_PUSH = 0x7,
    MOVETYPE_NOCLIP = 0x8,
    MOVETYPE_OBSERVER = 0x9,
    MOVETYPE_LADDER = 0xA,
    MOVETYPE_CUSTOM = 0xB,
    MOVETYPE_LAST = 0xC,
    MOVETYPE_MAX_BITS = 0x5,
}

public enum NavAttributeEnum : uint
{
    NAV_MESH_AVOID = 0x80,
    NAV_MESH_STAIRS = 0x1000,
    NAV_MESH_NON_ZUP = 0x8000,
    NAV_MESH_SHORT_HEIGHT = 0x10000,
    NAV_MESH_CROUCH = 0x10000,
    NAV_MESH_JUMP = 0x2,
    NAV_MESH_PRECISE = 0x4,
    NAV_MESH_NO_JUMP = 0x8,
    NAV_MESH_STOP = 0x10,
    NAV_MESH_RUN = 0x20,
    NAV_MESH_WALK = 0x40,
    NAV_MESH_TRANSIENT = 0x100,
    NAV_MESH_DONT_HIDE = 0x200,
    NAV_MESH_STAND = 0x400,
    NAV_MESH_NO_HOSTAGES = 0x800,
    NAV_MESH_NO_MERGE = 0x2000,
    NAV_MESH_OBSTACLE_TOP = 0x4000,
    NAV_ATTR_FIRST_GAME_INDEX = 0x13,
    NAV_ATTR_LAST_INDEX = 0x1F,
}

public enum NavDirType : uint
{
    NORTH = 0x0,
    EAST = 0x1,
    SOUTH = 0x2,
    WEST = 0x3,
    NUM_NAV_DIR_TYPE_DIRECTIONS = 0x4,
}

public enum navproperties_t : uint
{
    NAV_IGNORE = 0x1,
}

public enum ObjectTypeFlags_t : uint
{
    OBJECT_TYPE_NONE = 0x0,
    OBJECT_TYPE_IMAGE_LOD = 0x1,
    OBJECT_TYPE_GEOMETRY_LOD = 0x2,
    OBJECT_TYPE_DECAL = 0x4,
    OBJECT_TYPE_MODEL = 0x8,
    OBJECT_TYPE_BLOCK_LIGHT = 0x10,
    OBJECT_TYPE_NO_SHADOWS = 0x20,
    OBJECT_TYPE_WORLDSPACE_TEXURE_BLEND = 0x40,
    OBJECT_TYPE_DISABLED_IN_LOW_QUALITY = 0x80,
    OBJECT_TYPE_NO_SUN_SHADOWS = 0x100,
    OBJECT_TYPE_RENDER_WITH_DYNAMIC = 0x200,
    OBJECT_TYPE_RENDER_TO_CUBEMAPS = 0x400,
    OBJECT_TYPE_MODEL_HAS_LODS = 0x800,
    OBJECT_TYPE_OVERLAY = 0x2000,
    OBJECT_TYPE_PRECOMPUTED_VISMEMBERS = 0x4000,
    OBJECT_TYPE_STATIC_CUBE_MAP = 0x8000,
}

public enum ObserverInterpState_t : uint
{
    OBSERVER_INTERP_NONE = 0x0,
    OBSERVER_INTERP_TRAVELING = 0x1,
    OBSERVER_INTERP_SETTLING = 0x2,
}

public enum ObserverMode_t : uint
{
    OBS_MODE_NONE = 0x0,
    OBS_MODE_FIXED = 0x1,
    OBS_MODE_IN_EYE = 0x2,
    OBS_MODE_CHASE = 0x3,
    OBS_MODE_ROAMING = 0x4,
    OBS_MODE_DIRECTED = 0x5,
    NUM_OBSERVER_MODES = 0x6,
}

public enum OnFrame : byte
{
    ONFRAME_UNKNOWN = 0x0,
    ONFRAME_TRUE = 0x1,
    ONFRAME_FALSE = 0x2,
}

public enum ParticleAlphaReferenceType_t : uint
{
    PARTICLE_ALPHA_REFERENCE_ALPHA_ALPHA = 0x0,
    PARTICLE_ALPHA_REFERENCE_OPAQUE_ALPHA = 0x1,
    PARTICLE_ALPHA_REFERENCE_ALPHA_OPAQUE = 0x2,
    PARTICLE_ALPHA_REFERENCE_OPAQUE_OPAQUE = 0x3,
}

public enum ParticleAttachment_t : uint
{
    PATTACH_INVALID = 0xFFFFFFFF,
    PATTACH_ABSORIGIN = 0x0,
    PATTACH_ABSORIGIN_FOLLOW = 0x1,
    PATTACH_CUSTOMORIGIN = 0x2,
    PATTACH_CUSTOMORIGIN_FOLLOW = 0x3,
    PATTACH_POINT = 0x4,
    PATTACH_POINT_FOLLOW = 0x5,
    PATTACH_EYES_FOLLOW = 0x6,
    PATTACH_OVERHEAD_FOLLOW = 0x7,
    PATTACH_WORLDORIGIN = 0x8,
    PATTACH_ROOTBONE_FOLLOW = 0x9,
    PATTACH_RENDERORIGIN_FOLLOW = 0xA,
    PATTACH_MAIN_VIEW = 0xB,
    PATTACH_WATERWAKE = 0xC,
    PATTACH_CENTER_FOLLOW = 0xD,
    PATTACH_CUSTOM_GAME_STATE_1 = 0xE,
    PATTACH_HEALTHBAR = 0xF,
    MAX_PATTACH_TYPES = 0x10,
}

public enum ParticleCollisionMode_t : uint
{
    COLLISION_MODE_PER_PARTICLE_TRACE = 0x3,
    COLLISION_MODE_USE_NEAREST_TRACE = 0x2,
    COLLISION_MODE_PER_FRAME_PLANESET = 0x1,
    COLLISION_MODE_INITIAL_TRACE_DOWN = 0x0,
    COLLISION_MODE_DISABLED = 0xFFFFFFFF,
}

public enum ParticleColorBlendMode_t : uint
{
    PARTICLEBLEND_DEFAULT = 0x0,
    PARTICLEBLEND_OVERLAY = 0x1,
    PARTICLEBLEND_DARKEN = 0x2,
    PARTICLEBLEND_LIGHTEN = 0x3,
    PARTICLEBLEND_MULTIPLY = 0x4,
}

public enum ParticleColorBlendType_t : uint
{
    PARTICLE_COLOR_BLEND_MULTIPLY = 0x0,
    PARTICLE_COLOR_BLEND_MULTIPLY2X = 0x1,
    PARTICLE_COLOR_BLEND_DIVIDE = 0x2,
    PARTICLE_COLOR_BLEND_ADD = 0x3,
    PARTICLE_COLOR_BLEND_SUBTRACT = 0x4,
    PARTICLE_COLOR_BLEND_MOD2X = 0x5,
    PARTICLE_COLOR_BLEND_SCREEN = 0x6,
    PARTICLE_COLOR_BLEND_MAX = 0x7,
    PARTICLE_COLOR_BLEND_MIN = 0x8,
    PARTICLE_COLOR_BLEND_REPLACE = 0x9,
    PARTICLE_COLOR_BLEND_AVERAGE = 0xA,
    PARTICLE_COLOR_BLEND_NEGATE = 0xB,
    PARTICLE_COLOR_BLEND_LUMINANCE = 0xC,
}

public enum ParticleControlPointAxis_t : uint
{
    PARTICLE_CP_AXIS_X = 0x0,
    PARTICLE_CP_AXIS_Y = 0x1,
    PARTICLE_CP_AXIS_Z = 0x2,
    PARTICLE_CP_AXIS_NEGATIVE_X = 0x3,
    PARTICLE_CP_AXIS_NEGATIVE_Y = 0x4,
    PARTICLE_CP_AXIS_NEGATIVE_Z = 0x5,
}

public enum ParticleDepthFeatheringMode_t : uint
{
    PARTICLE_DEPTH_FEATHERING_OFF = 0x0,
    PARTICLE_DEPTH_FEATHERING_ON_OPTIONAL = 0x1,
    PARTICLE_DEPTH_FEATHERING_ON_REQUIRED = 0x2,
}

public enum ParticleDetailLevel_t : uint
{
    PARTICLEDETAIL_LOW = 0x0,
    PARTICLEDETAIL_MEDIUM = 0x1,
    PARTICLEDETAIL_HIGH = 0x2,
    PARTICLEDETAIL_ULTRA = 0x3,
}

public enum ParticleDirectionNoiseType_t : uint
{
    PARTICLE_DIR_NOISE_PERLIN = 0x0,
    PARTICLE_DIR_NOISE_CURL = 0x1,
    PARTICLE_DIR_NOISE_WORLEY_BASIC = 0x2,
}

public enum ParticleEndcapMode_t : uint
{
    PARTICLE_ENDCAP_ALWAYS_ON = 0xFFFFFFFF,
    PARTICLE_ENDCAP_ENDCAP_OFF = 0x0,
    PARTICLE_ENDCAP_ENDCAP_ON = 0x1,
}

public enum ParticleFalloffFunction_t : uint
{
    PARTICLE_FALLOFF_CONSTANT = 0x0,
    PARTICLE_FALLOFF_LINEAR = 0x1,
    PARTICLE_FALLOFF_EXPONENTIAL = 0x2,
}

public enum ParticleFloatBiasType_t : uint
{
    PF_BIAS_TYPE_INVALID = 0xFFFFFFFF,
    PF_BIAS_TYPE_STANDARD = 0x0,
    PF_BIAS_TYPE_GAIN = 0x1,
    PF_BIAS_TYPE_EXPONENTIAL = 0x2,
    PF_BIAS_TYPE_COUNT = 0x3,
}

public enum ParticleFloatInputMode_t : uint
{
    PF_INPUT_MODE_INVALID = 0xFFFFFFFF,
    PF_INPUT_MODE_CLAMPED = 0x0,
    PF_INPUT_MODE_LOOPED = 0x1,
    PF_INPUT_MODE_COUNT = 0x2,
}

public enum ParticleFloatMapType_t : uint
{
    PF_MAP_TYPE_INVALID = 0xFFFFFFFF,
    PF_MAP_TYPE_DIRECT = 0x0,
    PF_MAP_TYPE_MULT = 0x1,
    PF_MAP_TYPE_REMAP = 0x2,
    PF_MAP_TYPE_REMAP_BIASED = 0x3,
    PF_MAP_TYPE_CURVE = 0x4,
    PF_MAP_TYPE_NOTCHED = 0x5,
    PF_MAP_TYPE_COUNT = 0x6,
}

public enum ParticleFloatRandomMode_t : uint
{
    PF_RANDOM_MODE_INVALID = 0xFFFFFFFF,
    PF_RANDOM_MODE_CONSTANT = 0x0,
    PF_RANDOM_MODE_VARYING = 0x1,
    PF_RANDOM_MODE_COUNT = 0x2,
}

public enum ParticleFloatType_t : uint
{
    PF_TYPE_INVALID = 0xFFFFFFFF,
    PF_TYPE_LITERAL = 0x0,
    PF_TYPE_NAMED_VALUE = 0x1,
    PF_TYPE_RANDOM_UNIFORM = 0x2,
    PF_TYPE_RANDOM_BIASED = 0x3,
    PF_TYPE_COLLECTION_AGE = 0x4,
    PF_TYPE_ENDCAP_AGE = 0x5,
    PF_TYPE_CONTROL_POINT_COMPONENT = 0x6,
    PF_TYPE_CONTROL_POINT_CHANGE_AGE = 0x7,
    PF_TYPE_CONTROL_POINT_SPEED = 0x8,
    PF_TYPE_PARTICLE_DETAIL_LEVEL = 0x9,
    PF_TYPE_CONCURRENT_DEF_COUNT = 0xA,
    PF_TYPE_CLOSEST_CAMERA_DISTANCE = 0xB,
    PF_TYPE_RENDERER_CAMERA_DISTANCE = 0xC,
    PF_TYPE_RENDERER_CAMERA_DOT_PRODUCT = 0xD,
    PF_TYPE_PARTICLE_NOISE = 0xE,
    PF_TYPE_PARTICLE_AGE = 0xF,
    PF_TYPE_PARTICLE_AGE_NORMALIZED = 0x10,
    PF_TYPE_PARTICLE_FLOAT = 0x11,
    PF_TYPE_PARTICLE_VECTOR_COMPONENT = 0x12,
    PF_TYPE_PARTICLE_SPEED = 0x13,
    PF_TYPE_PARTICLE_NUMBER = 0x14,
    PF_TYPE_PARTICLE_NUMBER_NORMALIZED = 0x15,
    PF_TYPE_COUNT = 0x16,
}

public enum ParticleFogType_t : uint
{
    PARTICLE_FOG_GAME_DEFAULT = 0x0,
    PARTICLE_FOG_ENABLED = 0x1,
    PARTICLE_FOG_DISABLED = 0x2,
}

public enum ParticleHitboxBiasType_t : uint
{
    PARTICLE_HITBOX_BIAS_ENTITY = 0x0,
    PARTICLE_HITBOX_BIAS_HITBOX = 0x1,
}

public enum ParticleHitboxDataSelection_t : uint
{
    PARTICLE_HITBOX_AVERAGE_SPEED = 0x0,
    PARTICLE_HITBOX_COUNT = 0x1,
}

public enum ParticleImpulseType_t : uint
{
    IMPULSE_TYPE_NONE = 0x0,
    IMPULSE_TYPE_GENERIC = 0x1,
    IMPULSE_TYPE_ROPE = 0x2,
    IMPULSE_TYPE_EXPLOSION = 0x4,
    IMPULSE_TYPE_EXPLOSION_UNDERWATER = 0x8,
    IMPULSE_TYPE_PARTICLE_SYSTEM = 0x10,
}

public enum ParticleLightBehaviorChoiceList_t : uint
{
    PARTICLE_LIGHT_BEHAVIOR_FOLLOW_DIRECTION = 0x0,
    PARTICLE_LIGHT_BEHAVIOR_ROPE = 0x1,
    PARTICLE_LIGHT_BEHAVIOR_TRAILS = 0x2,
}

public enum ParticleLightFogLightingMode_t : uint
{
    PARTICLE_LIGHT_FOG_LIGHTING_MODE_NONE = 0x0,
    PARTICLE_LIGHT_FOG_LIGHTING_MODE_DYNAMIC = 0x2,
    PARTICLE_LIGHT_FOG_LIGHTING_MODE_DYNAMIC_NOSHADOWS = 0x4,
}

public enum ParticleLightingQuality_t : uint
{
    PARTICLE_LIGHTING_PER_PARTICLE = 0x0,
    PARTICLE_LIGHTING_PER_VERTEX = 0x1,
    PARTICLE_LIGHTING_PER_PIXEL = 0xFFFFFFFF,
}

public enum ParticleLightnintBranchBehavior_t : uint
{
    PARTICLE_LIGHTNING_BRANCH_CURRENT_DIR = 0x0,
    PARTICLE_LIGHTNING_BRANCH_ENDPOINT_DIR = 0x1,
}

public enum ParticleLightTypeChoiceList_t : uint
{
    PARTICLE_LIGHT_TYPE_POINT = 0x0,
    PARTICLE_LIGHT_TYPE_SPOT = 0x1,
    PARTICLE_LIGHT_TYPE_FX = 0x2,
    PARTICLE_LIGHT_TYPE_CAPSULE = 0x3,
}

public enum ParticleLightUnitChoiceList_t : uint
{
    PARTICLE_LIGHT_UNIT_CANDELAS = 0x0,
    PARTICLE_LIGHT_UNIT_LUMENS = 0x1,
}

public enum ParticleModelType_t : uint
{
    PM_TYPE_INVALID = 0x0,
    PM_TYPE_NAMED_VALUE_MODEL = 0x1,
    PM_TYPE_NAMED_VALUE_EHANDLE = 0x2,
    PM_TYPE_CONTROL_POINT = 0x3,
    PM_TYPE_COUNT = 0x4,
}

public enum ParticleOmni2LightTypeChoiceList_t : uint
{
    PARTICLE_OMNI2_LIGHT_TYPE_POINT = 0x0,
    PARTICLE_OMNI2_LIGHT_TYPE_SPHERE = 0x1,
}

public enum ParticleOrientationChoiceList_t : uint
{
    PARTICLE_ORIENTATION_SCREEN_ALIGNED = 0x0,
    PARTICLE_ORIENTATION_SCREEN_Z_ALIGNED = 0x1,
    PARTICLE_ORIENTATION_WORLD_Z_ALIGNED = 0x2,
    PARTICLE_ORIENTATION_ALIGN_TO_PARTICLE_NORMAL = 0x3,
    PARTICLE_ORIENTATION_SCREENALIGN_TO_PARTICLE_NORMAL = 0x4,
    PARTICLE_ORIENTATION_FULL_3AXIS_ROTATION = 0x5,
}

public enum ParticleOrientationSetMode_t : uint
{
    PARTICLE_ORIENTATION_SET_FROM_VELOCITY = 0x0,
    PARTICLE_ORIENTATION_SET_FROM_ROTATIONS = 0x1,
}

public enum ParticleOutputBlendMode_t : uint
{
    PARTICLE_OUTPUT_BLEND_MODE_ALPHA = 0x0,
    PARTICLE_OUTPUT_BLEND_MODE_ADD = 0x1,
    PARTICLE_OUTPUT_BLEND_MODE_BLEND_ADD = 0x2,
    PARTICLE_OUTPUT_BLEND_MODE_HALF_BLEND_ADD = 0x3,
    PARTICLE_OUTPUT_BLEND_MODE_NEG_HALF_BLEND_ADD = 0x4,
    PARTICLE_OUTPUT_BLEND_MODE_MOD2X = 0x5,
    PARTICLE_OUTPUT_BLEND_MODE_LIGHTEN = 0x6,
}

public enum ParticleParentSetMode_t : uint
{
    PARTICLE_SET_PARENT_NO = 0x0,
    PARTICLE_SET_PARENT_IMMEDIATE = 0x1,
    PARTICLE_SET_PARENT_ROOT = 0x1,
}

public enum ParticlePinDistance_t : uint
{
    PARTICLE_PIN_DISTANCE_NONE = 0xFFFFFFFF,
    PARTICLE_PIN_DISTANCE_NEIGHBOR = 0x0,
    PARTICLE_PIN_DISTANCE_FARTHEST = 0x1,
    PARTICLE_PIN_DISTANCE_FIRST = 0x2,
    PARTICLE_PIN_DISTANCE_LAST = 0x3,
    PARTICLE_PIN_DISTANCE_CENTER = 0x5,
    PARTICLE_PIN_DISTANCE_CP = 0x6,
    PARTICLE_PIN_DISTANCE_CP_PAIR_EITHER = 0x7,
    PARTICLE_PIN_DISTANCE_CP_PAIR_BOTH = 0x8,
    PARTICLE_PIN_SPEED = 0x9,
    PARTICLE_PIN_COLLECTION_AGE = 0xA,
    PARTICLE_PIN_FLOAT_VALUE = 0xB,
}

public enum ParticlePostProcessPriorityGroup_t : uint
{
    PARTICLE_POST_PROCESS_PRIORITY_LEVEL_VOLUME = 0x0,
    PARTICLE_POST_PROCESS_PRIORITY_LEVEL_OVERRIDE = 0x1,
    PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_EFFECT = 0x2,
    PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_STATE_LOW = 0x3,
    PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_STATE_HIGH = 0x4,
    PARTICLE_POST_PROCESS_PRIORITY_GLOBAL_UI = 0x5,
}

public enum ParticleRotationLockType_t : uint
{
    PARTICLE_ROTATION_LOCK_NONE = 0x0,
    PARTICLE_ROTATION_LOCK_ROTATIONS = 0x1,
    PARTICLE_ROTATION_LOCK_NORMAL = 0x2,
}

public enum ParticleSelection_t : uint
{
    PARTICLE_SELECTION_FIRST = 0x0,
    PARTICLE_SELECTION_LAST = 0x1,
    PARTICLE_SELECTION_NUMBER = 0x2,
}

public enum ParticleSequenceCropOverride_t : uint
{
    PARTICLE_SEQUENCE_CROP_OVERRIDE_DEFAULT = 0xFFFFFFFF,
    PARTICLE_SEQUENCE_CROP_OVERRIDE_FORCE_OFF = 0x0,
    PARTICLE_SEQUENCE_CROP_OVERRIDE_FORCE_ON = 0x1,
}

public enum ParticleSetMethod_t : uint
{
    PARTICLE_SET_REPLACE_VALUE = 0x0,
    PARTICLE_SET_SCALE_INITIAL_VALUE = 0x1,
    PARTICLE_SET_ADD_TO_INITIAL_VALUE = 0x2,
    PARTICLE_SET_RAMP_CURRENT_VALUE = 0x3,
    PARTICLE_SET_SCALE_CURRENT_VALUE = 0x4,
    PARTICLE_SET_ADD_TO_CURRENT_VALUE = 0x5,
}

public enum ParticleSortingChoiceList_t : uint
{
    PARTICLE_SORTING_NEAREST = 0x0,
    PARTICLE_SORTING_CREATION_TIME = 0x1,
}

public enum ParticleTextureLayerBlendType_t : uint
{
    SPRITECARD_TEXTURE_BLEND_MULTIPLY = 0x0,
    SPRITECARD_TEXTURE_BLEND_MOD2X = 0x1,
    SPRITECARD_TEXTURE_BLEND_REPLACE = 0x2,
    SPRITECARD_TEXTURE_BLEND_ADD = 0x3,
    SPRITECARD_TEXTURE_BLEND_SUBTRACT = 0x4,
    SPRITECARD_TEXTURE_BLEND_AVERAGE = 0x5,
    SPRITECARD_TEXTURE_BLEND_LUMINANCE = 0x6,
}

public enum ParticleTopology_t : uint
{
    PARTICLE_TOPOLOGY_POINTS = 0x0,
    PARTICLE_TOPOLOGY_LINES = 0x1,
    PARTICLE_TOPOLOGY_TRIS = 0x2,
    PARTICLE_TOPOLOGY_QUADS = 0x3,
    PARTICLE_TOPOLOGY_CUBES = 0x4,
}

public enum ParticleTraceMissBehavior_t : uint
{
    PARTICLE_TRACE_MISS_BEHAVIOR_NONE = 0x0,
    PARTICLE_TRACE_MISS_BEHAVIOR_KILL = 0x1,
    PARTICLE_TRACE_MISS_BEHAVIOR_TRACE_END = 0x2,
}

public enum ParticleTraceSet_t : uint
{
    PARTICLE_TRACE_SET_ALL = 0x0,
    PARTICLE_TRACE_SET_STATIC = 0x1,
    PARTICLE_TRACE_SET_STATIC_AND_KEYFRAMED = 0x2,
    PARTICLE_TRACE_SET_DYNAMIC = 0x3,
}

public enum ParticleTransformType_t : uint
{
    PT_TYPE_INVALID = 0x0,
    PT_TYPE_NAMED_VALUE = 0x1,
    PT_TYPE_CONTROL_POINT = 0x2,
    PT_TYPE_CONTROL_POINT_RANGE = 0x3,
    PT_TYPE_COUNT = 0x4,
}

public enum ParticleVecType_t : uint
{
    PVEC_TYPE_INVALID = 0xFFFFFFFF,
    PVEC_TYPE_LITERAL = 0x0,
    PVEC_TYPE_LITERAL_COLOR = 0x1,
    PVEC_TYPE_NAMED_VALUE = 0x2,
    PVEC_TYPE_PARTICLE_VECTOR = 0x3,
    PVEC_TYPE_PARTICLE_VELOCITY = 0x4,
    PVEC_TYPE_CP_VALUE = 0x5,
    PVEC_TYPE_CP_RELATIVE_POSITION = 0x6,
    PVEC_TYPE_CP_RELATIVE_DIR = 0x7,
    PVEC_TYPE_CP_RELATIVE_RANDOM_DIR = 0x8,
    PVEC_TYPE_FLOAT_COMPONENTS = 0x9,
    PVEC_TYPE_FLOAT_INTERP_CLAMPED = 0xA,
    PVEC_TYPE_FLOAT_INTERP_OPEN = 0xB,
    PVEC_TYPE_FLOAT_INTERP_GRADIENT = 0xC,
    PVEC_TYPE_RANDOM_UNIFORM = 0xD,
    PVEC_TYPE_RANDOM_UNIFORM_OFFSET = 0xE,
    PVEC_TYPE_CP_DELTA = 0xF,
    PVEC_TYPE_CLOSEST_CAMERA_POSITION = 0x10,
    PVEC_TYPE_COUNT = 0x11,
}

public enum ParticleVRHandChoiceList_t : uint
{
    PARTICLE_VRHAND_LEFT = 0x0,
    PARTICLE_VRHAND_RIGHT = 0x1,
    PARTICLE_VRHAND_CP = 0x2,
    PARTICLE_VRHAND_CP_OBJECT = 0x3,
}

public enum PerformanceMode_t : uint
{
    PM_NORMAL = 0x0,
    PM_NO_GIBS = 0x1,
    PM_FULL_GIBS = 0x2,
    PM_REDUCED_GIBS = 0x3,
}

public enum PermModelInfo_tFlagEnum : uint
{
    FLAG_TRANSLUCENT = 0x1,
    FLAG_TRANSLUCENT_TWO_PASS = 0x2,
    FLAG_MODEL_IS_RUNTIME_COMBINED = 0x4,
    FLAG_SOURCE1_IMPORT = 0x8,
    FLAG_MODEL_PART_CHILD = 0x10,
    FLAG_NAV_GEN_NONE = 0x20,
    FLAG_NAV_GEN_HULL = 0x40,
    FLAG_NO_FORCED_FADE = 0x800,
    FLAG_HAS_SKINNED_MESHES = 0x400,
    FLAG_DO_NOT_CAST_SHADOWS = 0x20000,
    FLAG_FORCE_PHONEME_CROSSFADE = 0x1000,
    FLAG_NO_ANIM_EVENTS = 0x100000,
    FLAG_ANIMATION_DRIVEN_FLEXES = 0x200000,
    FLAG_IMPLICIT_BIND_POSE_SEQUENCE = 0x400000,
    FLAG_MODEL_DOC = 0x800000,
}

public enum PetGroundType_t : uint
{
    PET_GROUND_NONE = 0x0,
    PET_GROUND_GRID = 0x1,
    PET_GROUND_PLANE = 0x2,
}

public enum PFNoiseModifier_t : uint
{
    PF_NOISE_MODIFIER_NONE = 0x0,
    PF_NOISE_MODIFIER_LINES = 0x1,
    PF_NOISE_MODIFIER_CLUMPS = 0x2,
    PF_NOISE_MODIFIER_RINGS = 0x3,
}

public enum PFNoiseTurbulence_t : uint
{
    PF_NOISE_TURB_NONE = 0x0,
    PF_NOISE_TURB_HIGHLIGHT = 0x1,
    PF_NOISE_TURB_FEEDBACK = 0x2,
    PF_NOISE_TURB_LOOPY = 0x3,
    PF_NOISE_TURB_CONTRAST = 0x4,
    PF_NOISE_TURB_ALTERNATE = 0x5,
}

public enum PFNoiseType_t : uint
{
    PF_NOISE_TYPE_PERLIN = 0x0,
    PF_NOISE_TYPE_SIMPLEX = 0x1,
    PF_NOISE_TYPE_WORLEY = 0x2,
    PF_NOISE_TYPE_CURL = 0x3,
}

public enum PFuncVisualizationType_t : uint
{
    PFUNC_VISUALIZATION_SPHERE_WIREFRAME = 0x0,
    PFUNC_VISUALIZATION_SPHERE_SOLID = 0x1,
    PFUNC_VISUALIZATION_BOX = 0x2,
    PFUNC_VISUALIZATION_RING = 0x3,
    PFUNC_VISUALIZATION_PLANE = 0x4,
    PFUNC_VISUALIZATION_LINE = 0x5,
    PFUNC_VISUALIZATION_CYLINDER = 0x6,
}

public enum PlayerAnimEvent_t : uint
{
    PLAYERANIMEVENT_FIRE_GUN_PRIMARY = 0x0,
    PLAYERANIMEVENT_FIRE_GUN_SECONDARY = 0x1,
    PLAYERANIMEVENT_GRENADE_PULL_PIN = 0x2,
    PLAYERANIMEVENT_THROW_GRENADE = 0x3,
    PLAYERANIMEVENT_JUMP = 0x4,
    PLAYERANIMEVENT_RELOAD = 0x5,
    PLAYERANIMEVENT_CLEAR_FIRING = 0x6,
    PLAYERANIMEVENT_DEPLOY = 0x7,
    PLAYERANIMEVENT_SILENCER_STATE = 0x8,
    PLAYERANIMEVENT_SILENCER_TOGGLE = 0x9,
    PLAYERANIMEVENT_THROW_GRENADE_UNDERHAND = 0xA,
    PLAYERANIMEVENT_CATCH_WEAPON = 0xB,
    PLAYERANIMEVENT_LOOKATWEAPON_REQUEST = 0xC,
    PLAYERANIMEVENT_RELOAD_CANCEL_LOOKATWEAPON = 0xD,
    PLAYERANIMEVENT_HAULBACK = 0xE,
    PLAYERANIMEVENT_IDLE = 0xF,
    PLAYERANIMEVENT_STRIKE_HIT = 0x10,
    PLAYERANIMEVENT_STRIKE_MISS = 0x11,
    PLAYERANIMEVENT_BACKSTAB = 0x12,
    PLAYERANIMEVENT_DRYFIRE = 0x13,
    PLAYERANIMEVENT_FIDGET = 0x14,
    PLAYERANIMEVENT_RELEASE = 0x15,
    PLAYERANIMEVENT_TAUNT = 0x16,
    PLAYERANIMEVENT_COUNT = 0x17,
}

public enum PlayerConnectedState : uint
{
    PlayerNeverConnected = 0xFFFFFFFF,
    PlayerConnected = 0x0,
    PlayerConnecting = 0x1,
    PlayerReconnecting = 0x2,
    PlayerDisconnecting = 0x3,
    PlayerDisconnected = 0x4,
    PlayerReserved = 0x5,
}

public enum PointTemplateClientOnlyEntityBehavior_t : uint
{
    CREATE_FOR_CURRENTLY_CONNECTED_CLIENTS_ONLY = 0x0,
    CREATE_FOR_CLIENTS_WHO_CONNECT_LATER = 0x1,
}

public enum PointTemplateOwnerSpawnGroupType_t : uint
{
    INSERT_INTO_POINT_TEMPLATE_SPAWN_GROUP = 0x0,
    INSERT_INTO_CURRENTLY_ACTIVE_SPAWN_GROUP = 0x1,
    INSERT_INTO_NEWLY_CREATED_SPAWN_GROUP = 0x2,
}

public enum PointWorldTextJustifyHorizontal_t : uint
{
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_LEFT = 0x0,
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_CENTER = 0x1,
    POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_RIGHT = 0x2,
}

public enum PointWorldTextJustifyVertical_t : uint
{
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_BOTTOM = 0x0,
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_CENTER = 0x1,
    POINT_WORLD_TEXT_JUSTIFY_VERTICAL_TOP = 0x2,
}

public enum PointWorldTextReorientMode_t : uint
{
    POINT_WORLD_TEXT_REORIENT_NONE = 0x0,
    POINT_WORLD_TEXT_REORIENT_AROUND_UP = 0x1,
}

public enum PoseType_t : byte
{
    POSETYPE_STATIC = 0x0,
    POSETYPE_DYNAMIC = 0x1,
    POSETYPE_INVALID = 0xFF,
}

public enum PropDoorRotatingOpenDirection_e : uint
{
    DOOR_ROTATING_OPEN_BOTH_WAYS = 0x0,
    DOOR_ROTATING_OPEN_FORWARD = 0x1,
    DOOR_ROTATING_OPEN_BACKWARD = 0x2,
}

public enum PropDoorRotatingSpawnPos_t : uint
{
    DOOR_SPAWN_CLOSED = 0x0,
    DOOR_SPAWN_OPEN_FORWARD = 0x1,
    DOOR_SPAWN_OPEN_BACK = 0x2,
    DOOR_SPAWN_AJAR = 0x3,
}

public enum PulseInstructionCode_t : ushort
{
    INVALID = 0x0,
    IMMEDIATE_HALT = 0x1,
    RETURN_VOID = 0x2,
    RETURN_VALUE = 0x3,
    NOP = 0x4,
    JUMP = 0x5,
    JUMP_COND = 0x6,
    CHUNK_LEAP = 0x7,
    CHUNK_LEAP_COND = 0x8,
    PULSE_CALL_SYNC = 0x9,
    PULSE_CALL_ASYNC_FIRE = 0xA,
    CELL_INVOKE = 0xB,
    LIBRARY_INVOKE = 0xC,
    TARGET_INVOKE = 0xD,
    SET_VAR = 0xE,
    GET_VAR = 0xF,
    SET_REGISTER_LIT_BOOL = 0x10,
    SET_REGISTER_LIT_INT = 0x11,
    SET_REGISTER_LIT_FLOAT = 0x12,
    SET_REGISTER_LIT_STR = 0x13,
    SET_REGISTER_LIT_INVAL_EHANDLE = 0x14,
    SET_REGISTER_LIT_INVAL_SNDEVT_GUID = 0x15,
    SET_REGISTER_LIT_VEC3 = 0x16,
    SET_REGISTER_DOMAIN_VALUE = 0x17,
    COPY = 0x18,
    NOT = 0x19,
    NEGATE = 0x1A,
    ADD = 0x1B,
    SUB = 0x1C,
    MUL = 0x1D,
    DIV = 0x1E,
    MOD = 0x1F,
    LT = 0x20,
    LTE = 0x21,
    EQ = 0x22,
    NE = 0x23,
    AND = 0x24,
    OR = 0x25,
    CONVERT_VALUE = 0x26,
    LAST_SERIALIZED_CODE = 0x27,
    NEGATE_INT = 0x28,
    NEGATE_FLOAT = 0x29,
    ADD_INT = 0x2A,
    ADD_FLOAT = 0x2B,
    ADD_STRING = 0x2C,
    SUB_INT = 0x2D,
    SUB_FLOAT = 0x2E,
    MUL_INT = 0x2F,
    MUL_FLOAT = 0x30,
    DIV_INT = 0x31,
    DIV_FLOAT = 0x32,
    MOD_INT = 0x33,
    MOD_FLOAT = 0x34,
    LT_INT = 0x35,
    LT_FLOAT = 0x36,
    LTE_INT = 0x37,
    LTE_FLOAT = 0x38,
    EQ_BOOL = 0x39,
    EQ_INT = 0x3A,
    EQ_FLOAT = 0x3B,
    EQ_STRING = 0x3C,
    NE_BOOL = 0x3D,
    NE_INT = 0x3E,
    NE_FLOAT = 0x3F,
    NE_STRING = 0x40,
}

public enum PulseMethodCallMode_t : uint
{
    SYNC_WAIT_FOR_COMPLETION = 0x0,
    ASYNC_FIRE_AND_FORGET = 0x1,
}

public enum PulseValueType_t : uint
{
    PVAL_INVALID = 0xFFFFFFFF,
    PVAL_BOOL = 0x0,
    PVAL_INT = 0x1,
    PVAL_FLOAT = 0x2,
    PVAL_STRING = 0x3,
    PVAL_VEC3 = 0x4,
    PVAL_TRANSFORM = 0x5,
    PVAL_EHANDLE = 0x6,
    PVAL_RESOURCE = 0x7,
    PVAL_SNDEVT_GUID = 0x8,
    PVAL_SCHEMA_PTR = 0x9,
    PVAL_CURSOR_FLOW = 0xA,
    PVAL_ANY = 0xB,
    PVAL_COUNT = 0xC,
}

public enum QuestProgressReason : uint
{
    QUEST_NONINITIALIZED = 0x0,
    QUEST_OK = 0x1,
    QUEST_NOT_ENOUGH_PLAYERS = 0x2,
    QUEST_WARMUP = 0x3,
    QUEST_NOT_CONNECTED_TO_STEAM = 0x4,
    QUEST_NONOFFICIAL_SERVER = 0x5,
    QUEST_NO_ENTITLEMENT = 0x6,
    QUEST_NO_QUEST = 0x7,
    QUEST_PLAYER_IS_BOT = 0x8,
    QUEST_WRONG_MAP = 0x9,
    QUEST_WRONG_MODE = 0xA,
    QUEST_NOT_SYNCED_WITH_SERVER = 0xB,
    QUEST_REASON_MAX = 0xC,
}

public enum RagdollPoseControl : uint
{
    Absolute = 0x0,
    Relative = 0x1,
}

public enum RenderBufferFlags_t : uint
{
    RENDER_BUFFER_USAGE_VERTEX_BUFFER = 0x1,
    RENDER_BUFFER_USAGE_INDEX_BUFFER = 0x2,
    RENDER_BUFFER_USAGE_SHADER_RESOURCE = 0x4,
    RENDER_BUFFER_USAGE_UNORDERED_ACCESS = 0x8,
    RENDER_BUFFER_BYTEADDRESS_BUFFER = 0x10,
    RENDER_BUFFER_STRUCTURED_BUFFER = 0x20,
    RENDER_BUFFER_APPEND_CONSUME_BUFFER = 0x40,
    RENDER_BUFFER_UAV_COUNTER = 0x80,
    RENDER_BUFFER_UAV_DRAW_INDIRECT_ARGS = 0x100,
}

public enum RenderFx_t : byte
{
    kRenderFxNone = 0x0,
    kRenderFxPulseSlow = 0x1,
    kRenderFxPulseFast = 0x2,
    kRenderFxPulseSlowWide = 0x3,
    kRenderFxPulseFastWide = 0x4,
    kRenderFxFadeSlow = 0x5,
    kRenderFxFadeFast = 0x6,
    kRenderFxSolidSlow = 0x7,
    kRenderFxSolidFast = 0x8,
    kRenderFxStrobeSlow = 0x9,
    kRenderFxStrobeFast = 0xA,
    kRenderFxStrobeFaster = 0xB,
    kRenderFxFlickerSlow = 0xC,
    kRenderFxFlickerFast = 0xD,
    kRenderFxNoDissipation = 0xE,
    kRenderFxFadeOut = 0xF,
    kRenderFxFadeIn = 0x10,
    kRenderFxPulseFastWider = 0x11,
    kRenderFxGlowShell = 0x12,
    kRenderFxMax = 0x13,
}

public enum RenderMode_t : byte
{
    kRenderNormal = 0x0,
    kRenderTransColor = 0x1,
    kRenderTransTexture = 0x2,
    kRenderGlow = 0x3,
    kRenderTransAlpha = 0x4,
    kRenderTransAdd = 0x5,
    kRenderEnvironmental = 0x6,
    kRenderTransAddFrameBlend = 0x7,
    kRenderTransAlphaAdd = 0x8,
    kRenderWorldGlow = 0x9,
    kRenderNone = 0xA,
    kRenderDevVisualizer = 0xB,
    kRenderModeCount = 0xC,
}

public enum RenderMultisampleType_t : uint
{
    RENDER_MULTISAMPLE_INVALID = 0xFFFFFFFF,
    RENDER_MULTISAMPLE_NONE = 0x0,
    RENDER_MULTISAMPLE_2X = 0x1,
    RENDER_MULTISAMPLE_4X = 0x2,
    RENDER_MULTISAMPLE_6X = 0x3,
    RENDER_MULTISAMPLE_8X = 0x4,
    RENDER_MULTISAMPLE_16X = 0x5,
    RENDER_MULTISAMPLE_TYPE_COUNT = 0x6,
}

public enum RenderPrimitiveType_t : uint
{
    RENDER_PRIM_POINTS = 0x0,
    RENDER_PRIM_LINES = 0x1,
    RENDER_PRIM_LINES_WITH_ADJACENCY = 0x2,
    RENDER_PRIM_LINE_STRIP = 0x3,
    RENDER_PRIM_LINE_STRIP_WITH_ADJACENCY = 0x4,
    RENDER_PRIM_TRIANGLES = 0x5,
    RENDER_PRIM_TRIANGLES_WITH_ADJACENCY = 0x6,
    RENDER_PRIM_TRIANGLE_STRIP = 0x7,
    RENDER_PRIM_TRIANGLE_STRIP_WITH_ADJACENCY = 0x8,
    RENDER_PRIM_INSTANCED_QUADS = 0x9,
    RENDER_PRIM_HETEROGENOUS = 0xA,
    RENDER_PRIM_COMPUTE_SHADER = 0xB,
    RENDER_PRIM_TYPE_COUNT = 0xC,
}

public enum RenderSlotType_t : uint
{
    RENDER_SLOT_INVALID = 0xFFFFFFFF,
    RENDER_SLOT_PER_VERTEX = 0x0,
    RENDER_SLOT_PER_INSTANCE = 0x1,
}

public enum ResetCycleOption : uint
{
    Beginning = 0x0,
    SameCycleAsSource = 0x1,
    InverseSourceCycle = 0x2,
    FixedValue = 0x3,
    SameTimeAsSource = 0x4,
}

public enum RumbleEffect_t : uint
{
    RUMBLE_INVALID = 0xFFFFFFFF,
    RUMBLE_STOP_ALL = 0x0,
    RUMBLE_PISTOL = 0x1,
    RUMBLE_357 = 0x2,
    RUMBLE_SMG1 = 0x3,
    RUMBLE_AR2 = 0x4,
    RUMBLE_SHOTGUN_SINGLE = 0x5,
    RUMBLE_SHOTGUN_DOUBLE = 0x6,
    RUMBLE_AR2_ALT_FIRE = 0x7,
    RUMBLE_RPG_MISSILE = 0x8,
    RUMBLE_CROWBAR_SWING = 0x9,
    RUMBLE_AIRBOAT_GUN = 0xA,
    RUMBLE_JEEP_ENGINE_LOOP = 0xB,
    RUMBLE_FLAT_LEFT = 0xC,
    RUMBLE_FLAT_RIGHT = 0xD,
    RUMBLE_FLAT_BOTH = 0xE,
    RUMBLE_DMG_LOW = 0xF,
    RUMBLE_DMG_MED = 0x10,
    RUMBLE_DMG_HIGH = 0x11,
    RUMBLE_FALL_LONG = 0x12,
    RUMBLE_FALL_SHORT = 0x13,
    RUMBLE_PHYSCANNON_OPEN = 0x14,
    RUMBLE_PHYSCANNON_PUNT = 0x15,
    RUMBLE_PHYSCANNON_LOW = 0x16,
    RUMBLE_PHYSCANNON_MEDIUM = 0x17,
    RUMBLE_PHYSCANNON_HIGH = 0x18,
    NUM_RUMBLE_EFFECTS = 0x19,
}

public enum ScalarExpressionType_t : uint
{
    SCALAR_EXPRESSION_UNINITIALIZED = 0xFFFFFFFF,
    SCALAR_EXPRESSION_ADD = 0x0,
    SCALAR_EXPRESSION_SUBTRACT = 0x1,
    SCALAR_EXPRESSION_MUL = 0x2,
    SCALAR_EXPRESSION_DIVIDE = 0x3,
    SCALAR_EXPRESSION_INPUT_1 = 0x4,
    SCALAR_EXPRESSION_MIN = 0x5,
    SCALAR_EXPRESSION_MAX = 0x6,
    SCALAR_EXPRESSION_MOD = 0x7,
}

public enum SceneOnPlayerDeath_t : uint
{
    SCENE_ONPLAYERDEATH_DO_NOTHING = 0x0,
    SCENE_ONPLAYERDEATH_CANCEL = 0x1,
}

public enum ScriptedConflictResponse_t : uint
{
    SS_CONFLICT_ENQUEUE = 0x0,
    SS_CONFLICT_INTERRUPT = 0x1,
}

public enum ScriptedMoveTo_t : uint
{
    CINE_MOVETO_WAIT = 0x0,
    CINE_MOVETO_WALK = 0x1,
    CINE_MOVETO_RUN = 0x2,
    CINE_MOVETO_CUSTOM = 0x3,
    CINE_MOVETO_TELEPORT = 0x4,
    CINE_MOVETO_WAIT_FACING = 0x5,
}

public enum ScriptedMoveType_t : uint
{
    SCRIPTED_MOVETYPE_NONE = 0x0,
    SCRIPTED_MOVETYPE_TO_WITH_DURATION = 0x1,
    SCRIPTED_MOVETYPE_TO_WITH_MOVESPEED = 0x2,
    SCRIPTED_MOVETYPE_SWEEP_TO_AT_MOVEMENT_SPEED = 0x3,
}

public enum ScriptedOnDeath_t : uint
{
    SS_ONDEATH_NOT_APPLICABLE = 0xFFFFFFFF,
    SS_ONDEATH_UNDEFINED = 0x0,
    SS_ONDEATH_RAGDOLL = 0x1,
    SS_ONDEATH_ANIMATED_DEATH = 0x2,
}

public enum SelectorTagBehavior_t : uint
{
    SelectorTagBehavior_OnWhileCurrent = 0x0,
    SelectorTagBehavior_OffWhenFinished = 0x1,
    SelectorTagBehavior_OffBeforeFinished = 0x2,
}

public enum SeqCmd_t : uint
{
    SeqCmd_Nop = 0x0,
    SeqCmd_LinearDelta = 0x1,
    SeqCmd_FetchFrameRange = 0x2,
    SeqCmd_Slerp = 0x3,
    SeqCmd_Add = 0x4,
    SeqCmd_Subtract = 0x5,
    SeqCmd_Scale = 0x6,
    SeqCmd_Copy = 0x7,
    SeqCmd_Blend = 0x8,
    SeqCmd_Worldspace = 0x9,
    SeqCmd_Sequence = 0xA,
    SeqCmd_FetchCycle = 0xB,
    SeqCmd_FetchFrame = 0xC,
    SeqCmd_IKLockInPlace = 0xD,
    SeqCmd_IKRestoreAll = 0xE,
    SeqCmd_ReverseSequence = 0xF,
    SeqCmd_Transform = 0x10,
}

public enum SeqPoseSetting_t : uint
{
    SEQ_POSE_SETTING_CONSTANT = 0x0,
    SEQ_POSE_SETTING_ROTATION = 0x1,
    SEQ_POSE_SETTING_POSITION = 0x2,
    SEQ_POSE_SETTING_VELOCITY = 0x3,
}

public enum ShadowType_t : uint
{
    SHADOWS_NONE = 0x0,
    SHADOWS_SIMPLE = 0x1,
}

public enum ShakeCommand_t : uint
{
    SHAKE_START = 0x0,
    SHAKE_STOP = 0x1,
    SHAKE_AMPLITUDE = 0x2,
    SHAKE_FREQUENCY = 0x3,
    SHAKE_START_RUMBLEONLY = 0x4,
    SHAKE_START_NORUMBLE = 0x5,
}

public enum ShardSolid_t : byte
{
    SHARD_SOLID = 0x0,
    SHARD_DEBRIS = 0x1,
}

public enum ShatterDamageCause : byte
{
    SHATTERDAMAGE_BULLET = 0x0,
    SHATTERDAMAGE_MELEE = 0x1,
    SHATTERDAMAGE_THROWN = 0x2,
    SHATTERDAMAGE_SCRIPT = 0x3,
    SHATTERDAMAGE_EXPLOSIVE = 0x4,
}

public enum ShatterGlassStressType : byte
{
    SHATTERGLASS_BLUNT = 0x0,
    SHATTERGLASS_BALLISTIC = 0x1,
    SHATTERGLASS_PULSE = 0x2,
    SHATTERDRYWALL_CHUNKS = 0x3,
    SHATTERGLASS_EXPLOSIVE = 0x4,
}

public enum ShatterPanelMode : byte
{
    SHATTER_GLASS = 0x0,
    SHATTER_DRYWALL = 0x1,
}

public enum SimpleConstraintSoundProfileSimpleConstraintsSoundProfileKeypoints_t : uint
{
    kMIN_THRESHOLD = 0x0,
    kMIN_FULL = 0x1,
    kHIGHWATER = 0x2,
}

public enum SolidType_t : byte
{
    SOLID_NONE = 0x0,
    SOLID_BSP = 0x1,
    SOLID_BBOX = 0x2,
    SOLID_OBB = 0x3,
    SOLID_SPHERE = 0x4,
    SOLID_POINT = 0x5,
    SOLID_VPHYSICS = 0x6,
    SOLID_CAPSULE = 0x7,
    SOLID_LAST = 0x8,
}

public enum SolveIKChainAnimNodeDebugSetting : uint
{
    SOLVEIKCHAINANIMNODEDEBUGSETTING_None = 0x0,
    SOLVEIKCHAINANIMNODEDEBUGSETTING_X_Axis_Circle = 0x1,
    SOLVEIKCHAINANIMNODEDEBUGSETTING_Y_Axis_Circle = 0x2,
    SOLVEIKCHAINANIMNODEDEBUGSETTING_Z_Axis_Circle = 0x3,
    SOLVEIKCHAINANIMNODEDEBUGSETTING_Forward = 0x4,
    SOLVEIKCHAINANIMNODEDEBUGSETTING_Up = 0x5,
    SOLVEIKCHAINANIMNODEDEBUGSETTING_Left = 0x6,
}

public enum SosActionSortType_t : uint
{
    SOS_SORTTYPE_HIGHEST = 0x0,
    SOS_SORTTYPE_LOWEST = 0x1,
}

public enum SosActionStopType_t : uint
{
    SOS_STOPTYPE_NONE = 0x0,
    SOS_STOPTYPE_TIME = 0x1,
    SOS_STOPTYPE_OPVAR = 0x2,
}

public enum SosEditItemType_t : uint
{
    SOS_EDIT_ITEM_TYPE_SOUNDEVENTS = 0x0,
    SOS_EDIT_ITEM_TYPE_SOUNDEVENT = 0x1,
    SOS_EDIT_ITEM_TYPE_LIBRARYSTACKS = 0x2,
    SOS_EDIT_ITEM_TYPE_STACK = 0x3,
    SOS_EDIT_ITEM_TYPE_OPERATOR = 0x4,
    SOS_EDIT_ITEM_TYPE_FIELD = 0x5,
}

public enum SosGroupType_t : uint
{
    SOS_GROUPTYPE_DYNAMIC = 0x0,
    SOS_GROUPTYPE_STATIC = 0x1,
}

public enum SoundEventStartType_t : uint
{
    SOUNDEVENT_START_PLAYER = 0x0,
    SOUNDEVENT_START_WORLD = 0x1,
    SOUNDEVENT_START_ENTITY = 0x2,
}

public enum SoundFlags_t : uint
{
    SOUND_NONE = 0x0,
    SOUND_COMBAT = 0x1,
    SOUND_WORLD = 0x2,
    SOUND_PLAYER = 0x4,
    SOUND_DANGER = 0x8,
    SOUND_BULLET_IMPACT = 0x10,
    SOUND_THUMPER = 0x20,
    SOUND_PHYSICS_DANGER = 0x40,
    SOUND_MOVE_AWAY = 0x80,
    SOUND_PLAYER_VEHICLE = 0x100,
    SOUND_GLASS_BREAK = 0x200,
    SOUND_PHYSICS_OBJECT = 0x400,
    SOUND_CONTEXT_GUNFIRE = 0x100000,
    SOUND_CONTEXT_COMBINE_ONLY = 0x200000,
    SOUND_CONTEXT_REACT_TO_SOURCE = 0x400000,
    SOUND_CONTEXT_EXPLOSION = 0x800000,
    SOUND_CONTEXT_EXCLUDE_COMBINE = 0x1000000,
    SOUND_CONTEXT_DANGER_APPROACH = 0x2000000,
    SOUND_CONTEXT_ALLIES_ONLY = 0x4000000,
    SOUND_CONTEXT_PANIC_NPCS = 0x8000000,
    ALL_CONTEXTS = 0xFFFFFFFF,
    ALL_SCENTS = 0x0,
    ALL_SOUNDS = 0xFFFFF,
}

public enum soundlevel_t : uint
{
    SNDLVL_NONE = 0x0,
    SNDLVL_20dB = 0x14,
    SNDLVL_25dB = 0x19,
    SNDLVL_30dB = 0x1E,
    SNDLVL_35dB = 0x23,
    SNDLVL_40dB = 0x28,
    SNDLVL_45dB = 0x2D,
    SNDLVL_50dB = 0x32,
    SNDLVL_55dB = 0x37,
    SNDLVL_IDLE = 0x3C,
    SNDLVL_60dB = 0x3C,
    SNDLVL_65dB = 0x41,
    SNDLVL_STATIC = 0x42,
    SNDLVL_70dB = 0x46,
    SNDLVL_NORM = 0x4B,
    SNDLVL_75dB = 0x4B,
    SNDLVL_80dB = 0x50,
    SNDLVL_TALKING = 0x50,
    SNDLVL_85dB = 0x55,
    SNDLVL_90dB = 0x5A,
    SNDLVL_95dB = 0x5F,
    SNDLVL_100dB = 0x64,
    SNDLVL_105dB = 0x69,
    SNDLVL_110dB = 0x6E,
    SNDLVL_120dB = 0x78,
    SNDLVL_130dB = 0x82,
    SNDLVL_GUNFIRE = 0x8C,
    SNDLVL_140dB = 0x8C,
    SNDLVL_150dB = 0x96,
    SNDLVL_180dB = 0xB4,
}

public enum SpawnDebugOverrideState_t : uint
{
    SPAWN_DEBUG_OVERRIDE_NONE = 0x0,
    SPAWN_DEBUG_OVERRIDE_FORCE_ENABLED = 0x1,
    SPAWN_DEBUG_OVERRIDE_FORCE_DISABLED = 0x2,
}

public enum SpawnDebugRestrictionOverrideState_t : uint
{
    SPAWN_DEBUG_RESTRICT_NONE = 0x0,
    SPAWN_DEBUG_RESTRICT_IGNORE_MANAGER_DISTANCE_REQS = 0x1,
    SPAWN_DEBUG_RESTRICT_IGNORE_TEMPLATE_DISTANCE_LOS_REQS = 0x2,
    SPAWN_DEBUG_RESTRICT_IGNORE_TEMPLATE_COOLDOWN_LIMITS = 0x4,
    SPAWN_DEBUG_RESTRICT_IGNORE_TARGET_COOLDOWN_LIMITS = 0x8,
}

public enum SpawnPointCoopEnemyBotDefaultBehavior_t : uint
{
    DEFEND_AREA = 0x0,
    HUNT = 0x1,
    CHARGE_ENEMY = 0x2,
    DEFEND_INVESTIGATE = 0x3,
}

public enum SpriteCardPerParticleScale_t : uint
{
    SPRITECARD_TEXTURE_PP_SCALE_NONE = 0x0,
    SPRITECARD_TEXTURE_PP_SCALE_PARTICLE_AGE = 0x1,
    SPRITECARD_TEXTURE_PP_SCALE_ANIMATION_FRAME = 0x2,
    SPRITECARD_TEXTURE_PP_SCALE_SHADER_EXTRA_DATA1 = 0x3,
    SPRITECARD_TEXTURE_PP_SCALE_SHADER_EXTRA_DATA2 = 0x4,
    SPRITECARD_TEXTURE_PP_SCALE_PARTICLE_ALPHA = 0x5,
    SPRITECARD_TEXTURE_PP_SCALE_SHADER_RADIUS = 0x6,
    SPRITECARD_TEXTURE_PP_SCALE_ROLL = 0x7,
    SPRITECARD_TEXTURE_PP_SCALE_YAW = 0x8,
    SPRITECARD_TEXTURE_PP_SCALE_PITCH = 0x9,
    SPRITECARD_TEXTURE_PP_SCALE_RANDOM = 0xA,
    SPRITECARD_TEXTURE_PP_SCALE_NEG_RANDOM = 0xB,
    SPRITECARD_TEXTURE_PP_SCALE_RANDOM_TIME = 0xC,
    SPRITECARD_TEXTURE_PP_SCALE_NEG_RANDOM_TIME = 0xD,
}

public enum SpriteCardShaderType_t : uint
{
    SPRITECARD_SHADER_BASE = 0x0,
    SPRITECARD_SHADER_CUSTOM = 0x1,
}

public enum SpriteCardTextureChannel_t : uint
{
    SPRITECARD_TEXTURE_CHANNEL_MIX_RGB = 0x0,
    SPRITECARD_TEXTURE_CHANNEL_MIX_RGBA = 0x1,
    SPRITECARD_TEXTURE_CHANNEL_MIX_A = 0x2,
    SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_A = 0x3,
    SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_ALPHAMASK = 0x4,
    SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_RGBMASK = 0x5,
    SPRITECARD_TEXTURE_CHANNEL_MIX_RGBA_RGBALPHA = 0x6,
    SPRITECARD_TEXTURE_CHANNEL_MIX_A_RGBALPHA = 0x7,
    SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_A_RGBALPHA = 0x8,
    SPRITECARD_TEXTURE_CHANNEL_MIX_R = 0x9,
    SPRITECARD_TEXTURE_CHANNEL_MIX_G = 0xA,
    SPRITECARD_TEXTURE_CHANNEL_MIX_B = 0xB,
    SPRITECARD_TEXTURE_CHANNEL_MIX_RALPHA = 0xC,
    SPRITECARD_TEXTURE_CHANNEL_MIX_GALPHA = 0xD,
    SPRITECARD_TEXTURE_CHANNEL_MIX_BALPHA = 0xE,
}

public enum SpriteCardTextureType_t : uint
{
    SPRITECARD_TEXTURE_DIFFUSE = 0x0,
    SPRITECARD_TEXTURE_ZOOM = 0x1,
    SPRITECARD_TEXTURE_1D_COLOR_LOOKUP = 0x2,
    SPRITECARD_TEXTURE_UVDISTORTION = 0x3,
    SPRITECARD_TEXTURE_UVDISTORTION_ZOOM = 0x4,
    SPRITECARD_TEXTURE_NORMALMAP = 0x5,
    SPRITECARD_TEXTURE_ANIMMOTIONVEC = 0x6,
    SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_A = 0x7,
    SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_B = 0x8,
    SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_C = 0x9,
}

public enum StanceOverrideMode : uint
{
    Sequence = 0x0,
    Node = 0x1,
}

public enum StanceType_t : uint
{
    STANCE_CURRENT = 0xFFFFFFFF,
    STANCE_DEFAULT = 0x0,
    STANCE_CROUCHING = 0x1,
    STANCE_PRONE = 0x2,
    NUM_STANCES = 0x3,
}

public enum StandardLightingAttenuationStyle_t : uint
{
    LIGHT_STYLE_OLD = 0x0,
    LIGHT_STYLE_NEW = 0x1,
}

public enum StateActionBehavior : uint
{
    STATETAGBEHAVIOR_ACTIVE_WHILE_CURRENT = 0x0,
    STATETAGBEHAVIOR_FIRE_ON_ENTER = 0x1,
    STATETAGBEHAVIOR_FIRE_ON_EXIT = 0x2,
    STATETAGBEHAVIOR_FIRE_ON_ENTER_AND_EXIT = 0x3,
}

public enum StepPhase : uint
{
    StepPhase_OnGround = 0x0,
    StepPhase_InAir = 0x1,
}

public enum SubclassVDataChangeType_t : uint
{
    SUBCLASS_VDATA_CREATED = 0x0,
    SUBCLASS_VDATA_SUBCLASS_CHANGED = 0x1,
    SUBCLASS_VDATA_RELOADED = 0x2,
}

public enum SurroundingBoundsType_t : byte
{
    USE_OBB_COLLISION_BOUNDS = 0x0,
    USE_BEST_COLLISION_BOUNDS = 0x1,
    USE_HITBOXES = 0x2,
    USE_SPECIFIED_BOUNDS = 0x3,
    USE_GAME_CODE = 0x4,
    USE_ROTATION_EXPANDED_BOUNDS = 0x5,
    USE_COLLISION_BOUNDS_NEVER_VPHYSICS = 0x6,
    USE_ROTATION_EXPANDED_SEQUENCE_BOUNDS = 0x7,
    SURROUNDING_TYPE_BIT_COUNT = 0x3,
}

public enum TakeDamageFlags_t : uint
{
    DFLAG_NONE = 0x0,
    DFLAG_SUPPRESS_HEALTH_CHANGES = 0x1,
    DFLAG_SUPPRESS_PHYSICS_FORCE = 0x2,
    DFLAG_SUPPRESS_EFFECTS = 0x4,
    DFLAG_PREVENT_DEATH = 0x8,
    DFLAG_FORCE_DEATH = 0x10,
    DFLAG_ALWAYS_GIB = 0x20,
    DFLAG_NEVER_GIB = 0x40,
    DFLAG_REMOVE_NO_RAGDOLL = 0x80,
    DFLAG_SUPPRESS_DAMAGE_MODIFICATION = 0x100,
    DFLAG_ALWAYS_FIRE_DAMAGE_EVENTS = 0x200,
    DFLAG_RADIUS_DMG = 0x400,
    DMG_LASTDFLAG = 0x400,
    DFLAG_IGNORE_ARMOR = 0x800,
}

public enum TextureRepetitionMode_t : uint
{
    TEXTURE_REPETITION_PARTICLE = 0x0,
    TEXTURE_REPETITION_PATH = 0x1,
}

public enum ThreeState_t : uint
{
    TRS_FALSE = 0x0,
    TRS_TRUE = 0x1,
    TRS_NONE = 0x2,
}

public enum TimelineCompression_t : uint
{
    TIMELINE_COMPRESSION_SUM = 0x0,
    TIMELINE_COMPRESSION_COUNT_PER_INTERVAL = 0x1,
    TIMELINE_COMPRESSION_AVERAGE = 0x2,
    TIMELINE_COMPRESSION_AVERAGE_BLEND = 0x3,
    TIMELINE_COMPRESSION_TOTAL = 0x4,
}

public enum TOGGLE_STATE : uint
{
    TS_AT_TOP = 0x0,
    TS_AT_BOTTOM = 0x1,
    TS_GOING_UP = 0x2,
    TS_GOING_DOWN = 0x3,
    DOOR_OPEN = 0x0,
    DOOR_CLOSED = 0x1,
    DOOR_OPENING = 0x2,
    DOOR_CLOSING = 0x3,
}

public enum Touch_t : uint
{
    touch_none = 0x0,
    touch_player_only = 0x1,
    touch_npc_only = 0x2,
    touch_player_or_npc = 0x3,
    touch_player_or_npc_or_physicsprop = 0x4,
}

public enum TrackOrientationType_t : uint
{
    TrackOrientation_Fixed = 0x0,
    TrackOrientation_FacePath = 0x1,
    TrackOrientation_FacePathAngles = 0x2,
}

public enum TRAIN_CODE : uint
{
    TRAIN_SAFE = 0x0,
    TRAIN_BLOCKING = 0x1,
    TRAIN_FOLLOWING = 0x2,
}

public enum TrainOrientationType_t : uint
{
    TrainOrientation_Fixed = 0x0,
    TrainOrientation_AtPathTracks = 0x1,
    TrainOrientation_LinearBlend = 0x2,
    TrainOrientation_EaseInEaseOut = 0x3,
}

public enum TrainVelocityType_t : uint
{
    TrainVelocity_Instantaneous = 0x0,
    TrainVelocity_LinearBlend = 0x1,
    TrainVelocity_EaseInEaseOut = 0x2,
}

public enum ValueRemapperHapticsType_t : uint
{
    HaticsType_Default = 0x0,
    HaticsType_None = 0x1,
}

public enum ValueRemapperInputType_t : uint
{
    InputType_PlayerShootPosition = 0x0,
    InputType_PlayerShootPositionAroundAxis = 0x1,
}

public enum ValueRemapperMomentumType_t : uint
{
    MomentumType_None = 0x0,
    MomentumType_Friction = 0x1,
    MomentumType_SpringTowardSnapValue = 0x2,
    MomentumType_SpringAwayFromSnapValue = 0x3,
}

public enum ValueRemapperOutputType_t : uint
{
    OutputType_AnimationCycle = 0x0,
    OutputType_RotationX = 0x1,
    OutputType_RotationY = 0x2,
    OutputType_RotationZ = 0x3,
}

public enum ValueRemapperRatchetType_t : uint
{
    RatchetType_Absolute = 0x0,
    RatchetType_EachEngage = 0x1,
}

public enum VectorExpressionType_t : uint
{
    VECTOR_EXPRESSION_UNINITIALIZED = 0xFFFFFFFF,
    VECTOR_EXPRESSION_ADD = 0x0,
    VECTOR_EXPRESSION_SUBTRACT = 0x1,
    VECTOR_EXPRESSION_MUL = 0x2,
    VECTOR_EXPRESSION_DIVIDE = 0x3,
    VECTOR_EXPRESSION_INPUT_1 = 0x4,
    VECTOR_EXPRESSION_MIN = 0x5,
    VECTOR_EXPRESSION_MAX = 0x6,
    VECTOR_EXPRESSION_CROSSPRODUCT = 0x7,
}

public enum VectorFloatExpressionType_t : uint
{
    VECTOR_FLOAT_EXPRESSION_UNINITIALIZED = 0xFFFFFFFF,
    VECTOR_FLOAT_EXPRESSION_DOTPRODUCT = 0x0,
    VECTOR_FLOAT_EXPRESSION_DISTANCE = 0x1,
    VECTOR_FLOAT_EXPRESSION_DISTANCESQR = 0x2,
    VECTOR_FLOAT_EXPRESSION_INPUT1_LENGTH = 0x3,
    VECTOR_FLOAT_EXPRESSION_INPUT1_LENGTHSQR = 0x4,
    VECTOR_FLOAT_EXPRESSION_INPUT1_NOISE = 0x5,
}

public enum VelocityMetricMode : byte
{
    DirectionOnly = 0x0,
    MagnitudeOnly = 0x1,
    DirectionAndMagnitude = 0x2,
}

public enum VertJustification_e : uint
{
    VERT_JUSTIFICATION_TOP = 0x0,
    VERT_JUSTIFICATION_CENTER = 0x1,
    VERT_JUSTIFICATION_BOTTOM = 0x2,
    VERT_JUSTIFICATION_NONE = 0x3,
}

public enum ViewFadeMode_t : uint
{
    VIEW_FADE_CONSTANT_COLOR = 0x0,
    VIEW_FADE_MODULATE = 0x1,
    VIEW_FADE_MOD2X = 0x2,
}

public enum VMixChannelOperation_t : uint
{
    VMIX_CHAN_STEREO = 0x0,
    VMIX_CHAN_LEFT = 0x1,
    VMIX_CHAN_RIGHT = 0x2,
    VMIX_CHAN_SWAP = 0x3,
    VMIX_CHAN_MONO = 0x4,
    VMIX_CHAN_MID_SIDE = 0x5,
}

public enum VMixFilterSlope_t : byte
{
    FILTER_SLOPE_1POLE_6dB = 0x0,
    FILTER_SLOPE_1POLE_12dB = 0x1,
    FILTER_SLOPE_1POLE_18dB = 0x2,
    FILTER_SLOPE_1POLE_24dB = 0x3,
    FILTER_SLOPE_12dB = 0x4,
    FILTER_SLOPE_24dB = 0x5,
    FILTER_SLOPE_36dB = 0x6,
    FILTER_SLOPE_48dB = 0x7,
    FILTER_SLOPE_MAX = 0x7,
}

public enum VMixFilterType_t : ushort
{
    FILTER_UNKNOWN = 0xFFFF,
    FILTER_LOWPASS = 0x0,
    FILTER_HIGHPASS = 0x1,
    FILTER_BANDPASS = 0x2,
    FILTER_NOTCH = 0x3,
    FILTER_PEAKING_EQ = 0x4,
    FILTER_LOW_SHELF = 0x5,
    FILTER_HIGH_SHELF = 0x6,
    FILTER_ALLPASS = 0x7,
    FILTER_PASSTHROUGH = 0x8,
}

public enum VMixLFOShape_t : uint
{
    LFO_SHAPE_SINE = 0x0,
    LFO_SHAPE_SQUARE = 0x1,
    LFO_SHAPE_TRI = 0x2,
    LFO_SHAPE_SAW = 0x3,
    LFO_SHAPE_NOISE = 0x4,
}

public enum VMixPannerType_t : uint
{
    PANNER_TYPE_LINEAR = 0x0,
    PANNER_TYPE_EQUAL_POWER = 0x1,
}

public enum VMixProcessorType_t : ushort
{
    VPROCESSOR_UNKNOWN = 0x0,
    VPROCESSOR_STEAMAUDIO_REVERB = 0x1,
    VPROCESSOR_RT_PITCH = 0x2,
    VPROCESSOR_STEAMAUDIO_HRTF = 0x3,
    VPROCESSOR_DYNAMICS = 0x4,
    VPROCESSOR_PRESETDSP = 0x5,
    VPROCESSOR_DELAY = 0x6,
    VPROCESSOR_MOD_DELAY = 0x7,
    VPROCESSOR_DIFFUSOR = 0x8,
    VPROCESSOR_BOXVERB = 0x9,
    VPROCESSOR_FREEVERB = 0xA,
    VPROCESSOR_PLATEVERB = 0xB,
    VPROCESSOR_FULLWAVE_INTEGRATOR = 0xC,
    VPROCESSOR_FILTER = 0xD,
    VPROCESSOR_STEAMAUDIO_PATHING = 0xE,
    VPROCESSOR_EQ8 = 0xF,
    VPROCESSOR_ENVELOPE = 0x10,
    VPROCESSOR_VOCODER = 0x11,
    VPROCESSOR_CONVOLUTION = 0x12,
    VPROCESSOR_DYNAMICS_3BAND = 0x13,
    VPROCESSOR_DYNAMICS_COMPRESSOR = 0x14,
    VPROCESSOR_SHAPER = 0x15,
    VPROCESSOR_PANNER = 0x16,
    VPROCESSOR_UTILITY = 0x17,
    VPROCESSOR_AUTOFILTER = 0x18,
    VPROCESSOR_OSC = 0x19,
    VPROCESSOR_STEREODELAY = 0x1A,
    VPROCESSOR_EFFECT_CHAIN = 0x1B,
    VPROCESSOR_SUBGRAPH_SWITCH = 0x1C,
    VPROCESSOR_STEAMAUDIO_DIRECT = 0x1D,
}

public enum VMixSubgraphSwitchInterpolationType_t : uint
{
    SUBGRAPH_INTERPOLATION_TEMPORAL_CROSSFADE = 0x0,
    SUBGRAPH_INTERPOLATION_TEMPORAL_FADE_OUT = 0x1,
    SUBGRAPH_INTERPOLATION_KEEP_LAST_SUBGRAPH_RUNNING = 0x2,
}

public enum vote_create_failed_t : uint
{
    VOTE_FAILED_GENERIC = 0x0,
    VOTE_FAILED_TRANSITIONING_PLAYERS = 0x1,
    VOTE_FAILED_RATE_EXCEEDED = 0x2,
    VOTE_FAILED_YES_MUST_EXCEED_NO = 0x3,
    VOTE_FAILED_QUORUM_FAILURE = 0x4,
    VOTE_FAILED_ISSUE_DISABLED = 0x5,
    VOTE_FAILED_MAP_NOT_FOUND = 0x6,
    VOTE_FAILED_MAP_NAME_REQUIRED = 0x7,
    VOTE_FAILED_FAILED_RECENTLY = 0x8,
    VOTE_FAILED_TEAM_CANT_CALL = 0x9,
    VOTE_FAILED_WAITINGFORPLAYERS = 0xA,
    VOTE_FAILED_PLAYERNOTFOUND = 0xB,
    VOTE_FAILED_CANNOT_KICK_ADMIN = 0xC,
    VOTE_FAILED_SCRAMBLE_IN_PROGRESS = 0xD,
    VOTE_FAILED_SPECTATOR = 0xE,
    VOTE_FAILED_FAILED_RECENT_KICK = 0xF,
    VOTE_FAILED_FAILED_RECENT_CHANGEMAP = 0x10,
    VOTE_FAILED_FAILED_RECENT_SWAPTEAMS = 0x11,
    VOTE_FAILED_FAILED_RECENT_SCRAMBLETEAMS = 0x12,
    VOTE_FAILED_FAILED_RECENT_RESTART = 0x13,
    VOTE_FAILED_SWAP_IN_PROGRESS = 0x14,
    VOTE_FAILED_DISABLED = 0x15,
    VOTE_FAILED_NEXTLEVEL_SET = 0x16,
    VOTE_FAILED_TOO_EARLY_SURRENDER = 0x17,
    VOTE_FAILED_MATCH_PAUSED = 0x18,
    VOTE_FAILED_MATCH_NOT_PAUSED = 0x19,
    VOTE_FAILED_NOT_IN_WARMUP = 0x1A,
    VOTE_FAILED_NOT_10_PLAYERS = 0x1B,
    VOTE_FAILED_TIMEOUT_ACTIVE = 0x1C,
    VOTE_FAILED_TIMEOUT_INACTIVE = 0x1D,
    VOTE_FAILED_TIMEOUT_EXHAUSTED = 0x1E,
    VOTE_FAILED_CANT_ROUND_END = 0x1F,
    VOTE_FAILED_REMATCH = 0x20,
    VOTE_FAILED_CONTINUE = 0x21,
    VOTE_FAILED_MAX = 0x22,
}

public enum VPhysXAggregateData_tVPhysXFlagEnum_t : uint
{
    FLAG_IS_POLYSOUP_GEOMETRY = 0x1,
    FLAG_LEVEL_COLLISION = 0x10,
    FLAG_IGNORE_SCALE_OBSOLETE_DO_NOT_USE = 0x20,
}

public enum VPhysXBodyPart_tVPhysXFlagEnum_t : uint
{
    FLAG_STATIC = 0x1,
    FLAG_KINEMATIC = 0x2,
    FLAG_JOINT = 0x4,
    FLAG_MASS = 0x8,
    FLAG_ALWAYS_DYNAMIC_ON_CLIENT = 0x10,
}

public enum VPhysXConstraintParams_tEnumFlags0_t : uint
{
    FLAG0_SHIFT_INTERPENETRATE = 0x0,
    FLAG0_SHIFT_CONSTRAIN = 0x1,
    FLAG0_SHIFT_BREAKABLE_FORCE = 0x2,
    FLAG0_SHIFT_BREAKABLE_TORQUE = 0x3,
}

public enum VPhysXJoint_tFlags_t : uint
{
    JOINT_FLAGS_NONE = 0x0,
    JOINT_FLAGS_BODY1_FIXED = 0x1,
    JOINT_FLAGS_USE_BLOCK_SOLVER = 0x2,
}

public enum WaterLevel_t : byte
{
    WL_NotInWater = 0x0,
    WL_Feet = 0x1,
    WL_Knees = 0x2,
    WL_Waist = 0x3,
    WL_Chest = 0x4,
    WL_FullyUnderwater = 0x5,
    WL_Count = 0x6,
}

public enum WeaponAttackType_t : uint
{
    eInvalid = 0xFFFFFFFF,
    ePrimary = 0x0,
    eSecondary = 0x1,
    eCount = 0x2,
}

public enum WeaponSound_t : uint
{
    WEAPON_SOUND_EMPTY = 0x0,
    WEAPON_SOUND_SECONDARY_EMPTY = 0x1,
    WEAPON_SOUND_SINGLE = 0x2,
    WEAPON_SOUND_SECONDARY_ATTACK = 0x3,
    WEAPON_SOUND_RELOAD = 0x4,
    WEAPON_SOUND_MELEE_MISS = 0x5,
    WEAPON_SOUND_MELEE_HIT = 0x6,
    WEAPON_SOUND_MELEE_HIT_WORLD = 0x7,
    WEAPON_SOUND_MELEE_HIT_PLAYER = 0x8,
    WEAPON_SOUND_MELEE_HIT_NPC = 0x9,
    WEAPON_SOUND_SPECIAL1 = 0xA,
    WEAPON_SOUND_SPECIAL2 = 0xB,
    WEAPON_SOUND_SPECIAL3 = 0xC,
    WEAPON_SOUND_NEARLYEMPTY = 0xD,
    WEAPON_SOUND_IMPACT = 0xE,
    WEAPON_SOUND_REFLECT = 0xF,
    WEAPON_SOUND_SECONDARY_IMPACT = 0x10,
    WEAPON_SOUND_SECONDARY_REFLECT = 0x11,
    WEAPON_SOUND_SINGLE_ACCURATE = 0x12,
    WEAPON_SOUND_ZOOM_IN = 0x13,
    WEAPON_SOUND_ZOOM_OUT = 0x14,
    WEAPON_SOUND_MOUSE_PRESSED = 0x15,
    WEAPON_SOUND_DROP = 0x16,
    WEAPON_SOUND_RADIO_USE = 0x17,
    WEAPON_SOUND_NUM_TYPES = 0x18,
}

public enum WorldTextPanelHorizontalAlign_t : uint
{
    WORLDTEXT_HORIZONTAL_ALIGN_LEFT = 0x0,
    WORLDTEXT_HORIZONTAL_ALIGN_CENTER = 0x1,
    WORLDTEXT_HORIZONTAL_ALIGN_RIGHT = 0x2,
}

public enum WorldTextPanelOrientation_t : uint
{
    WORLDTEXT_ORIENTATION_DEFAULT = 0x0,
    WORLDTEXT_ORIENTATION_FACEUSER = 0x1,
    WORLDTEXT_ORIENTATION_FACEUSER_UPRIGHT = 0x2,
}

public enum WorldTextPanelVerticalAlign_t : uint
{
    WORLDTEXT_VERTICAL_ALIGN_TOP = 0x0,
    WORLDTEXT_VERTICAL_ALIGN_CENTER = 0x1,
    WORLDTEXT_VERTICAL_ALIGN_BOTTOM = 0x2,
}

public partial class audioparams_t : NativeObject
{
    public audioparams_t (IntPtr pointer) : base(pointer) {}

    // localSound
    // MNetworkEncoder "coord"
    public Span<Vector> LocalSound => Schema.GetFixedArray<Vector>(this.Handle, "audioparams_t", "localSound", 8);

    // soundscapeIndex
    public ref Int32 SoundscapeIndex => ref Schema.GetRef<Int32>(this.Handle, "audioparams_t", "soundscapeIndex");

    // localBits
    public ref byte LocalBits => ref Schema.GetRef<byte>(this.Handle, "audioparams_t", "localBits");

    // soundscapeEntityListIndex
    public ref Int32 SoundscapeEntityListIndex => ref Schema.GetRef<Int32>(this.Handle, "audioparams_t", "soundscapeEntityListIndex");

    // soundEventHash
    public ref UInt32 SoundEventHash => ref Schema.GetRef<UInt32>(this.Handle, "audioparams_t", "soundEventHash");

}

public partial class CAK47 : CCSWeaponBaseGun
{
    public CAK47 (IntPtr pointer) : base(pointer) {}

}

public partial class CAnimGraphNetworkedVariables : NativeObject
{
    public CAnimGraphNetworkedVariables (IntPtr pointer) : base(pointer) {}

    // m_PredNetBoolVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetBoolVarChanged"
    // MNetworkAlias "m_PredBoolVariables"
    public NetworkedVector<UInt32> PredNetBoolVariables => Schema.GetDeclaredClass<NetworkedVector<UInt32>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetBoolVariables");

    // m_PredNetByteVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetByteVarChanged"
    // MNetworkAlias "m_PredByteVariables"
    public NetworkedVector<byte> PredNetByteVariables => Schema.GetDeclaredClass<NetworkedVector<byte>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetByteVariables");

    // m_PredNetUInt16Variables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetUInt16VarChanged"
    // MNetworkAlias "m_PredUInt16Variables"
    public NetworkedVector<UInt16> PredNetUInt16Variables => Schema.GetDeclaredClass<NetworkedVector<UInt16>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetUInt16Variables");

    // m_PredNetIntVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetIntVarChanged"
    // MNetworkAlias "m_PredIntVariables"
    public NetworkedVector<Int32> PredNetIntVariables => Schema.GetDeclaredClass<NetworkedVector<Int32>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetIntVariables");

    // m_PredNetUInt32Variables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetUInt32VarChanged"
    // MNetworkAlias "m_PredUInt32Variables"
    public NetworkedVector<UInt32> PredNetUInt32Variables => Schema.GetDeclaredClass<NetworkedVector<UInt32>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetUInt32Variables");

    // m_PredNetUInt64Variables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetUInt64VarChanged"
    // MNetworkAlias "m_PredUInt64Variables"
    public NetworkedVector<UInt64> PredNetUInt64Variables => Schema.GetDeclaredClass<NetworkedVector<UInt64>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetUInt64Variables");

    // m_PredNetFloatVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetFloatVarChanged"
    // MNetworkAlias "m_PredFloatVariables"
    public NetworkedVector<float> PredNetFloatVariables => Schema.GetDeclaredClass<NetworkedVector<float>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetFloatVariables");

    // m_PredNetVectorVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetVectorVarChanged"
    // MNetworkAlias "m_PredVectorVariables"
    public NetworkedVector<Vector> PredNetVectorVariables => Schema.GetDeclaredClass<NetworkedVector<Vector>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetVectorVariables");

    // m_PredNetQuaternionVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetQuaternionVarChanged"
    // MNetworkAlias "m_PredQuaternionVariables"
    public NetworkedVector<Quaternion> PredNetQuaternionVariables => Schema.GetDeclaredClass<NetworkedVector<Quaternion>>(this.Handle, "CAnimGraphNetworkedVariables", "m_PredNetQuaternionVariables");

    // m_OwnerOnlyPredNetBoolVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOBoolVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetBoolVariables"
    public NetworkedVector<UInt32> OwnerOnlyPredNetBoolVariables => Schema.GetDeclaredClass<NetworkedVector<UInt32>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetBoolVariables");

    // m_OwnerOnlyPredNetByteVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOByteVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetByteVariables"
    public NetworkedVector<byte> OwnerOnlyPredNetByteVariables => Schema.GetDeclaredClass<NetworkedVector<byte>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetByteVariables");

    // m_OwnerOnlyPredNetUInt16Variables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt16VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt16Variables"
    public NetworkedVector<UInt16> OwnerOnlyPredNetUInt16Variables => Schema.GetDeclaredClass<NetworkedVector<UInt16>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt16Variables");

    // m_OwnerOnlyPredNetIntVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOIntVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetIntVariables"
    public NetworkedVector<Int32> OwnerOnlyPredNetIntVariables => Schema.GetDeclaredClass<NetworkedVector<Int32>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetIntVariables");

    // m_OwnerOnlyPredNetUInt32Variables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt32VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt32Variables"
    public NetworkedVector<UInt32> OwnerOnlyPredNetUInt32Variables => Schema.GetDeclaredClass<NetworkedVector<UInt32>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt32Variables");

    // m_OwnerOnlyPredNetUInt64Variables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOUInt64VarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetUInt64Variables"
    public NetworkedVector<UInt64> OwnerOnlyPredNetUInt64Variables => Schema.GetDeclaredClass<NetworkedVector<UInt64>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt64Variables");

    // m_OwnerOnlyPredNetFloatVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOFloatVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetFloatVariables"
    public NetworkedVector<float> OwnerOnlyPredNetFloatVariables => Schema.GetDeclaredClass<NetworkedVector<float>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetFloatVariables");

    // m_OwnerOnlyPredNetVectorVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOVectorVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetVectorVariables"
    public NetworkedVector<Vector> OwnerOnlyPredNetVectorVariables => Schema.GetDeclaredClass<NetworkedVector<Vector>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetVectorVariables");

    // m_OwnerOnlyPredNetQuaternionVariables
    // MNetworkUserGroup "animationgraph"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkChangeCallback "OnNetOOQuaternionVarChanged"
    // MNetworkAlias "m_OwnerOnlyPredNetQuaternionVariables"
    public NetworkedVector<Quaternion> OwnerOnlyPredNetQuaternionVariables => Schema.GetDeclaredClass<NetworkedVector<Quaternion>>(this.Handle, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetQuaternionVariables");

    // m_nBoolVariablesCount
    // MNetworkUserGroup "animationgraph"
    public ref Int32 BoolVariablesCount => ref Schema.GetRef<Int32>(this.Handle, "CAnimGraphNetworkedVariables", "m_nBoolVariablesCount");

    // m_nOwnerOnlyBoolVariablesCount
    // MNetworkUserGroup "animationgraph"
    public ref Int32 OwnerOnlyBoolVariablesCount => ref Schema.GetRef<Int32>(this.Handle, "CAnimGraphNetworkedVariables", "m_nOwnerOnlyBoolVariablesCount");

    // m_nRandomSeedOffset
    // MNetworkUserGroup "animationgraph"
    public ref Int32 RandomSeedOffset => ref Schema.GetRef<Int32>(this.Handle, "CAnimGraphNetworkedVariables", "m_nRandomSeedOffset");

    // m_flLastTeleportTime
    // MNetworkUserGroup "animationgraph"
    public ref float LastTeleportTime => ref Schema.GetRef<float>(this.Handle, "CAnimGraphNetworkedVariables", "m_flLastTeleportTime");

}

public partial class CAttributeContainer : CAttributeManager
{
    public CAttributeContainer (IntPtr pointer) : base(pointer) {}

    // m_Item
    public CEconItemView Item => Schema.GetDeclaredClass<CEconItemView>(this.Handle, "CAttributeContainer", "m_Item");

}

public partial class CAttributeList : NativeObject
{
    public CAttributeList (IntPtr pointer) : base(pointer) {}

    // m_Attributes
    // MNetworkTypeAlias "CUtlVector< CEconItemAttribute >"
    public NetworkedVector<CEconItemAttribute> Attributes => Schema.GetDeclaredClass<NetworkedVector<CEconItemAttribute>>(this.Handle, "CAttributeList", "m_Attributes");

}

public partial class CAttributeManager : NativeObject
{
    public CAttributeManager (IntPtr pointer) : base(pointer) {}

    // m_iReapplyProvisionParity
    public ref Int32 ReapplyProvisionParity => ref Schema.GetRef<Int32>(this.Handle, "CAttributeManager", "m_iReapplyProvisionParity");

    // m_hOuter
    public CHandle<CBaseEntity> Outer => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CAttributeManager", "m_hOuter");

    // m_ProviderType
    public ref attributeprovidertypes_t ProviderType => ref Schema.GetRef<attributeprovidertypes_t>(this.Handle, "CAttributeManager", "m_ProviderType");

}

public partial class CBarnLight : CBaseModelEntity
{
    public CBarnLight (IntPtr pointer) : base(pointer) {}

    // m_bEnabled
    // MNetworkChangeCallback "RenderingChanged"
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CBarnLight", "m_bEnabled");

    // m_nColorMode
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 ColorMode => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nColorMode");

    // m_Color
    // MNetworkChangeCallback "RenderingChanged"
    public Color Color => Schema.GetDeclaredClass<Color>(this.Handle, "CBarnLight", "m_Color");

    // m_flColorTemperature
    // MNetworkChangeCallback "RenderingChanged"
    public ref float ColorTemperature => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flColorTemperature");

    // m_flBrightness
    // MNetworkChangeCallback "RenderingChanged"
    public ref float Brightness => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flBrightness");

    // m_flBrightnessScale
    // MNetworkChangeCallback "RenderingChanged"
    public ref float BrightnessScale => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flBrightnessScale");

    // m_nDirectLight
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 DirectLight => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nDirectLight");

    // m_nBakedShadowIndex
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 BakedShadowIndex => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nBakedShadowIndex");

    // m_nLuminaireShape
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 LuminaireShape => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nLuminaireShape");

    // m_flLuminaireSize
    // MNetworkChangeCallback "RenderingChanged"
    public ref float LuminaireSize => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flLuminaireSize");

    // m_flLuminaireAnisotropy
    // MNetworkChangeCallback "RenderingChanged"
    public ref float LuminaireAnisotropy => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flLuminaireAnisotropy");

    // m_LightStyleString
    // MNetworkChangeCallback "StyleChanged"
    public string LightStyleString
    {
        get { return Schema.GetUtf8String(this.Handle, "CBarnLight", "m_LightStyleString"); }
        set { Schema.SetString(this.Handle, "CBarnLight", "m_LightStyleString", value); }
    }

    // m_flLightStyleStartTime
    // MNetworkChangeCallback "RenderingChanged"
    public ref float LightStyleStartTime => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flLightStyleStartTime");

    // m_QueuedLightStyleStrings
    public NetworkedVector<string> QueuedLightStyleStrings => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CBarnLight", "m_QueuedLightStyleStrings");

    // m_LightStyleEvents
    public NetworkedVector<string> LightStyleEvents => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CBarnLight", "m_LightStyleEvents");

    // m_LightStyleTargets
    public NetworkedVector<CHandle<CBaseModelEntity>> LightStyleTargets => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseModelEntity>>>(this.Handle, "CBarnLight", "m_LightStyleTargets");

    // m_hLightCookie
    // MNetworkChangeCallback "RenderingChanged"
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightCookie => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CBarnLight", "m_hLightCookie");

    // m_flShape
    // MNetworkChangeCallback "RenderingChanged"
    public ref float Shape => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flShape");

    // m_flSoftX
    // MNetworkChangeCallback "RenderingChanged"
    public ref float SoftX => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flSoftX");

    // m_flSoftY
    // MNetworkChangeCallback "RenderingChanged"
    public ref float SoftY => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flSoftY");

    // m_flSkirt
    // MNetworkChangeCallback "RenderingChanged"
    public ref float Skirt => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flSkirt");

    // m_flSkirtNear
    // MNetworkChangeCallback "RenderingChanged"
    public ref float SkirtNear => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flSkirtNear");

    // m_vSizeParams
    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount "32"
    public Vector SizeParams => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vSizeParams");

    // m_flRange
    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount "32"
    public ref float Range => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flRange");

    // m_vShear
    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount "32"
    public Vector Shear => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vShear");

    // m_nBakeSpecularToCubemaps
    public ref Int32 BakeSpecularToCubemaps => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nBakeSpecularToCubemaps");

    // m_vBakeSpecularToCubemapsSize
    // MNetworkChangeCallback "RenderingChanged"
    // MNetworkBitCount "32"
    public Vector BakeSpecularToCubemapsSize => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vBakeSpecularToCubemapsSize");

    // m_nCastShadows
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 CastShadows => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nCastShadows");

    // m_nShadowMapSize
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 ShadowMapSize => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nShadowMapSize");

    // m_nShadowPriority
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 ShadowPriority => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nShadowPriority");

    // m_bContactShadow
    // MNetworkChangeCallback "RenderingChanged"
    public ref bool ContactShadow => ref Schema.GetRef<bool>(this.Handle, "CBarnLight", "m_bContactShadow");

    // m_nBounceLight
    public ref Int32 BounceLight => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nBounceLight");

    // m_flBounceScale
    public ref float BounceScale => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flBounceScale");

    // m_flMinRoughness
    // MNetworkChangeCallback "RenderingChanged"
    public ref float MinRoughness => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flMinRoughness");

    // m_vAlternateColor
    // MNetworkChangeCallback "RenderingChanged"
    public Vector AlternateColor => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vAlternateColor");

    // m_fAlternateColorBrightness
    // MNetworkChangeCallback "RenderingChanged"
    public ref float AlternateColorBrightness => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_fAlternateColorBrightness");

    // m_nFog
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 Fog => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nFog");

    // m_flFogStrength
    // MNetworkChangeCallback "RenderingChanged"
    public ref float FogStrength => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flFogStrength");

    // m_nFogShadows
    // MNetworkChangeCallback "RenderingChanged"
    public ref Int32 FogShadows => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nFogShadows");

    // m_flFogScale
    // MNetworkChangeCallback "RenderingChanged"
    public ref float FogScale => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flFogScale");

    // m_flFadeSizeStart
    // MNetworkChangeCallback "RenderingChanged"
    public ref float FadeSizeStart => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flFadeSizeStart");

    // m_flFadeSizeEnd
    // MNetworkChangeCallback "RenderingChanged"
    public ref float FadeSizeEnd => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flFadeSizeEnd");

    // m_flShadowFadeSizeStart
    // MNetworkChangeCallback "RenderingChanged"
    public ref float ShadowFadeSizeStart => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flShadowFadeSizeStart");

    // m_flShadowFadeSizeEnd
    // MNetworkChangeCallback "RenderingChanged"
    public ref float ShadowFadeSizeEnd => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flShadowFadeSizeEnd");

    // m_bPrecomputedFieldsValid
    // MNetworkChangeCallback "RenderingChanged"
    public ref bool PrecomputedFieldsValid => ref Schema.GetRef<bool>(this.Handle, "CBarnLight", "m_bPrecomputedFieldsValid");

    // m_vPrecomputedBoundsMins
    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedBoundsMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vPrecomputedBoundsMins");

    // m_vPrecomputedBoundsMaxs
    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedBoundsMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vPrecomputedBoundsMaxs");

    // m_vPrecomputedOBBOrigin
    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBOrigin => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vPrecomputedOBBOrigin");

    // m_vPrecomputedOBBAngles
    // MNetworkChangeCallback "RenderingChanged"
    public QAngle PrecomputedOBBAngles => Schema.GetDeclaredClass<QAngle>(this.Handle, "CBarnLight", "m_vPrecomputedOBBAngles");

    // m_vPrecomputedOBBExtent
    // MNetworkChangeCallback "RenderingChanged"
    public Vector PrecomputedOBBExtent => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vPrecomputedOBBExtent");

}

public partial class CBaseAnimGraph : CBaseModelEntity
{
    public CBaseAnimGraph (IntPtr pointer) : base(pointer) {}

    // m_bInitiallyPopulateInterpHistory
    public ref bool InitiallyPopulateInterpHistory => ref Schema.GetRef<bool>(this.Handle, "CBaseAnimGraph", "m_bInitiallyPopulateInterpHistory");

    // m_bShouldAnimateDuringGameplayPause
    public ref bool ShouldAnimateDuringGameplayPause => ref Schema.GetRef<bool>(this.Handle, "CBaseAnimGraph", "m_bShouldAnimateDuringGameplayPause");

    // m_bAnimGraphUpdateEnabled
    public ref bool AnimGraphUpdateEnabled => ref Schema.GetRef<bool>(this.Handle, "CBaseAnimGraph", "m_bAnimGraphUpdateEnabled");

    // m_vecForce
    public Vector Force => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseAnimGraph", "m_vecForce");

    // m_nForceBone
    public ref Int32 ForceBone => ref Schema.GetRef<Int32>(this.Handle, "CBaseAnimGraph", "m_nForceBone");

    // m_pRagdollPose
    public PhysicsRagdollPose_t? RagdollPose => Schema.GetPointer<PhysicsRagdollPose_t>(this.Handle, "CBaseAnimGraph", "m_pRagdollPose");

    // m_bClientRagdoll
    // MNetworkChangeCallback "OnClientRagdollChanged"
    public ref bool ClientRagdoll => ref Schema.GetRef<bool>(this.Handle, "CBaseAnimGraph", "m_bClientRagdoll");

}

public partial class CBaseAnimGraphController : CSkeletonAnimationController
{
    public CBaseAnimGraphController (IntPtr pointer) : base(pointer) {}

    // m_baseLayer
    // MNetworkChangeCallback "baseAnimBaseLayerChangedCompat"
    public CNetworkedSequenceOperation BaseLayer => Schema.GetDeclaredClass<CNetworkedSequenceOperation>(this.Handle, "CBaseAnimGraphController", "m_baseLayer");

    // m_animGraphNetworkedVars
    public CAnimGraphNetworkedVariables AnimGraphNetworkedVars => Schema.GetDeclaredClass<CAnimGraphNetworkedVariables>(this.Handle, "CBaseAnimGraphController", "m_animGraphNetworkedVars");

    // m_flPlaybackRate
    // MNetworkBitCount "8"
    // MNetworkMinValue "-4.000000"
    // MNetworkMaxValue "12.000000"
    // MNetworkEncodeFlags "5"
    // MNetworkPriority "32"
    // MNetworkChangeCallback "playbackRateChangedCompat"
    public float PlaybackRate => Schema.GetDeclaredClass<float>(this.Handle, "CBaseAnimGraphController", "m_flPlaybackRate");

    // m_bClientSideAnimation
    // MNetworkChangeCallback "clientSideAnimationChangedCompat"
    public ref bool ClientSideAnimation => ref Schema.GetRef<bool>(this.Handle, "CBaseAnimGraphController", "m_bClientSideAnimation");

    // m_nNewSequenceParity
    // MNetworkPriority "32"
    // MNetworkChangeCallback "clientSideAnimCycleResetCompat"
    public ref Int32 NewSequenceParity => ref Schema.GetRef<Int32>(this.Handle, "CBaseAnimGraphController", "m_nNewSequenceParity");

    // m_nResetEventsParity
    // MNetworkPriority "32"
    public ref Int32 ResetEventsParity => ref Schema.GetRef<Int32>(this.Handle, "CBaseAnimGraphController", "m_nResetEventsParity");

    // m_nAnimLoopMode
    public ref AnimLoopMode_t AnimLoopMode => ref Schema.GetRef<AnimLoopMode_t>(this.Handle, "CBaseAnimGraphController", "m_nAnimLoopMode");

}

public partial class CBaseButton : CBaseToggle
{
    public CBaseButton (IntPtr pointer) : base(pointer) {}

    // m_glowEntity
    public CHandle<CBaseModelEntity> GlowEntity => Schema.GetDeclaredClass<CHandle<CBaseModelEntity>>(this.Handle, "CBaseButton", "m_glowEntity");

    // m_usable
    public ref bool Usable => ref Schema.GetRef<bool>(this.Handle, "CBaseButton", "m_usable");

    // m_szDisplayText
    public string DisplayText
    {
        get { return Schema.GetUtf8String(this.Handle, "CBaseButton", "m_szDisplayText"); }
        set { Schema.SetString(this.Handle, "CBaseButton", "m_szDisplayText", value); }
    }

}

public partial class CBaseClientUIEntity : CBaseModelEntity
{
    public CBaseClientUIEntity (IntPtr pointer) : base(pointer) {}

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CBaseClientUIEntity", "m_bEnabled");

    // m_DialogXMLName
    public string DialogXMLName
    {
        get { return Schema.GetUtf8String(this.Handle, "CBaseClientUIEntity", "m_DialogXMLName"); }
        set { Schema.SetString(this.Handle, "CBaseClientUIEntity", "m_DialogXMLName", value); }
    }

    // m_PanelClassName
    public string PanelClassName
    {
        get { return Schema.GetUtf8String(this.Handle, "CBaseClientUIEntity", "m_PanelClassName"); }
        set { Schema.SetString(this.Handle, "CBaseClientUIEntity", "m_PanelClassName", value); }
    }

    // m_PanelID
    public string PanelID
    {
        get { return Schema.GetUtf8String(this.Handle, "CBaseClientUIEntity", "m_PanelID"); }
        set { Schema.SetString(this.Handle, "CBaseClientUIEntity", "m_PanelID", value); }
    }

}

public partial class CBaseCombatCharacter : CBaseFlex
{
    public CBaseCombatCharacter (IntPtr pointer) : base(pointer) {}

    // m_hMyWearables
    public NetworkedVector<CHandle<CEconWearable>> MyWearables => Schema.GetDeclaredClass<NetworkedVector<CHandle<CEconWearable>>>(this.Handle, "CBaseCombatCharacter", "m_hMyWearables");

    // m_flFieldOfView
    public ref float FieldOfView => ref Schema.GetRef<float>(this.Handle, "CBaseCombatCharacter", "m_flFieldOfView");

}

public partial class CBaseCSGrenade : CCSWeaponBase
{
    public CBaseCSGrenade (IntPtr pointer) : base(pointer) {}

    // m_bRedraw
    public ref bool Redraw => ref Schema.GetRef<bool>(this.Handle, "CBaseCSGrenade", "m_bRedraw");

    // m_bIsHeldByPlayer
    public ref bool IsHeldByPlayer => ref Schema.GetRef<bool>(this.Handle, "CBaseCSGrenade", "m_bIsHeldByPlayer");

    // m_bPinPulled
    public ref bool PinPulled => ref Schema.GetRef<bool>(this.Handle, "CBaseCSGrenade", "m_bPinPulled");

    // m_bJumpThrow
    public ref bool JumpThrow => ref Schema.GetRef<bool>(this.Handle, "CBaseCSGrenade", "m_bJumpThrow");

    // m_eThrowStatus
    public ref EGrenadeThrowState ThrowStatus => ref Schema.GetRef<EGrenadeThrowState>(this.Handle, "CBaseCSGrenade", "m_eThrowStatus");

    // m_fThrowTime
    public ref float ThrowTime => ref Schema.GetRef<float>(this.Handle, "CBaseCSGrenade", "m_fThrowTime");

    // m_flThrowStrength
    public ref float ThrowStrength => ref Schema.GetRef<float>(this.Handle, "CBaseCSGrenade", "m_flThrowStrength");

    // m_flThrowStrengthApproach
    public ref float ThrowStrengthApproach => ref Schema.GetRef<float>(this.Handle, "CBaseCSGrenade", "m_flThrowStrengthApproach");

    // m_fDropTime
    public ref float DropTime => ref Schema.GetRef<float>(this.Handle, "CBaseCSGrenade", "m_fDropTime");

}

public partial class CBaseCSGrenadeProjectile : CBaseGrenade
{
    public CBaseCSGrenadeProjectile (IntPtr pointer) : base(pointer) {}

    // m_vInitialVelocity
    public Vector InitialVelocity => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseCSGrenadeProjectile", "m_vInitialVelocity");

    // m_nBounces
    public ref Int32 Bounces => ref Schema.GetRef<Int32>(this.Handle, "CBaseCSGrenadeProjectile", "m_nBounces");

    // m_nExplodeEffectIndex
    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> ExplodeEffectIndex => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>>(this.Handle, "CBaseCSGrenadeProjectile", "m_nExplodeEffectIndex");

    // m_nExplodeEffectTickBegin
    public ref Int32 ExplodeEffectTickBegin => ref Schema.GetRef<Int32>(this.Handle, "CBaseCSGrenadeProjectile", "m_nExplodeEffectTickBegin");

    // m_vecExplodeEffectOrigin
    public Vector ExplodeEffectOrigin => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseCSGrenadeProjectile", "m_vecExplodeEffectOrigin");

}

public partial class CBaseDoor : CBaseToggle
{
    public CBaseDoor (IntPtr pointer) : base(pointer) {}

    // m_bIsUsable
    public ref bool IsUsable => ref Schema.GetRef<bool>(this.Handle, "CBaseDoor", "m_bIsUsable");

}

public partial class CBaseEntity : CEntityInstance
{
    public CBaseEntity (IntPtr pointer) : base(pointer) {}

    // m_CBodyComponent
    // MNetworkUserGroup "CBodyComponent"
    // MNetworkAlias "CBodyComponent"
    // MNetworkTypeAlias "CBodyComponent"
    // MNetworkPriority "48"
    public CBodyComponent? CBodyComponent => Schema.GetPointer<CBodyComponent>(this.Handle, "CBaseEntity", "m_CBodyComponent");

    // m_iHealth
    // MNetworkSerializer "ClampHealth"
    // MNetworkUserGroup "Player"
    // MNetworkPriority "32"
    public ref Int32 Health => ref Schema.GetRef<Int32>(this.Handle, "CBaseEntity", "m_iHealth");

    // m_iMaxHealth
    public ref Int32 MaxHealth => ref Schema.GetRef<Int32>(this.Handle, "CBaseEntity", "m_iMaxHealth");

    // m_lifeState
    // MNetworkUserGroup "Player"
    // MNetworkPriority "32"
    public ref byte LifeState => ref Schema.GetRef<byte>(this.Handle, "CBaseEntity", "m_lifeState");

    // m_bTakesDamage
    public ref bool TakesDamage => ref Schema.GetRef<bool>(this.Handle, "CBaseEntity", "m_bTakesDamage");

    // m_nTakeDamageFlags
    public ref TakeDamageFlags_t TakeDamageFlags => ref Schema.GetRef<TakeDamageFlags_t>(this.Handle, "CBaseEntity", "m_nTakeDamageFlags");

    // m_MoveCollide
    public ref MoveCollide_t MoveCollide => ref Schema.GetRef<MoveCollide_t>(this.Handle, "CBaseEntity", "m_MoveCollide");

    // m_MoveType
    public ref MoveType_t MoveType => ref Schema.GetRef<MoveType_t>(this.Handle, "CBaseEntity", "m_MoveType");

    // m_nSubclassID
    // MNetworkSendProxyRecipientsFilter
    public CUtlStringToken SubclassID => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "CBaseEntity", "m_nSubclassID");

    // m_flAnimTime
    // MNetworkPriority "0"
    // MNetworkSerializer "animTimeSerializer"
    // MNetworkSendProxyRecipientsFilter
    public ref float AnimTime => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flAnimTime");

    // m_flSimulationTime
    // MNetworkPriority "1"
    // MNetworkSerializer "simulationTimeSerializer"
    // MNetworkSendProxyRecipientsFilter
    public ref float SimulationTime => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flSimulationTime");

    // m_flCreateTime
    public ref float CreateTime => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flCreateTime");

    // m_bClientSideRagdoll
    public ref bool ClientSideRagdoll => ref Schema.GetRef<bool>(this.Handle, "CBaseEntity", "m_bClientSideRagdoll");

    // m_ubInterpolationFrame
    public ref byte InterpolationFrame => ref Schema.GetRef<byte>(this.Handle, "CBaseEntity", "m_ubInterpolationFrame");

    // m_iTeamNum
    public ref byte TeamNum => ref Schema.GetRef<byte>(this.Handle, "CBaseEntity", "m_iTeamNum");

    // m_spawnflags
    public ref UInt32 Spawnflags => ref Schema.GetRef<UInt32>(this.Handle, "CBaseEntity", "m_spawnflags");

    // m_nNextThinkTick
    // MNetworkUserGroup "LocalPlayerExclusive"
    // m_fFlags
    // MNetworkPriority "32"
    // MNetworkUserGroup "Player"
    public ref UInt32 Flags => ref Schema.GetRef<UInt32>(this.Handle, "CBaseEntity", "m_fFlags");

    // m_vecVelocity
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority "32"
    public CNetworkVelocityVector Velocity => Schema.GetDeclaredClass<CNetworkVelocityVector>(this.Handle, "CBaseEntity", "m_vecVelocity");

    // m_vecBaseVelocity
    // MNetworkUserGroup "LocalPlayerExclusive"
    public Vector BaseVelocity => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseEntity", "m_vecBaseVelocity");

    // m_hEffectEntity
    public CHandle<CBaseEntity> EffectEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CBaseEntity", "m_hEffectEntity");

    // m_hOwnerEntity
    // MNetworkPriority "32"
    public CHandle<CBaseEntity> OwnerEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CBaseEntity", "m_hOwnerEntity");

    // m_fEffects
    // MNetworkChangeCallback "OnEffectsChanged"
    public ref UInt32 Effects => ref Schema.GetRef<UInt32>(this.Handle, "CBaseEntity", "m_fEffects");

    // m_hGroundEntity
    // MNetworkPriority "32"
    // MNetworkUserGroup "Player"
    public CHandle<CBaseEntity> GroundEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CBaseEntity", "m_hGroundEntity");

    // m_flFriction
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "4.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref float Friction => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flFriction");

    // m_flElasticity
    // MNetworkEncoder "coord"
    public ref float Elasticity => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flElasticity");

    // m_flGravityScale
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref float GravityScale => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flGravityScale");

    // m_flTimeScale
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref float TimeScale => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flTimeScale");

    // m_flWaterLevel
    // MNetworkUserGroup "Water"
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "8"
    public ref float WaterLevel => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flWaterLevel");

    // m_bSimulatedEveryTick
    public ref bool SimulatedEveryTick => ref Schema.GetRef<bool>(this.Handle, "CBaseEntity", "m_bSimulatedEveryTick");

    // m_bAnimatedEveryTick
    public ref bool AnimatedEveryTick => ref Schema.GetRef<bool>(this.Handle, "CBaseEntity", "m_bAnimatedEveryTick");

    // m_flNavIgnoreUntilTime
    public ref float NavIgnoreUntilTime => ref Schema.GetRef<float>(this.Handle, "CBaseEntity", "m_flNavIgnoreUntilTime");

}

public partial class CBaseFire : CBaseEntity
{
    public CBaseFire (IntPtr pointer) : base(pointer) {}

    // m_flScale
    public ref float Scale => ref Schema.GetRef<float>(this.Handle, "CBaseFire", "m_flScale");

    // m_flStartScale
    public ref float StartScale => ref Schema.GetRef<float>(this.Handle, "CBaseFire", "m_flStartScale");

    // m_flScaleTime
    public ref float ScaleTime => ref Schema.GetRef<float>(this.Handle, "CBaseFire", "m_flScaleTime");

    // m_nFlags
    public ref UInt32 FireFlags => ref Schema.GetRef<UInt32>(this.Handle, "CBaseFire", "m_nFlags");

}

public partial class CBaseFlex : CBaseAnimGraph
{
    public CBaseFlex (IntPtr pointer) : base(pointer) {}

    // m_flexWeight
    // MNetworkBitCount "12"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "1"
    public NetworkedVector<float> FlexWeight => Schema.GetDeclaredClass<NetworkedVector<float>>(this.Handle, "CBaseFlex", "m_flexWeight");

    // m_vLookTargetPosition
    // MNetworkEncoder "coord"
    public Vector LookTargetPosition => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseFlex", "m_vLookTargetPosition");

    // m_blinktoggle
    public ref bool Blinktoggle => ref Schema.GetRef<bool>(this.Handle, "CBaseFlex", "m_blinktoggle");

}

public partial class CBaseGrenade : CBaseFlex
{
    public CBaseGrenade (IntPtr pointer) : base(pointer) {}

    // m_bIsLive
    public ref bool IsLive => ref Schema.GetRef<bool>(this.Handle, "CBaseGrenade", "m_bIsLive");

    // m_DmgRadius
    // MNetworkBitCount "10"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1024.000000"
    // MNetworkEncodeFlags "1"
    public ref float DmgRadius => ref Schema.GetRef<float>(this.Handle, "CBaseGrenade", "m_DmgRadius");

    // m_flDetonateTime
    public ref float DetonateTime => ref Schema.GetRef<float>(this.Handle, "CBaseGrenade", "m_flDetonateTime");

    // m_flDamage
    // MNetworkBitCount "10"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "256.000000"
    // MNetworkEncodeFlags "1"
    public ref float Damage => ref Schema.GetRef<float>(this.Handle, "CBaseGrenade", "m_flDamage");

    // m_hThrower
    public CHandle<CCSPlayerPawn> Thrower => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CBaseGrenade", "m_hThrower");

}

public partial class CBaseModelEntity : CBaseEntity
{
    public CBaseModelEntity (IntPtr pointer) : base(pointer) {}

    // m_CRenderComponent
    // MNetworkUserGroup "CRenderComponent"
    // MNetworkAlias "CRenderComponent"
    // MNetworkTypeAlias "CRenderComponent"
    public CRenderComponent? CRenderComponent => Schema.GetPointer<CRenderComponent>(this.Handle, "CBaseModelEntity", "m_CRenderComponent");

    // m_CHitboxComponent
    // MNetworkUserGroup "CHitboxComponent"
    // MNetworkAlias "CHitboxComponent"
    // MNetworkTypeAlias "CHitboxComponent"
    public CHitboxComponent CHitboxComponent => Schema.GetDeclaredClass<CHitboxComponent>(this.Handle, "CBaseModelEntity", "m_CHitboxComponent");

    // m_nRenderMode
    public ref RenderMode_t RenderMode => ref Schema.GetRef<RenderMode_t>(this.Handle, "CBaseModelEntity", "m_nRenderMode");

    // m_nRenderFX
    public ref RenderFx_t RenderFX => ref Schema.GetRef<RenderFx_t>(this.Handle, "CBaseModelEntity", "m_nRenderFX");

    // m_clrRender
    // MNetworkChangeCallback "OnColorChanged"
    public Color Render => Schema.GetDeclaredClass<Color>(this.Handle, "CBaseModelEntity", "m_clrRender");

    // m_vecRenderAttributes
    // MNetworkChangeCallback "OnRenderAttributesChanged"
    public NetworkedVector<EntityRenderAttribute_t> RenderAttributes => Schema.GetDeclaredClass<NetworkedVector<EntityRenderAttribute_t>>(this.Handle, "CBaseModelEntity", "m_vecRenderAttributes");

    // m_LightGroup
    // MNetworkChangeCallback "OnLightGroupChanged"
    public CUtlStringToken LightGroup => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "CBaseModelEntity", "m_LightGroup");

    // m_bRenderToCubemaps
    public ref bool RenderToCubemaps => ref Schema.GetRef<bool>(this.Handle, "CBaseModelEntity", "m_bRenderToCubemaps");

    // m_Collision
    public CCollisionProperty Collision => Schema.GetDeclaredClass<CCollisionProperty>(this.Handle, "CBaseModelEntity", "m_Collision");

    // m_Glow
    public CGlowProperty Glow => Schema.GetDeclaredClass<CGlowProperty>(this.Handle, "CBaseModelEntity", "m_Glow");

    // m_flGlowBackfaceMult
    public ref float GlowBackfaceMult => ref Schema.GetRef<float>(this.Handle, "CBaseModelEntity", "m_flGlowBackfaceMult");

    // m_fadeMinDist
    public ref float FadeMinDist => ref Schema.GetRef<float>(this.Handle, "CBaseModelEntity", "m_fadeMinDist");

    // m_fadeMaxDist
    public ref float FadeMaxDist => ref Schema.GetRef<float>(this.Handle, "CBaseModelEntity", "m_fadeMaxDist");

    // m_flFadeScale
    public ref float FadeScale => ref Schema.GetRef<float>(this.Handle, "CBaseModelEntity", "m_flFadeScale");

    // m_flShadowStrength
    public ref float ShadowStrength => ref Schema.GetRef<float>(this.Handle, "CBaseModelEntity", "m_flShadowStrength");

    // m_nObjectCulling
    public ref byte ObjectCulling => ref Schema.GetRef<byte>(this.Handle, "CBaseModelEntity", "m_nObjectCulling");

    // m_nAddDecal
    public ref Int32 AddDecal => ref Schema.GetRef<Int32>(this.Handle, "CBaseModelEntity", "m_nAddDecal");

    // m_vDecalPosition
    public Vector DecalPosition => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseModelEntity", "m_vDecalPosition");

    // m_vDecalForwardAxis
    public Vector DecalForwardAxis => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseModelEntity", "m_vDecalForwardAxis");

    // m_flDecalHealBloodRate
    public ref float DecalHealBloodRate => ref Schema.GetRef<float>(this.Handle, "CBaseModelEntity", "m_flDecalHealBloodRate");

    // m_flDecalHealHeightRate
    public ref float DecalHealHeightRate => ref Schema.GetRef<float>(this.Handle, "CBaseModelEntity", "m_flDecalHealHeightRate");

    // m_ConfigEntitiesToPropagateMaterialDecalsTo
    public NetworkedVector<CHandle<CBaseModelEntity>> ConfigEntitiesToPropagateMaterialDecalsTo => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseModelEntity>>>(this.Handle, "CBaseModelEntity", "m_ConfigEntitiesToPropagateMaterialDecalsTo");

    // m_vecViewOffset
    // MNetworkPriority "32"
    // MNetworkUserGroup "Player"
    public CNetworkViewOffsetVector ViewOffset => Schema.GetDeclaredClass<CNetworkViewOffsetVector>(this.Handle, "CBaseModelEntity", "m_vecViewOffset");

}

public partial class CBasePlayerController : CBaseEntity
{
    public CBasePlayerController (IntPtr pointer) : base(pointer) {}

    // m_nTickBase
    // MNetworkPriority "1"
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref UInt32 TickBase => ref Schema.GetRef<UInt32>(this.Handle, "CBasePlayerController", "m_nTickBase");

    // m_hPawn
    // MNetworkChangeCallback "OnPawnChanged"
    public CHandle<CBasePlayerPawn> Pawn => Schema.GetDeclaredClass<CHandle<CBasePlayerPawn>>(this.Handle, "CBasePlayerController", "m_hPawn");

    // m_iConnected
    // MNetworkChangeCallback "OnConnectionStateChanged"
    public ref PlayerConnectedState Connected => ref Schema.GetRef<PlayerConnectedState>(this.Handle, "CBasePlayerController", "m_iConnected");

    // m_iszPlayerName
    // MNetworkChangeCallback "OnPlayerControllerNameChanged"
    public string PlayerName
    {
        get { return Schema.GetString(this.Handle, "CBasePlayerController", "m_iszPlayerName"); }
        set { Schema.SetString(this.Handle, "CBasePlayerController", "m_iszPlayerName", value); }
    }

    // m_steamID
    // MNetworkEncoder "fixed64"
    // MNetworkChangeCallback "OnSteamIDChanged"
    public ref UInt64 SteamID => ref Schema.GetRef<UInt64>(this.Handle, "CBasePlayerController", "m_steamID");

    // m_iDesiredFOV
    public ref UInt32 DesiredFOV => ref Schema.GetRef<UInt32>(this.Handle, "CBasePlayerController", "m_iDesiredFOV");

}

public partial class CBasePlayerPawn : CBaseCombatCharacter
{
    public CBasePlayerPawn (IntPtr pointer) : base(pointer) {}

    // m_pWeaponServices
    public CPlayer_WeaponServices? WeaponServices => Schema.GetPointer<CPlayer_WeaponServices>(this.Handle, "CBasePlayerPawn", "m_pWeaponServices");

    // m_pItemServices
    public CPlayer_ItemServices? ItemServices => Schema.GetPointer<CPlayer_ItemServices>(this.Handle, "CBasePlayerPawn", "m_pItemServices");

    // m_pAutoaimServices
    // MNetworkUserGroup "LocalPlayerExclusive"
    public CPlayer_AutoaimServices? AutoaimServices => Schema.GetPointer<CPlayer_AutoaimServices>(this.Handle, "CBasePlayerPawn", "m_pAutoaimServices");

    // m_pObserverServices
    public CPlayer_ObserverServices? ObserverServices => Schema.GetPointer<CPlayer_ObserverServices>(this.Handle, "CBasePlayerPawn", "m_pObserverServices");

    // m_pWaterServices
    public CPlayer_WaterServices? WaterServices => Schema.GetPointer<CPlayer_WaterServices>(this.Handle, "CBasePlayerPawn", "m_pWaterServices");

    // m_pUseServices
    public CPlayer_UseServices? UseServices => Schema.GetPointer<CPlayer_UseServices>(this.Handle, "CBasePlayerPawn", "m_pUseServices");

    // m_pFlashlightServices
    public CPlayer_FlashlightServices? FlashlightServices => Schema.GetPointer<CPlayer_FlashlightServices>(this.Handle, "CBasePlayerPawn", "m_pFlashlightServices");

    // m_pCameraServices
    public CPlayer_CameraServices? CameraServices => Schema.GetPointer<CPlayer_CameraServices>(this.Handle, "CBasePlayerPawn", "m_pCameraServices");

    // m_pMovementServices
    public CPlayer_MovementServices? MovementServices => Schema.GetPointer<CPlayer_MovementServices>(this.Handle, "CBasePlayerPawn", "m_pMovementServices");

    // m_ServerViewAngleChanges
    // MNetworkUserGroup "LocalPlayerExclusive"
    public NetworkedVector<ViewAngleServerChange_t> ServerViewAngleChanges => Schema.GetDeclaredClass<NetworkedVector<ViewAngleServerChange_t>>(this.Handle, "CBasePlayerPawn", "m_ServerViewAngleChanges");

    // m_iHideHUD
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref UInt32 HideHUD => ref Schema.GetRef<UInt32>(this.Handle, "CBasePlayerPawn", "m_iHideHUD");

    // m_skybox3d
    // MNetworkUserGroup "LocalPlayerExclusive"
    public sky3dparams_t Skybox3d => Schema.GetDeclaredClass<sky3dparams_t>(this.Handle, "CBasePlayerPawn", "m_skybox3d");

    // m_flDeathTime
    public ref float DeathTime => ref Schema.GetRef<float>(this.Handle, "CBasePlayerPawn", "m_flDeathTime");

    // m_hController
    public CHandle<CBasePlayerController> Controller => Schema.GetDeclaredClass<CHandle<CBasePlayerController>>(this.Handle, "CBasePlayerPawn", "m_hController");

}

public partial class CBasePlayerWeapon : CEconEntity
{
    public CBasePlayerWeapon (IntPtr pointer) : base(pointer) {}

    // m_nNextPrimaryAttackTick
    // MNetworkUserGroup "LocalWeaponExclusive"
    // m_flNextPrimaryAttackTickRatio
    // MNetworkUserGroup "LocalWeaponExclusive"
    public ref float NextPrimaryAttackTickRatio => ref Schema.GetRef<float>(this.Handle, "CBasePlayerWeapon", "m_flNextPrimaryAttackTickRatio");

    // m_nNextSecondaryAttackTick
    // MNetworkUserGroup "LocalWeaponExclusive"
    // m_flNextSecondaryAttackTickRatio
    // MNetworkUserGroup "LocalWeaponExclusive"
    public ref float NextSecondaryAttackTickRatio => ref Schema.GetRef<float>(this.Handle, "CBasePlayerWeapon", "m_flNextSecondaryAttackTickRatio");

    // m_iClip1
    // MNetworkSerializer "minusone"
    // MNetworkPriority "32"
    public ref Int32 Clip1 => ref Schema.GetRef<Int32>(this.Handle, "CBasePlayerWeapon", "m_iClip1");

    // m_iClip2
    // MNetworkSerializer "minusone"
    // MNetworkUserGroup "LocalWeaponExclusive"
    public ref Int32 Clip2 => ref Schema.GetRef<Int32>(this.Handle, "CBasePlayerWeapon", "m_iClip2");

    // m_pReserveAmmo
    // MNetworkUserGroup "LocalWeaponExclusive"
    public Span<Int32> ReserveAmmo => Schema.GetFixedArray<Int32>(this.Handle, "CBasePlayerWeapon", "m_pReserveAmmo", 2);

}

public partial class CBaseProp : CBaseAnimGraph
{
    public CBaseProp (IntPtr pointer) : base(pointer) {}

}

public partial class CBasePropDoor : CDynamicProp
{
    public CBasePropDoor (IntPtr pointer) : base(pointer) {}

    // m_eDoorState
    public ref DoorState_t DoorState => ref Schema.GetRef<DoorState_t>(this.Handle, "CBasePropDoor", "m_eDoorState");

    // m_bLocked
    public ref bool Locked => ref Schema.GetRef<bool>(this.Handle, "CBasePropDoor", "m_bLocked");

    // m_closedPosition
    public Vector ClosedPosition => Schema.GetDeclaredClass<Vector>(this.Handle, "CBasePropDoor", "m_closedPosition");

    // m_closedAngles
    public QAngle ClosedAngles => Schema.GetDeclaredClass<QAngle>(this.Handle, "CBasePropDoor", "m_closedAngles");

    // m_hMaster
    public CHandle<CBasePropDoor> Master => Schema.GetDeclaredClass<CHandle<CBasePropDoor>>(this.Handle, "CBasePropDoor", "m_hMaster");

}

public partial class CBaseToggle : CBaseModelEntity
{
    public CBaseToggle (IntPtr pointer) : base(pointer) {}

}

public partial class CBaseTrigger : CBaseToggle
{
    public CBaseTrigger (IntPtr pointer) : base(pointer) {}

    // m_bDisabled
    public ref bool Disabled => ref Schema.GetRef<bool>(this.Handle, "CBaseTrigger", "m_bDisabled");

    // m_bClientSidePredicted
    public ref bool ClientSidePredicted => ref Schema.GetRef<bool>(this.Handle, "CBaseTrigger", "m_bClientSidePredicted");

}

public partial class CBaseViewModel : CBaseAnimGraph
{
    public CBaseViewModel (IntPtr pointer) : base(pointer) {}

    // m_nViewModelIndex
    public ref UInt32 ViewModelIndex => ref Schema.GetRef<UInt32>(this.Handle, "CBaseViewModel", "m_nViewModelIndex");

    // m_nAnimationParity
    public ref UInt32 AnimationParity => ref Schema.GetRef<UInt32>(this.Handle, "CBaseViewModel", "m_nAnimationParity");

    // m_flAnimationStartTime
    public ref float AnimationStartTime => ref Schema.GetRef<float>(this.Handle, "CBaseViewModel", "m_flAnimationStartTime");

    // m_hWeapon
    public CHandle<CBasePlayerWeapon> Weapon => Schema.GetDeclaredClass<CHandle<CBasePlayerWeapon>>(this.Handle, "CBaseViewModel", "m_hWeapon");

    // m_hControlPanel
    public CHandle<CBaseEntity> ControlPanel => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CBaseViewModel", "m_hControlPanel");

}

public partial class CBeam : CBaseModelEntity
{
    public CBeam (IntPtr pointer) : base(pointer) {}

    // m_flFrameRate
    // MNetworkBitCount "10"
    // MNetworkMinValue "-25.000000"
    // MNetworkMaxValue "25.000000"
    // MNetworkEncodeFlags "2"
    public ref float FrameRate => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_flFrameRate");

    // m_flHDRColorScale
    public ref float HDRColorScale => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_flHDRColorScale");

    // m_nNumBeamEnts
    public ref byte NumBeamEnts => ref Schema.GetRef<byte>(this.Handle, "CBeam", "m_nNumBeamEnts");

    // m_hBaseMaterial
    public CStrongHandle<InfoForResourceTypeIMaterial2> BaseMaterial => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CBeam", "m_hBaseMaterial");

    // m_nHaloIndex
    public CStrongHandle<InfoForResourceTypeIMaterial2> HaloIndex => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CBeam", "m_nHaloIndex");

    // m_nBeamType
    public ref BeamType_t BeamType => ref Schema.GetRef<BeamType_t>(this.Handle, "CBeam", "m_nBeamType");

    // m_nBeamFlags
    public ref UInt32 BeamFlags => ref Schema.GetRef<UInt32>(this.Handle, "CBeam", "m_nBeamFlags");

    // m_hAttachEntity
    public Span<CHandle<CBaseEntity>> AttachEntity => Schema.GetFixedArray<CHandle<CBaseEntity>>(this.Handle, "CBeam", "m_hAttachEntity", 10);

    // m_nAttachIndex
    public Span<AttachmentHandle_t> AttachIndex => Schema.GetFixedArray<AttachmentHandle_t>(this.Handle, "CBeam", "m_nAttachIndex", 10);

    // m_fWidth
    // MNetworkBitCount "10"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "102.300003"
    // MNetworkEncodeFlags "2"
    public ref float Width => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_fWidth");

    // m_fEndWidth
    // MNetworkBitCount "10"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "102.300003"
    // MNetworkEncodeFlags "2"
    public ref float EndWidth => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_fEndWidth");

    // m_fFadeLength
    public ref float FadeLength => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_fFadeLength");

    // m_fHaloScale
    public ref float HaloScale => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_fHaloScale");

    // m_fAmplitude
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "1"
    public ref float Amplitude => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_fAmplitude");

    // m_fStartFrame
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "256.000000"
    // MNetworkEncodeFlags "1"
    public ref float StartFrame => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_fStartFrame");

    // m_fSpeed
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public ref float Speed => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_fSpeed");

    // m_flFrame
    // MNetworkBitCount "20"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "256.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkPriority "32"
    public ref float Frame => ref Schema.GetRef<float>(this.Handle, "CBeam", "m_flFrame");

    // m_nClipStyle
    public ref BeamClipStyle_t ClipStyle => ref Schema.GetRef<BeamClipStyle_t>(this.Handle, "CBeam", "m_nClipStyle");

    // m_bTurnedOff
    public ref bool TurnedOff => ref Schema.GetRef<bool>(this.Handle, "CBeam", "m_bTurnedOff");

    // m_vecEndPos
    // MNetworkEncoder "coord"
    public Vector EndPos => Schema.GetDeclaredClass<Vector>(this.Handle, "CBeam", "m_vecEndPos");

}

public partial class CBodyComponent : CEntityComponent
{
    public CBodyComponent (IntPtr pointer) : base(pointer) {}

    // m_pSceneNode
    public CGameSceneNode? SceneNode => Schema.GetPointer<CGameSceneNode>(this.Handle, "CBodyComponent", "m_pSceneNode");

}

public partial class CBodyComponentBaseAnimGraph : CBodyComponentSkeletonInstance
{
    public CBodyComponentBaseAnimGraph (IntPtr pointer) : base(pointer) {}

    // m_animationController
    public CBaseAnimGraphController AnimationController => Schema.GetDeclaredClass<CBaseAnimGraphController>(this.Handle, "CBodyComponentBaseAnimGraph", "m_animationController");

}

public partial class CBodyComponentBaseModelEntity : CBodyComponentSkeletonInstance
{
    public CBodyComponentBaseModelEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CBodyComponentPoint : CBodyComponent
{
    public CBodyComponentPoint (IntPtr pointer) : base(pointer) {}

    // m_sceneNode
    public CGameSceneNode SceneNode => Schema.GetDeclaredClass<CGameSceneNode>(this.Handle, "CBodyComponentPoint", "m_sceneNode");

}

public partial class CBodyComponentSkeletonInstance : CBodyComponent
{
    public CBodyComponentSkeletonInstance (IntPtr pointer) : base(pointer) {}

    // m_skeletonInstance
    public CSkeletonInstance SkeletonInstance => Schema.GetDeclaredClass<CSkeletonInstance>(this.Handle, "CBodyComponentSkeletonInstance", "m_skeletonInstance");

}

public partial class CBombTarget : CBaseTrigger
{
    public CBombTarget (IntPtr pointer) : base(pointer) {}

    // m_bBombPlantedHere
    public ref bool BombPlantedHere => ref Schema.GetRef<bool>(this.Handle, "CBombTarget", "m_bBombPlantedHere");

}

public partial class CBreachCharge : CCSWeaponBase
{
    public CBreachCharge (IntPtr pointer) : base(pointer) {}

}

public partial class CBreachChargeProjectile : CBaseGrenade
{
    public CBreachChargeProjectile (IntPtr pointer) : base(pointer) {}

}

public partial class CBreakable : CBaseModelEntity
{
    public CBreakable (IntPtr pointer) : base(pointer) {}

}

public partial class CBreakableProp : CBaseProp
{
    public CBreakableProp (IntPtr pointer) : base(pointer) {}

    // m_noGhostCollision
    public ref bool NoGhostCollision => ref Schema.GetRef<bool>(this.Handle, "CBreakableProp", "m_noGhostCollision");

}

public partial class CBumpMine : CCSWeaponBase
{
    public CBumpMine (IntPtr pointer) : base(pointer) {}

}

public partial class CBumpMineProjectile : CBaseGrenade
{
    public CBumpMineProjectile (IntPtr pointer) : base(pointer) {}

}

public partial class CC4 : CCSWeaponBase
{
    public CC4 (IntPtr pointer) : base(pointer) {}

    // m_bStartedArming
    public ref bool StartedArming => ref Schema.GetRef<bool>(this.Handle, "CC4", "m_bStartedArming");

    // m_fArmedTime
    public ref float ArmedTime => ref Schema.GetRef<float>(this.Handle, "CC4", "m_fArmedTime");

    // m_bBombPlacedAnimation
    public ref bool BombPlacedAnimation => ref Schema.GetRef<bool>(this.Handle, "CC4", "m_bBombPlacedAnimation");

    // m_bIsPlantingViaUse
    public ref bool IsPlantingViaUse => ref Schema.GetRef<bool>(this.Handle, "CC4", "m_bIsPlantingViaUse");

    // m_entitySpottedState
    public EntitySpottedState_t EntitySpottedState => Schema.GetDeclaredClass<EntitySpottedState_t>(this.Handle, "CC4", "m_entitySpottedState");

}

public partial class CChicken : CDynamicProp
{
    public CChicken (IntPtr pointer) : base(pointer) {}

    // m_AttributeManager
    public CAttributeContainer AttributeManager => Schema.GetDeclaredClass<CAttributeContainer>(this.Handle, "CChicken", "m_AttributeManager");

    // m_OriginalOwnerXuidLow
    public ref UInt32 OriginalOwnerXuidLow => ref Schema.GetRef<UInt32>(this.Handle, "CChicken", "m_OriginalOwnerXuidLow");

    // m_OriginalOwnerXuidHigh
    public ref UInt32 OriginalOwnerXuidHigh => ref Schema.GetRef<UInt32>(this.Handle, "CChicken", "m_OriginalOwnerXuidHigh");

    // m_jumpedThisFrame
    public ref bool JumpedThisFrame => ref Schema.GetRef<bool>(this.Handle, "CChicken", "m_jumpedThisFrame");

    // m_leader
    public CHandle<CCSPlayerPawn> Leader => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CChicken", "m_leader");

}

public partial class CCollisionProperty : NativeObject
{
    public CCollisionProperty (IntPtr pointer) : base(pointer) {}

    // m_collisionAttribute
    // MNetworkChangeCallback "CollisionAttributeChanged"
    public VPhysicsCollisionAttribute_t CollisionAttribute => Schema.GetDeclaredClass<VPhysicsCollisionAttribute_t>(this.Handle, "CCollisionProperty", "m_collisionAttribute");

    // m_vecMins
    // MNetworkChangeCallback "OnUpdateOBB"
    public Vector Mins => Schema.GetDeclaredClass<Vector>(this.Handle, "CCollisionProperty", "m_vecMins");

    // m_vecMaxs
    // MNetworkChangeCallback "OnUpdateOBB"
    public Vector Maxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CCollisionProperty", "m_vecMaxs");

    // m_usSolidFlags
    // MNetworkChangeCallback "OnUpdateSolidFlags"
    public ref byte SolidFlags => ref Schema.GetRef<byte>(this.Handle, "CCollisionProperty", "m_usSolidFlags");

    // m_nSolidType
    // MNetworkChangeCallback "OnUpdateSolidType"
    public ref SolidType_t SolidType => ref Schema.GetRef<SolidType_t>(this.Handle, "CCollisionProperty", "m_nSolidType");

    // m_triggerBloat
    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public ref byte TriggerBloat => ref Schema.GetRef<byte>(this.Handle, "CCollisionProperty", "m_triggerBloat");

    // m_nSurroundType
    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public ref SurroundingBoundsType_t SurroundType => ref Schema.GetRef<SurroundingBoundsType_t>(this.Handle, "CCollisionProperty", "m_nSurroundType");

    // m_CollisionGroup
    public ref byte CollisionGroup => ref Schema.GetRef<byte>(this.Handle, "CCollisionProperty", "m_CollisionGroup");

    // m_nEnablePhysics
    // MNetworkChangeCallback "OnUpdateEnablePhysics"
    public ref byte EnablePhysics => ref Schema.GetRef<byte>(this.Handle, "CCollisionProperty", "m_nEnablePhysics");

    // m_vecSpecifiedSurroundingMins
    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public Vector SpecifiedSurroundingMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CCollisionProperty", "m_vecSpecifiedSurroundingMins");

    // m_vecSpecifiedSurroundingMaxs
    // MNetworkChangeCallback "MarkSurroundingBoundsDirty"
    public Vector SpecifiedSurroundingMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CCollisionProperty", "m_vecSpecifiedSurroundingMaxs");

    // m_vCapsuleCenter1
    public Vector CapsuleCenter1 => Schema.GetDeclaredClass<Vector>(this.Handle, "CCollisionProperty", "m_vCapsuleCenter1");

    // m_vCapsuleCenter2
    public Vector CapsuleCenter2 => Schema.GetDeclaredClass<Vector>(this.Handle, "CCollisionProperty", "m_vCapsuleCenter2");

    // m_flCapsuleRadius
    public ref float CapsuleRadius => ref Schema.GetRef<float>(this.Handle, "CCollisionProperty", "m_flCapsuleRadius");

}

public partial class CColorCorrection : CBaseEntity
{
    public CColorCorrection (IntPtr pointer) : base(pointer) {}

    // m_flFadeInDuration
    public ref float FadeInDuration => ref Schema.GetRef<float>(this.Handle, "CColorCorrection", "m_flFadeInDuration");

    // m_flFadeOutDuration
    public ref float FadeOutDuration => ref Schema.GetRef<float>(this.Handle, "CColorCorrection", "m_flFadeOutDuration");

    // m_flMaxWeight
    public ref float MaxWeight => ref Schema.GetRef<float>(this.Handle, "CColorCorrection", "m_flMaxWeight");

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CColorCorrection", "m_bEnabled");

    // m_bMaster
    public ref bool Master => ref Schema.GetRef<bool>(this.Handle, "CColorCorrection", "m_bMaster");

    // m_bClientSide
    public ref bool ClientSide => ref Schema.GetRef<bool>(this.Handle, "CColorCorrection", "m_bClientSide");

    // m_bExclusive
    public ref bool Exclusive => ref Schema.GetRef<bool>(this.Handle, "CColorCorrection", "m_bExclusive");

    // m_MinFalloff
    public ref float MinFalloff => ref Schema.GetRef<float>(this.Handle, "CColorCorrection", "m_MinFalloff");

    // m_MaxFalloff
    public ref float MaxFalloff => ref Schema.GetRef<float>(this.Handle, "CColorCorrection", "m_MaxFalloff");

    // m_flCurWeight
    public ref float CurWeight => ref Schema.GetRef<float>(this.Handle, "CColorCorrection", "m_flCurWeight");

    // m_netlookupFilename
    public string NetlookupFilename
    {
        get { return Schema.GetString(this.Handle, "CColorCorrection", "m_netlookupFilename"); }
        set { Schema.SetString(this.Handle, "CColorCorrection", "m_netlookupFilename", value); }
    }

}

public partial class CColorCorrectionVolume : CBaseTrigger
{
    public CColorCorrectionVolume (IntPtr pointer) : base(pointer) {}

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CColorCorrectionVolume", "m_bEnabled");

    // m_MaxWeight
    public ref float MaxWeight => ref Schema.GetRef<float>(this.Handle, "CColorCorrectionVolume", "m_MaxWeight");

    // m_FadeDuration
    public ref float FadeDuration => ref Schema.GetRef<float>(this.Handle, "CColorCorrectionVolume", "m_FadeDuration");

    // m_Weight
    public ref float Weight => ref Schema.GetRef<float>(this.Handle, "CColorCorrectionVolume", "m_Weight");

    // m_lookupFilename
    public string LookupFilename
    {
        get { return Schema.GetString(this.Handle, "CColorCorrectionVolume", "m_lookupFilename"); }
        set { Schema.SetString(this.Handle, "CColorCorrectionVolume", "m_lookupFilename", value); }
    }

}

public partial class CCSGameModeRules : NativeObject
{
    public CCSGameModeRules (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGameModeRules_Deathmatch : CCSGameModeRules
{
    public CCSGameModeRules_Deathmatch (IntPtr pointer) : base(pointer) {}

    // m_flDMBonusStartTime
    public ref float DMBonusStartTime => ref Schema.GetRef<float>(this.Handle, "CCSGameModeRules_Deathmatch", "m_flDMBonusStartTime");

    // m_flDMBonusTimeLength
    public ref float DMBonusTimeLength => ref Schema.GetRef<float>(this.Handle, "CCSGameModeRules_Deathmatch", "m_flDMBonusTimeLength");

    // m_nDMBonusWeaponLoadoutSlot
    public ref Int16 DMBonusWeaponLoadoutSlot => ref Schema.GetRef<Int16>(this.Handle, "CCSGameModeRules_Deathmatch", "m_nDMBonusWeaponLoadoutSlot");

}

public partial class CCSGameModeRules_Noop : CCSGameModeRules
{
    public CCSGameModeRules_Noop (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGameModeRules_Scripted : CCSGameModeRules
{
    public CCSGameModeRules_Scripted (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGameRules : CTeamplayRules
{
    public CCSGameRules (IntPtr pointer) : base(pointer) {}

    // m_bFreezePeriod
    public ref bool FreezePeriod => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bFreezePeriod");

    // m_bWarmupPeriod
    public ref bool WarmupPeriod => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bWarmupPeriod");

    // m_fWarmupPeriodEnd
    public ref float WarmupPeriodEnd => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_fWarmupPeriodEnd");

    // m_fWarmupPeriodStart
    public ref float WarmupPeriodStart => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_fWarmupPeriodStart");

    // m_nTotalPausedTicks
    public ref Int32 TotalPausedTicks => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nTotalPausedTicks");

    // m_nPauseStartTick
    public ref Int32 PauseStartTick => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nPauseStartTick");

    // m_bServerPaused
    public ref bool ServerPaused => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bServerPaused");

    // m_bGamePaused
    public ref bool GamePaused => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bGamePaused");

    // m_bTerroristTimeOutActive
    public ref bool TerroristTimeOutActive => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bTerroristTimeOutActive");

    // m_bCTTimeOutActive
    public ref bool CTTimeOutActive => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bCTTimeOutActive");

    // m_flTerroristTimeOutRemaining
    public ref float TerroristTimeOutRemaining => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_flTerroristTimeOutRemaining");

    // m_flCTTimeOutRemaining
    public ref float CTTimeOutRemaining => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_flCTTimeOutRemaining");

    // m_nTerroristTimeOuts
    public ref Int32 TerroristTimeOuts => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nTerroristTimeOuts");

    // m_nCTTimeOuts
    public ref Int32 CTTimeOuts => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nCTTimeOuts");

    // m_bTechnicalTimeOut
    public ref bool TechnicalTimeOut => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bTechnicalTimeOut");

    // m_bMatchWaitingForResume
    public ref bool MatchWaitingForResume => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bMatchWaitingForResume");

    // m_iRoundTime
    public ref Int32 RoundTime => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_iRoundTime");

    // m_fMatchStartTime
    public ref float MatchStartTime => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_fMatchStartTime");

    // m_fRoundStartTime
    public ref float RoundStartTime => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_fRoundStartTime");

    // m_flRestartRoundTime
    public ref float RestartRoundTime => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_flRestartRoundTime");

    // m_bGameRestart
    public ref bool GameRestart => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bGameRestart");

    // m_flGameStartTime
    public ref float GameStartTime => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_flGameStartTime");

    // m_timeUntilNextPhaseStarts
    public ref float TimeUntilNextPhaseStarts => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_timeUntilNextPhaseStarts");

    // m_gamePhase
    // MNetworkChangeCallback "OnGamePhaseChanged"
    public ref Int32 GamePhase => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_gamePhase");

    // m_totalRoundsPlayed
    public ref Int32 TotalRoundsPlayed => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_totalRoundsPlayed");

    // m_nRoundsPlayedThisPhase
    public ref Int32 RoundsPlayedThisPhase => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nRoundsPlayedThisPhase");

    // m_nOvertimePlaying
    public ref Int32 OvertimePlaying => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nOvertimePlaying");

    // m_iHostagesRemaining
    public ref Int32 HostagesRemaining => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_iHostagesRemaining");

    // m_bAnyHostageReached
    public ref bool AnyHostageReached => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bAnyHostageReached");

    // m_bMapHasBombTarget
    public ref bool MapHasBombTarget => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bMapHasBombTarget");

    // m_bMapHasRescueZone
    public ref bool MapHasRescueZone => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bMapHasRescueZone");

    // m_bMapHasBuyZone
    public ref bool MapHasBuyZone => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bMapHasBuyZone");

    // m_bIsQueuedMatchmaking
    public ref bool IsQueuedMatchmaking => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bIsQueuedMatchmaking");

    // m_nQueuedMatchmakingMode
    public ref Int32 QueuedMatchmakingMode => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nQueuedMatchmakingMode");

    // m_bIsValveDS
    public ref bool IsValveDS => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bIsValveDS");

    // m_bLogoMap
    public ref bool LogoMap => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bLogoMap");

    // m_bPlayAllStepSoundsOnServer
    public ref bool PlayAllStepSoundsOnServer => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bPlayAllStepSoundsOnServer");

    // m_iSpectatorSlotCount
    public ref Int32 SpectatorSlotCount => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_iSpectatorSlotCount");

    // m_MatchDevice
    public ref Int32 MatchDevice => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_MatchDevice");

    // m_bHasMatchStarted
    public ref bool HasMatchStarted => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bHasMatchStarted");

    // m_nNextMapInMapgroup
    public ref Int32 NextMapInMapgroup => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nNextMapInMapgroup");

    // m_szTournamentEventName
    public string TournamentEventName
    {
        get { return Schema.GetString(this.Handle, "CCSGameRules", "m_szTournamentEventName"); }
        set { Schema.SetString(this.Handle, "CCSGameRules", "m_szTournamentEventName", value); }
    }

    // m_szTournamentEventStage
    public string TournamentEventStage
    {
        get { return Schema.GetString(this.Handle, "CCSGameRules", "m_szTournamentEventStage"); }
        set { Schema.SetString(this.Handle, "CCSGameRules", "m_szTournamentEventStage", value); }
    }

    // m_szMatchStatTxt
    public string MatchStatTxt
    {
        get { return Schema.GetString(this.Handle, "CCSGameRules", "m_szMatchStatTxt"); }
        set { Schema.SetString(this.Handle, "CCSGameRules", "m_szMatchStatTxt", value); }
    }

    // m_szTournamentPredictionsTxt
    public string TournamentPredictionsTxt
    {
        get { return Schema.GetString(this.Handle, "CCSGameRules", "m_szTournamentPredictionsTxt"); }
        set { Schema.SetString(this.Handle, "CCSGameRules", "m_szTournamentPredictionsTxt", value); }
    }

    // m_nTournamentPredictionsPct
    public ref Int32 TournamentPredictionsPct => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nTournamentPredictionsPct");

    // m_flCMMItemDropRevealStartTime
    public ref float CMMItemDropRevealStartTime => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_flCMMItemDropRevealStartTime");

    // m_flCMMItemDropRevealEndTime
    public ref float CMMItemDropRevealEndTime => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_flCMMItemDropRevealEndTime");

    // m_bIsDroppingItems
    public ref bool IsDroppingItems => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bIsDroppingItems");

    // m_bIsQuestEligible
    public ref bool IsQuestEligible => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bIsQuestEligible");

    // m_bIsHltvActive
    public ref bool IsHltvActive => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bIsHltvActive");

    // m_nGuardianModeWaveNumber
    public ref Int32 GuardianModeWaveNumber => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nGuardianModeWaveNumber");

    // m_nGuardianModeSpecialKillsRemaining
    public ref Int32 GuardianModeSpecialKillsRemaining => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nGuardianModeSpecialKillsRemaining");

    // m_nGuardianModeSpecialWeaponNeeded
    public ref Int32 GuardianModeSpecialWeaponNeeded => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nGuardianModeSpecialWeaponNeeded");

    // m_numGlobalGiftsGiven
    public ref UInt32 NumGlobalGiftsGiven => ref Schema.GetRef<UInt32>(this.Handle, "CCSGameRules", "m_numGlobalGiftsGiven");

    // m_numGlobalGifters
    public ref UInt32 NumGlobalGifters => ref Schema.GetRef<UInt32>(this.Handle, "CCSGameRules", "m_numGlobalGifters");

    // m_numGlobalGiftsPeriodSeconds
    public ref UInt32 NumGlobalGiftsPeriodSeconds => ref Schema.GetRef<UInt32>(this.Handle, "CCSGameRules", "m_numGlobalGiftsPeriodSeconds");

    // m_arrFeaturedGiftersAccounts
    public Span<UInt32> FeaturedGiftersAccounts => Schema.GetFixedArray<UInt32>(this.Handle, "CCSGameRules", "m_arrFeaturedGiftersAccounts", 4);

    // m_arrFeaturedGiftersGifts
    public Span<UInt32> FeaturedGiftersGifts => Schema.GetFixedArray<UInt32>(this.Handle, "CCSGameRules", "m_arrFeaturedGiftersGifts", 4);

    // m_arrProhibitedItemIndices
    public Span<UInt16> ProhibitedItemIndices => Schema.GetFixedArray<UInt16>(this.Handle, "CCSGameRules", "m_arrProhibitedItemIndices", 100);

    // m_arrTournamentActiveCasterAccounts
    public Span<UInt32> TournamentActiveCasterAccounts => Schema.GetFixedArray<UInt32>(this.Handle, "CCSGameRules", "m_arrTournamentActiveCasterAccounts", 4);

    // m_numBestOfMaps
    public ref Int32 NumBestOfMaps => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_numBestOfMaps");

    // m_nHalloweenMaskListSeed
    public ref Int32 HalloweenMaskListSeed => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nHalloweenMaskListSeed");

    // m_bBombDropped
    public ref bool BombDropped => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bBombDropped");

    // m_bBombPlanted
    public ref bool BombPlanted => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bBombPlanted");

    // m_iRoundWinStatus
    public ref Int32 RoundWinStatus => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_iRoundWinStatus");

    // m_eRoundWinReason
    public ref Int32 RoundWinReason => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_eRoundWinReason");

    // m_bTCantBuy
    public ref bool TCantBuy => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bTCantBuy");

    // m_bCTCantBuy
    public ref bool CTCantBuy => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bCTCantBuy");

    // m_flGuardianBuyUntilTime
    public ref float GuardianBuyUntilTime => ref Schema.GetRef<float>(this.Handle, "CCSGameRules", "m_flGuardianBuyUntilTime");

    // m_iMatchStats_RoundResults
    public Span<Int32> MatchStats_RoundResults => Schema.GetFixedArray<Int32>(this.Handle, "CCSGameRules", "m_iMatchStats_RoundResults", 30);

    // m_iMatchStats_PlayersAlive_CT
    public Span<Int32> MatchStats_PlayersAlive_CT => Schema.GetFixedArray<Int32>(this.Handle, "CCSGameRules", "m_iMatchStats_PlayersAlive_CT", 30);

    // m_iMatchStats_PlayersAlive_T
    public Span<Int32> MatchStats_PlayersAlive_T => Schema.GetFixedArray<Int32>(this.Handle, "CCSGameRules", "m_iMatchStats_PlayersAlive_T", 30);

    // m_TeamRespawnWaveTimes
    public Span<float> TeamRespawnWaveTimes => Schema.GetFixedArray<float>(this.Handle, "CCSGameRules", "m_TeamRespawnWaveTimes", 32);

    // m_flNextRespawnWave
    public Span<float> NextRespawnWave => Schema.GetFixedArray<float>(this.Handle, "CCSGameRules", "m_flNextRespawnWave", 32);

    // m_nServerQuestID
    public ref Int32 ServerQuestID => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nServerQuestID");

    // m_vMinimapMins
    public Vector MinimapMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CCSGameRules", "m_vMinimapMins");

    // m_vMinimapMaxs
    public Vector MinimapMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CCSGameRules", "m_vMinimapMaxs");

    // m_MinimapVerticalSectionHeights
    public Span<float> MinimapVerticalSectionHeights => Schema.GetFixedArray<float>(this.Handle, "CCSGameRules", "m_MinimapVerticalSectionHeights", 8);

    // m_nEndMatchMapGroupVoteTypes
    public Span<Int32> EndMatchMapGroupVoteTypes => Schema.GetFixedArray<Int32>(this.Handle, "CCSGameRules", "m_nEndMatchMapGroupVoteTypes", 10);

    // m_nEndMatchMapGroupVoteOptions
    public Span<Int32> EndMatchMapGroupVoteOptions => Schema.GetFixedArray<Int32>(this.Handle, "CCSGameRules", "m_nEndMatchMapGroupVoteOptions", 10);

    // m_nEndMatchMapVoteWinner
    public ref Int32 EndMatchMapVoteWinner => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nEndMatchMapVoteWinner");

    // m_iNumConsecutiveCTLoses
    public ref Int32 NumConsecutiveCTLoses => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_iNumConsecutiveCTLoses");

    // m_iNumConsecutiveTerroristLoses
    public ref Int32 NumConsecutiveTerroristLoses => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_iNumConsecutiveTerroristLoses");

    // m_bMatchAbortedDueToPlayerBan
    public ref bool MatchAbortedDueToPlayerBan => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bMatchAbortedDueToPlayerBan");

    // m_pGameModeRules
    // MNetworkPolymorphic
    public CCSGameModeRules? GameModeRules => Schema.GetPointer<CCSGameModeRules>(this.Handle, "CCSGameRules", "m_pGameModeRules");

    // m_RetakeRules
    public CRetakeGameRules RetakeRules => Schema.GetDeclaredClass<CRetakeGameRules>(this.Handle, "CCSGameRules", "m_RetakeRules");

    // m_nMatchEndCount
    // MNetworkChangeCallback "OnMatchEndCountChanged"
    public ref byte MatchEndCount => ref Schema.GetRef<byte>(this.Handle, "CCSGameRules", "m_nMatchEndCount");

    // m_nTTeamIntroVariant
    public ref Int32 TTeamIntroVariant => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nTTeamIntroVariant");

    // m_nCTTeamIntroVariant
    public ref Int32 CTTeamIntroVariant => ref Schema.GetRef<Int32>(this.Handle, "CCSGameRules", "m_nCTTeamIntroVariant");

    // m_bTeamIntroPeriod
    // MNetworkChangeCallback "OnTeamIntroPeriodChanged"
    public ref bool TeamIntroPeriod => ref Schema.GetRef<bool>(this.Handle, "CCSGameRules", "m_bTeamIntroPeriod");

}

public partial class CCSGameRulesProxy : CGameRulesProxy
{
    public CCSGameRulesProxy (IntPtr pointer) : base(pointer) {}

    // m_pGameRules
    // MNetworkTypeAlias "CCSGameRules*"
    // MNetworkPriority "32"
    public CCSGameRules? GameRules => Schema.GetPointer<CCSGameRules>(this.Handle, "CCSGameRulesProxy", "m_pGameRules");

}

public partial class CCSGO_TeamIntroCharacterPosition : CCSGO_TeamPreviewCharacterPosition
{
    public CCSGO_TeamIntroCharacterPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGO_TeamIntroCounterTerroristPosition : CCSGO_TeamIntroCharacterPosition
{
    public CCSGO_TeamIntroCounterTerroristPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGO_TeamIntroTerroristPosition : CCSGO_TeamIntroCharacterPosition
{
    public CCSGO_TeamIntroTerroristPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGO_TeamPreviewCharacterPosition : CBaseEntity
{
    public CCSGO_TeamPreviewCharacterPosition (IntPtr pointer) : base(pointer) {}

    // m_nVariant
    public ref Int32 Variant => ref Schema.GetRef<Int32>(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_nVariant");

    // m_nRandom
    public ref Int32 Random => ref Schema.GetRef<Int32>(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_nRandom");

    // m_nOrdinal
    public ref Int32 Ordinal => ref Schema.GetRef<Int32>(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_nOrdinal");

    // m_sWeaponName
    public string WeaponName
    {
        get { return Schema.GetUtf8String(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_sWeaponName"); }
        set { Schema.SetString(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_sWeaponName", value); }
    }

    // m_xuid
    public ref UInt64 Xuid => ref Schema.GetRef<UInt64>(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_xuid");

    // m_agentItem
    public CEconItemView AgentItem => Schema.GetDeclaredClass<CEconItemView>(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_agentItem");

    // m_glovesItem
    public CEconItemView GlovesItem => Schema.GetDeclaredClass<CEconItemView>(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_glovesItem");

    // m_weaponItem
    public CEconItemView WeaponItem => Schema.GetDeclaredClass<CEconItemView>(this.Handle, "CCSGO_TeamPreviewCharacterPosition", "m_weaponItem");

}

public partial class CCSGO_TeamSelectCharacterPosition : CCSGO_TeamPreviewCharacterPosition
{
    public CCSGO_TeamSelectCharacterPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGO_TeamSelectCounterTerroristPosition : CCSGO_TeamSelectCharacterPosition
{
    public CCSGO_TeamSelectCounterTerroristPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGO_TeamSelectTerroristPosition : CCSGO_TeamSelectCharacterPosition
{
    public CCSGO_TeamSelectTerroristPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGO_WingmanIntroCharacterPosition : CCSGO_TeamIntroCharacterPosition
{
    public CCSGO_WingmanIntroCharacterPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGO_WingmanIntroCounterTerroristPosition : CCSGO_WingmanIntroCharacterPosition
{
    public CCSGO_WingmanIntroCounterTerroristPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGO_WingmanIntroTerroristPosition : CCSGO_WingmanIntroCharacterPosition
{
    public CCSGO_WingmanIntroTerroristPosition (IntPtr pointer) : base(pointer) {}

}

public partial class CCSGOViewModel : CPredictedViewModel
{
    public CCSGOViewModel (IntPtr pointer) : base(pointer) {}

    // m_bShouldIgnoreOffsetAndAccuracy
    public ref bool ShouldIgnoreOffsetAndAccuracy => ref Schema.GetRef<bool>(this.Handle, "CCSGOViewModel", "m_bShouldIgnoreOffsetAndAccuracy");

    // m_nWeaponParity
    public ref UInt32 WeaponParity => ref Schema.GetRef<UInt32>(this.Handle, "CCSGOViewModel", "m_nWeaponParity");

}

public partial class CCSMinimapBoundary : CBaseEntity
{
    public CCSMinimapBoundary (IntPtr pointer) : base(pointer) {}

}

public partial class CCSObserver_CameraServices : CCSPlayerBase_CameraServices
{
    public CCSObserver_CameraServices (IntPtr pointer) : base(pointer) {}

}

public partial class CCSObserver_MovementServices : CPlayer_MovementServices
{
    public CCSObserver_MovementServices (IntPtr pointer) : base(pointer) {}

}

public partial class CCSObserver_ObserverServices : CPlayer_ObserverServices
{
    public CCSObserver_ObserverServices (IntPtr pointer) : base(pointer) {}

}

public partial class CCSObserver_UseServices : CPlayer_UseServices
{
    public CCSObserver_UseServices (IntPtr pointer) : base(pointer) {}

}

public partial class CCSObserver_ViewModelServices : CPlayer_ViewModelServices
{
    public CCSObserver_ViewModelServices (IntPtr pointer) : base(pointer) {}

}

public partial class CCSObserverPawn : CCSPlayerPawnBase
{
    public CCSObserverPawn (IntPtr pointer) : base(pointer) {}

}

public partial class CCSPlayer_ActionTrackingServices : CPlayerPawnComponent
{
    public CCSPlayer_ActionTrackingServices (IntPtr pointer) : base(pointer) {}

    // m_bIsRescuing
    public ref bool IsRescuing => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_ActionTrackingServices", "m_bIsRescuing");

    // m_weaponPurchasesThisMatch
    public WeaponPurchaseTracker_t WeaponPurchasesThisMatch => Schema.GetDeclaredClass<WeaponPurchaseTracker_t>(this.Handle, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisMatch");

    // m_weaponPurchasesThisRound
    public WeaponPurchaseTracker_t WeaponPurchasesThisRound => Schema.GetDeclaredClass<WeaponPurchaseTracker_t>(this.Handle, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisRound");

}

public partial class CCSPlayer_BulletServices : CPlayerPawnComponent
{
    public CCSPlayer_BulletServices (IntPtr pointer) : base(pointer) {}

    // m_totalHitsOnServer
    public ref Int32 TotalHitsOnServer => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayer_BulletServices", "m_totalHitsOnServer");

}

public partial class CCSPlayer_BuyServices : CPlayerPawnComponent
{
    public CCSPlayer_BuyServices (IntPtr pointer) : base(pointer) {}

    // m_vecSellbackPurchaseEntries
    public NetworkedVector<SellbackPurchaseEntry_t> SellbackPurchaseEntries => Schema.GetDeclaredClass<NetworkedVector<SellbackPurchaseEntry_t>>(this.Handle, "CCSPlayer_BuyServices", "m_vecSellbackPurchaseEntries");

}

public partial class CCSPlayer_CameraServices : CCSPlayerBase_CameraServices
{
    public CCSPlayer_CameraServices (IntPtr pointer) : base(pointer) {}

}

public partial class CCSPlayer_HostageServices : CPlayerPawnComponent
{
    public CCSPlayer_HostageServices (IntPtr pointer) : base(pointer) {}

    // m_hCarriedHostage
    public CHandle<CBaseEntity> CarriedHostage => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CCSPlayer_HostageServices", "m_hCarriedHostage");

    // m_hCarriedHostageProp
    public CHandle<CBaseEntity> CarriedHostageProp => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CCSPlayer_HostageServices", "m_hCarriedHostageProp");

}

public partial class CCSPlayer_ItemServices : CPlayer_ItemServices
{
    public CCSPlayer_ItemServices (IntPtr pointer) : base(pointer) {}

    // m_bHasDefuser
    public ref bool HasDefuser => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_ItemServices", "m_bHasDefuser");

    // m_bHasHelmet
    public ref bool HasHelmet => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_ItemServices", "m_bHasHelmet");

    // m_bHasHeavyArmor
    public ref bool HasHeavyArmor => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_ItemServices", "m_bHasHeavyArmor");

}

public partial class CCSPlayer_MovementServices : CPlayer_MovementServices_Humanoid
{
    public CCSPlayer_MovementServices (IntPtr pointer) : base(pointer) {}

    // m_flMaxFallVelocity
    public ref float MaxFallVelocity => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flMaxFallVelocity");

    // m_vecLadderNormal
    // MNetworkEncoder "normal"
    public Vector LadderNormal => Schema.GetDeclaredClass<Vector>(this.Handle, "CCSPlayer_MovementServices", "m_vecLadderNormal");

    // m_nLadderSurfacePropIndex
    public ref Int32 LadderSurfacePropIndex => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayer_MovementServices", "m_nLadderSurfacePropIndex");

    // m_flDuckAmount
    public ref float DuckAmount => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flDuckAmount");

    // m_flDuckSpeed
    public ref float DuckSpeed => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flDuckSpeed");

    // m_bDuckOverride
    public ref bool DuckOverride => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_MovementServices", "m_bDuckOverride");

    // m_bDesiresDuck
    public ref bool DesiresDuck => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_MovementServices", "m_bDesiresDuck");

    // m_nDuckTimeMsecs
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkPriority "32"
    public ref UInt32 DuckTimeMsecs => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayer_MovementServices", "m_nDuckTimeMsecs");

    // m_nDuckJumpTimeMsecs
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref UInt32 DuckJumpTimeMsecs => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayer_MovementServices", "m_nDuckJumpTimeMsecs");

    // m_nJumpTimeMsecs
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref UInt32 JumpTimeMsecs => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayer_MovementServices", "m_nJumpTimeMsecs");

    // m_flLastDuckTime
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref float LastDuckTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flLastDuckTime");

    // m_bOldJumpPressed
    public ref bool OldJumpPressed => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_MovementServices", "m_bOldJumpPressed");

    // m_flJumpUntil
    public ref float JumpUntil => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flJumpUntil");

    // m_flJumpVel
    public ref float JumpVel => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flJumpVel");

    // m_fStashGrenadeParameterWhen
    public ref float StashGrenadeParameterWhen => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_fStashGrenadeParameterWhen");

    // m_nButtonDownMaskPrev
    public ref UInt64 ButtonDownMaskPrev => ref Schema.GetRef<UInt64>(this.Handle, "CCSPlayer_MovementServices", "m_nButtonDownMaskPrev");

    // m_flOffsetTickCompleteTime
    public ref float OffsetTickCompleteTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flOffsetTickCompleteTime");

    // m_flOffsetTickStashedSpeed
    public ref float OffsetTickStashedSpeed => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flOffsetTickStashedSpeed");

    // m_flStamina
    public ref float Stamina => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_MovementServices", "m_flStamina");

}

public partial class CCSPlayer_PingServices : CPlayerPawnComponent
{
    public CCSPlayer_PingServices (IntPtr pointer) : base(pointer) {}

    // m_hPlayerPing
    public CHandle<CBaseEntity> PlayerPing => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CCSPlayer_PingServices", "m_hPlayerPing");

}

public partial class CCSPlayer_UseServices : CPlayer_UseServices
{
    public CCSPlayer_UseServices (IntPtr pointer) : base(pointer) {}

}

public partial class CCSPlayer_ViewModelServices : CPlayer_ViewModelServices
{
    public CCSPlayer_ViewModelServices (IntPtr pointer) : base(pointer) {}

    // m_hViewModel
    public Span<CHandle<CBaseViewModel>> ViewModel => Schema.GetFixedArray<CHandle<CBaseViewModel>>(this.Handle, "CCSPlayer_ViewModelServices", "m_hViewModel", 3);

}

public partial class CCSPlayer_WaterServices : CPlayer_WaterServices
{
    public CCSPlayer_WaterServices (IntPtr pointer) : base(pointer) {}

}

public partial class CCSPlayer_WeaponServices : CPlayer_WeaponServices
{
    public CCSPlayer_WeaponServices (IntPtr pointer) : base(pointer) {}

    // m_flNextAttack
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref float NextAttack => ref Schema.GetRef<float>(this.Handle, "CCSPlayer_WeaponServices", "m_flNextAttack");

    // m_bIsLookingAtWeapon
    public ref bool IsLookingAtWeapon => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_WeaponServices", "m_bIsLookingAtWeapon");

    // m_bIsHoldingLookAtWeapon
    public ref bool IsHoldingLookAtWeapon => ref Schema.GetRef<bool>(this.Handle, "CCSPlayer_WeaponServices", "m_bIsHoldingLookAtWeapon");

}

public partial class CCSPlayerBase_CameraServices : CPlayer_CameraServices
{
    public CCSPlayerBase_CameraServices (IntPtr pointer) : base(pointer) {}

    // m_iFOV
    public ref UInt32 FOV => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayerBase_CameraServices", "m_iFOV");

    // m_iFOVStart
    public ref UInt32 FOVStart => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayerBase_CameraServices", "m_iFOVStart");

    // m_flFOVTime
    public ref float FOVTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerBase_CameraServices", "m_flFOVTime");

    // m_flFOVRate
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref float FOVRate => ref Schema.GetRef<float>(this.Handle, "CCSPlayerBase_CameraServices", "m_flFOVRate");

    // m_hZoomOwner
    public CHandle<CBaseEntity> ZoomOwner => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CCSPlayerBase_CameraServices", "m_hZoomOwner");

}

public partial class CCSPlayerController : CBasePlayerController
{
    public CCSPlayerController (IntPtr pointer) : base(pointer) {}

    // m_pInGameMoneyServices
    public CCSPlayerController_InGameMoneyServices? InGameMoneyServices => Schema.GetPointer<CCSPlayerController_InGameMoneyServices>(this.Handle, "CCSPlayerController", "m_pInGameMoneyServices");

    // m_pInventoryServices
    public CCSPlayerController_InventoryServices? InventoryServices => Schema.GetPointer<CCSPlayerController_InventoryServices>(this.Handle, "CCSPlayerController", "m_pInventoryServices");

    // m_pActionTrackingServices
    public CCSPlayerController_ActionTrackingServices? ActionTrackingServices => Schema.GetPointer<CCSPlayerController_ActionTrackingServices>(this.Handle, "CCSPlayerController", "m_pActionTrackingServices");

    // m_pDamageServices
    public CCSPlayerController_DamageServices? DamageServices => Schema.GetPointer<CCSPlayerController_DamageServices>(this.Handle, "CCSPlayerController", "m_pDamageServices");

    // m_iPing
    public ref UInt32 Ping => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayerController", "m_iPing");

    // m_bHasCommunicationAbuseMute
    public ref bool HasCommunicationAbuseMute => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerController", "m_bHasCommunicationAbuseMute");

    // m_szCrosshairCodes
    public string CrosshairCodes
    {
        get { return Schema.GetUtf8String(this.Handle, "CCSPlayerController", "m_szCrosshairCodes"); }
        set { Schema.SetString(this.Handle, "CCSPlayerController", "m_szCrosshairCodes", value); }
    }

    // m_iPendingTeamNum
    public ref byte PendingTeamNum => ref Schema.GetRef<byte>(this.Handle, "CCSPlayerController", "m_iPendingTeamNum");

    // m_flForceTeamTime
    public ref float ForceTeamTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerController", "m_flForceTeamTime");

    // m_iCompTeammateColor
    // MNetworkChangeCallback "OnCompTeammateColorChanged"
    public ref Int32 CompTeammateColor => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iCompTeammateColor");

    // m_bEverPlayedOnTeam
    public ref bool EverPlayedOnTeam => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerController", "m_bEverPlayedOnTeam");

    // m_szClan
    public string Clan
    {
        get { return Schema.GetUtf8String(this.Handle, "CCSPlayerController", "m_szClan"); }
        set { Schema.SetString(this.Handle, "CCSPlayerController", "m_szClan", value); }
    }

    // m_iCoachingTeam
    public ref Int32 CoachingTeam => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iCoachingTeam");

    // m_nPlayerDominated
    public ref UInt64 PlayerDominated => ref Schema.GetRef<UInt64>(this.Handle, "CCSPlayerController", "m_nPlayerDominated");

    // m_nPlayerDominatingMe
    public ref UInt64 PlayerDominatingMe => ref Schema.GetRef<UInt64>(this.Handle, "CCSPlayerController", "m_nPlayerDominatingMe");

    // m_iCompetitiveRanking
    public ref Int32 CompetitiveRanking => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iCompetitiveRanking");

    // m_iCompetitiveWins
    public ref Int32 CompetitiveWins => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iCompetitiveWins");

    // m_iCompetitiveRankType
    public ref sbyte CompetitiveRankType => ref Schema.GetRef<sbyte>(this.Handle, "CCSPlayerController", "m_iCompetitiveRankType");

    // m_iCompetitiveRankingPredicted_Win
    public ref Int32 CompetitiveRankingPredicted_Win => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Win");

    // m_iCompetitiveRankingPredicted_Loss
    public ref Int32 CompetitiveRankingPredicted_Loss => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Loss");

    // m_iCompetitiveRankingPredicted_Tie
    public ref Int32 CompetitiveRankingPredicted_Tie => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Tie");

    // m_nEndMatchNextMapVote
    public ref Int32 EndMatchNextMapVote => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_nEndMatchNextMapVote");

    // m_unActiveQuestId
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref UInt16 ActiveQuestId => ref Schema.GetRef<UInt16>(this.Handle, "CCSPlayerController", "m_unActiveQuestId");

    // m_nQuestProgressReason
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref QuestProgressReason QuestProgressReason => ref Schema.GetRef<QuestProgressReason>(this.Handle, "CCSPlayerController", "m_nQuestProgressReason");

    // m_unPlayerTvControlFlags
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref UInt32 PlayerTvControlFlags => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayerController", "m_unPlayerTvControlFlags");

    // m_nDisconnectionTick
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref Int32 DisconnectionTick => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_nDisconnectionTick");

    // m_bControllingBot
    public ref bool ControllingBot => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerController", "m_bControllingBot");

    // m_bHasControlledBotThisRound
    public ref bool HasControlledBotThisRound => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerController", "m_bHasControlledBotThisRound");

    // m_bCanControlObservedBot
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref bool CanControlObservedBot => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerController", "m_bCanControlObservedBot");

    // m_hPlayerPawn
    public CHandle<CCSPlayerPawn> PlayerPawn => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CCSPlayerController", "m_hPlayerPawn");

    // m_hObserverPawn
    public CHandle<CCSObserverPawn> ObserverPawn => Schema.GetDeclaredClass<CHandle<CCSObserverPawn>>(this.Handle, "CCSPlayerController", "m_hObserverPawn");

    // m_bPawnIsAlive
    public ref bool PawnIsAlive => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerController", "m_bPawnIsAlive");

    // m_iPawnHealth
    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public ref UInt32 PawnHealth => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayerController", "m_iPawnHealth");

    // m_iPawnArmor
    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public ref Int32 PawnArmor => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iPawnArmor");

    // m_bPawnHasDefuser
    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public ref bool PawnHasDefuser => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerController", "m_bPawnHasDefuser");

    // m_bPawnHasHelmet
    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public ref bool PawnHasHelmet => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerController", "m_bPawnHasHelmet");

    // m_nPawnCharacterDefIndex
    public ref UInt16 PawnCharacterDefIndex => ref Schema.GetRef<UInt16>(this.Handle, "CCSPlayerController", "m_nPawnCharacterDefIndex");

    // m_iPawnLifetimeStart
    public ref Int32 PawnLifetimeStart => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iPawnLifetimeStart");

    // m_iPawnLifetimeEnd
    public ref Int32 PawnLifetimeEnd => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iPawnLifetimeEnd");

    // m_iPawnBotDifficulty
    public ref Int32 PawnBotDifficulty => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iPawnBotDifficulty");

    // m_hOriginalControllerOfCurrentPawn
    public CHandle<CCSPlayerController> OriginalControllerOfCurrentPawn => Schema.GetDeclaredClass<CHandle<CCSPlayerController>>(this.Handle, "CCSPlayerController", "m_hOriginalControllerOfCurrentPawn");

    // m_iScore
    public ref Int32 Score => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iScore");

    // m_vecKills
    public NetworkedVector<EKillTypes_t> Kills => Schema.GetDeclaredClass<NetworkedVector<EKillTypes_t>>(this.Handle, "CCSPlayerController", "m_vecKills");

    // m_iMVPs
    public ref Int32 MVPs => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController", "m_iMVPs");

}

public partial class CCSPlayerController_ActionTrackingServices : CPlayerControllerComponent
{
    public CCSPlayerController_ActionTrackingServices (IntPtr pointer) : base(pointer) {}

    // m_perRoundStats
    public NetworkedVector<CSPerRoundStats_t> PerRoundStats => Schema.GetDeclaredClass<NetworkedVector<CSPerRoundStats_t>>(this.Handle, "CCSPlayerController_ActionTrackingServices", "m_perRoundStats");

    // m_matchStats
    public CSMatchStats_t MatchStats => Schema.GetDeclaredClass<CSMatchStats_t>(this.Handle, "CCSPlayerController_ActionTrackingServices", "m_matchStats");

    // m_iNumRoundKills
    public ref Int32 NumRoundKills => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_ActionTrackingServices", "m_iNumRoundKills");

    // m_iNumRoundKillsHeadshots
    public ref Int32 NumRoundKillsHeadshots => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_ActionTrackingServices", "m_iNumRoundKillsHeadshots");

    // m_unTotalRoundDamageDealt
    public ref UInt32 TotalRoundDamageDealt => ref Schema.GetRef<UInt32>(this.Handle, "CCSPlayerController_ActionTrackingServices", "m_unTotalRoundDamageDealt");

}

public partial class CCSPlayerController_DamageServices : CPlayerControllerComponent
{
    public CCSPlayerController_DamageServices (IntPtr pointer) : base(pointer) {}

    // m_nSendUpdate
    // MNetworkUserGroup "LocalPlayerExclusiveDuringRoundEnd"
    // MNetworkChangeCallback "OnDamageListUpdate"
    public ref Int32 SendUpdate => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_DamageServices", "m_nSendUpdate");

    // m_DamageList
    // MNetworkUserGroup "LocalPlayerExclusiveDuringRoundEnd"
    public NetworkedVector<CDamageRecord> DamageList => Schema.GetDeclaredClass<NetworkedVector<CDamageRecord>>(this.Handle, "CCSPlayerController_DamageServices", "m_DamageList");

}

public partial class CCSPlayerController_InGameMoneyServices : CPlayerControllerComponent
{
    public CCSPlayerController_InGameMoneyServices (IntPtr pointer) : base(pointer) {}

    // m_iAccount
    public ref Int32 Account => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_InGameMoneyServices", "m_iAccount");

    // m_iStartAccount
    public ref Int32 StartAccount => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_InGameMoneyServices", "m_iStartAccount");

    // m_iTotalCashSpent
    public ref Int32 TotalCashSpent => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_InGameMoneyServices", "m_iTotalCashSpent");

    // m_iCashSpentThisRound
    public ref Int32 CashSpentThisRound => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_InGameMoneyServices", "m_iCashSpentThisRound");

}

public partial class CCSPlayerController_InventoryServices : CPlayerControllerComponent
{
    public CCSPlayerController_InventoryServices (IntPtr pointer) : base(pointer) {}

    // m_unMusicID
    public ref UInt16 MusicID => ref Schema.GetRef<UInt16>(this.Handle, "CCSPlayerController_InventoryServices", "m_unMusicID");

    // m_rank
    public Span<MedalRank_t> Rank => Schema.GetFixedArray<MedalRank_t>(this.Handle, "CCSPlayerController_InventoryServices", "m_rank", 6);

    // m_nPersonaDataPublicLevel
    public ref Int32 PersonaDataPublicLevel => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicLevel");

    // m_nPersonaDataPublicCommendsLeader
    public ref Int32 PersonaDataPublicCommendsLeader => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsLeader");

    // m_nPersonaDataPublicCommendsTeacher
    public ref Int32 PersonaDataPublicCommendsTeacher => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsTeacher");

    // m_nPersonaDataPublicCommendsFriendly
    public ref Int32 PersonaDataPublicCommendsFriendly => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsFriendly");

    // m_vecServerAuthoritativeWeaponSlots
    // MNetworkUserGroup "LocalPlayerExclusive"
    public NetworkedVector<ServerAuthoritativeWeaponSlot_t> ServerAuthoritativeWeaponSlots => Schema.GetDeclaredClass<NetworkedVector<ServerAuthoritativeWeaponSlot_t>>(this.Handle, "CCSPlayerController_InventoryServices", "m_vecServerAuthoritativeWeaponSlots");

}

public partial class CCSPlayerPawn : CCSPlayerPawnBase
{
    public CCSPlayerPawn (IntPtr pointer) : base(pointer) {}

    // m_pBulletServices
    public CCSPlayer_BulletServices? BulletServices => Schema.GetPointer<CCSPlayer_BulletServices>(this.Handle, "CCSPlayerPawn", "m_pBulletServices");

    // m_pHostageServices
    public CCSPlayer_HostageServices? HostageServices => Schema.GetPointer<CCSPlayer_HostageServices>(this.Handle, "CCSPlayerPawn", "m_pHostageServices");

    // m_pBuyServices
    public CCSPlayer_BuyServices? BuyServices => Schema.GetPointer<CCSPlayer_BuyServices>(this.Handle, "CCSPlayerPawn", "m_pBuyServices");

    // m_pActionTrackingServices
    public CCSPlayer_ActionTrackingServices? ActionTrackingServices => Schema.GetPointer<CCSPlayer_ActionTrackingServices>(this.Handle, "CCSPlayerPawn", "m_pActionTrackingServices");

    // m_bHasFemaleVoice
    public ref bool HasFemaleVoice => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawn", "m_bHasFemaleVoice");

    // m_szLastPlaceName
    public string LastPlaceName
    {
        get { return Schema.GetString(this.Handle, "CCSPlayerPawn", "m_szLastPlaceName"); }
        set { Schema.SetString(this.Handle, "CCSPlayerPawn", "m_szLastPlaceName", value); }
    }

    // m_bInBuyZone
    public ref bool InBuyZone => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawn", "m_bInBuyZone");

    // m_bInHostageRescueZone
    public ref bool InHostageRescueZone => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawn", "m_bInHostageRescueZone");

    // m_bInBombZone
    public ref bool InBombZone => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawn", "m_bInBombZone");

    // m_iRetakesOffering
    public ref Int32 RetakesOffering => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawn", "m_iRetakesOffering");

    // m_iRetakesOfferingCard
    public ref Int32 RetakesOfferingCard => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawn", "m_iRetakesOfferingCard");

    // m_bRetakesHasDefuseKit
    public ref bool RetakesHasDefuseKit => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawn", "m_bRetakesHasDefuseKit");

    // m_bRetakesMVPLastRound
    public ref bool RetakesMVPLastRound => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawn", "m_bRetakesMVPLastRound");

    // m_iRetakesMVPBoostItem
    public ref Int32 RetakesMVPBoostItem => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawn", "m_iRetakesMVPBoostItem");

    // m_RetakesMVPBoostExtraUtility
    public ref loadout_slot_t RetakesMVPBoostExtraUtility => ref Schema.GetRef<loadout_slot_t>(this.Handle, "CCSPlayerPawn", "m_RetakesMVPBoostExtraUtility");

    // m_flHealthShotBoostExpirationTime
    public ref float HealthShotBoostExpirationTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawn", "m_flHealthShotBoostExpirationTime");

    // m_aimPunchAngle
    // MNetworkBitCount "32"
    public QAngle AimPunchAngle => Schema.GetDeclaredClass<QAngle>(this.Handle, "CCSPlayerPawn", "m_aimPunchAngle");

    // m_aimPunchAngleVel
    // MNetworkBitCount "32"
    public QAngle AimPunchAngleVel => Schema.GetDeclaredClass<QAngle>(this.Handle, "CCSPlayerPawn", "m_aimPunchAngleVel");

    // m_aimPunchTickBase
    public ref Int32 AimPunchTickBase => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawn", "m_aimPunchTickBase");

    // m_aimPunchTickFraction
    public ref float AimPunchTickFraction => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawn", "m_aimPunchTickFraction");

    // m_bIsBuyMenuOpen
    public ref bool IsBuyMenuOpen => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawn", "m_bIsBuyMenuOpen");

    // m_flTimeOfLastInjury
    public ref float TimeOfLastInjury => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawn", "m_flTimeOfLastInjury");

    // m_flNextSprayDecalTime
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref float NextSprayDecalTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawn", "m_flNextSprayDecalTime");

    // m_nRagdollDamageBone
    public ref Int32 RagdollDamageBone => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawn", "m_nRagdollDamageBone");

    // m_vRagdollDamageForce
    public Vector RagdollDamageForce => Schema.GetDeclaredClass<Vector>(this.Handle, "CCSPlayerPawn", "m_vRagdollDamageForce");

    // m_vRagdollDamagePosition
    public Vector RagdollDamagePosition => Schema.GetDeclaredClass<Vector>(this.Handle, "CCSPlayerPawn", "m_vRagdollDamagePosition");

    // m_szRagdollDamageWeaponName
    public string RagdollDamageWeaponName
    {
        get { return Schema.GetString(this.Handle, "CCSPlayerPawn", "m_szRagdollDamageWeaponName"); }
        set { Schema.SetString(this.Handle, "CCSPlayerPawn", "m_szRagdollDamageWeaponName", value); }
    }

    // m_bRagdollDamageHeadshot
    public ref bool RagdollDamageHeadshot => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawn", "m_bRagdollDamageHeadshot");

    // m_EconGloves
    public CEconItemView EconGloves => Schema.GetDeclaredClass<CEconItemView>(this.Handle, "CCSPlayerPawn", "m_EconGloves");

    // m_qDeathEyeAngles
    public QAngle DeathEyeAngles => Schema.GetDeclaredClass<QAngle>(this.Handle, "CCSPlayerPawn", "m_qDeathEyeAngles");

}

public partial class CCSPlayerPawnBase : CBasePlayerPawn
{
    public CCSPlayerPawnBase (IntPtr pointer) : base(pointer) {}

    // m_CTouchExpansionComponent
    // MNetworkUserGroup "CTouchExpansionComponent"
    // MNetworkAlias "CTouchExpansionComponent"
    // MNetworkTypeAlias "CTouchExpansionComponent"
    public CTouchExpansionComponent CTouchExpansionComponent => Schema.GetDeclaredClass<CTouchExpansionComponent>(this.Handle, "CCSPlayerPawnBase", "m_CTouchExpansionComponent");

    // m_pPingServices
    public CCSPlayer_PingServices? PingServices => Schema.GetPointer<CCSPlayer_PingServices>(this.Handle, "CCSPlayerPawnBase", "m_pPingServices");

    // m_pViewModelServices
    public CPlayer_ViewModelServices? ViewModelServices => Schema.GetPointer<CPlayer_ViewModelServices>(this.Handle, "CCSPlayerPawnBase", "m_pViewModelServices");

    // m_hOriginalController
    public CHandle<CCSPlayerController> OriginalController => Schema.GetDeclaredClass<CHandle<CCSPlayerController>>(this.Handle, "CCSPlayerPawnBase", "m_hOriginalController");

    // m_entitySpottedState
    public EntitySpottedState_t EntitySpottedState => Schema.GetDeclaredClass<EntitySpottedState_t>(this.Handle, "CCSPlayerPawnBase", "m_entitySpottedState");

    // m_iPlayerState
    public ref CSPlayerState PlayerState => ref Schema.GetRef<CSPlayerState>(this.Handle, "CCSPlayerPawnBase", "m_iPlayerState");

    // m_bIsScoped
    public ref bool IsScoped => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bIsScoped");

    // m_bIsWalking
    public ref bool IsWalking => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bIsWalking");

    // m_bResumeZoom
    public ref bool ResumeZoom => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bResumeZoom");

    // m_bIsDefusing
    public ref bool IsDefusing => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bIsDefusing");

    // m_bIsGrabbingHostage
    public ref bool IsGrabbingHostage => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bIsGrabbingHostage");

    // m_iBlockingUseActionInProgress
    public ref CSPlayerBlockingUseAction_t BlockingUseActionInProgress => ref Schema.GetRef<CSPlayerBlockingUseAction_t>(this.Handle, "CCSPlayerPawnBase", "m_iBlockingUseActionInProgress");

    // m_fImmuneToGunGameDamageTime
    public ref float ImmuneToGunGameDamageTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_fImmuneToGunGameDamageTime");

    // m_bGunGameImmunity
    public ref bool GunGameImmunity => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bGunGameImmunity");

    // m_fMolotovDamageTime
    public ref float MolotovDamageTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_fMolotovDamageTime");

    // m_bHasMovedSinceSpawn
    public ref bool HasMovedSinceSpawn => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bHasMovedSinceSpawn");

    // m_bCanMoveDuringFreezePeriod
    public ref bool CanMoveDuringFreezePeriod => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bCanMoveDuringFreezePeriod");

    // m_flGuardianTooFarDistFrac
    public ref float GuardianTooFarDistFrac => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flGuardianTooFarDistFrac");

    // m_flDetectedByEnemySensorTime
    public ref float DetectedByEnemySensorTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flDetectedByEnemySensorTime");

    // m_nHeavyAssaultSuitCooldownRemaining
    public ref Int32 HeavyAssaultSuitCooldownRemaining => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_nHeavyAssaultSuitCooldownRemaining");

    // m_flEmitSoundTime
    public ref float EmitSoundTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flEmitSoundTime");

    // m_bHasNightVision
    public ref bool HasNightVision => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bHasNightVision");

    // m_bNightVisionOn
    public ref bool NightVisionOn => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bNightVisionOn");

    // m_bInNoDefuseArea
    public ref bool InNoDefuseArea => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bInNoDefuseArea");

    // m_bKilledByTaser
    public ref bool KilledByTaser => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bKilledByTaser");

    // m_iMoveState
    public ref Int32 MoveState => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_iMoveState");

    // m_nWhichBombZone
    public ref Int32 WhichBombZone => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_nWhichBombZone");

    // m_iDirection
    public ref Int32 Direction => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_iDirection");

    // m_iShotsFired
    public ref Int32 ShotsFired => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_iShotsFired");

    // m_ArmorValue
    public ref Int32 ArmorValue => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_ArmorValue");

    // m_flVelocityModifier
    public ref float VelocityModifier => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flVelocityModifier");

    // m_flHitHeading
    public ref float HitHeading => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flHitHeading");

    // m_nHitBodyPart
    public ref Int32 HitBodyPart => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_nHitBodyPart");

    // m_flFlashDuration
    public ref float FlashDuration => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flFlashDuration");

    // m_flFlashMaxAlpha
    public ref float FlashMaxAlpha => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flFlashMaxAlpha");

    // m_flProgressBarStartTime
    public ref float ProgressBarStartTime => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flProgressBarStartTime");

    // m_iProgressBarDuration
    public ref Int32 ProgressBarDuration => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_iProgressBarDuration");

    // m_bWaitForNoAttack
    public ref bool WaitForNoAttack => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bWaitForNoAttack");

    // m_flLowerBodyYawTarget
    public ref float LowerBodyYawTarget => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flLowerBodyYawTarget");

    // m_bStrafing
    public ref bool Strafing => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bStrafing");

    // m_thirdPersonHeading
    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority "32"
    public QAngle ThirdPersonHeading => Schema.GetDeclaredClass<QAngle>(this.Handle, "CCSPlayerPawnBase", "m_thirdPersonHeading");

    // m_flSlopeDropOffset
    // MNetworkPriority "32"
    public ref float SlopeDropOffset => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flSlopeDropOffset");

    // m_flSlopeDropHeight
    // MNetworkPriority "32"
    public ref float SlopeDropHeight => ref Schema.GetRef<float>(this.Handle, "CCSPlayerPawnBase", "m_flSlopeDropHeight");

    // m_vHeadConstraintOffset
    // MNetworkPriority "32"
    public Vector HeadConstraintOffset => Schema.GetDeclaredClass<Vector>(this.Handle, "CCSPlayerPawnBase", "m_vHeadConstraintOffset");

    // m_angEyeAngles
    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority "32"
    public QAngle EyeAngles => Schema.GetDeclaredClass<QAngle>(this.Handle, "CCSPlayerPawnBase", "m_angEyeAngles");

    // m_bHideTargetID
    public ref bool HideTargetID => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bHideTargetID");

    // m_bHud_MiniScoreHidden
    public ref bool Hud_MiniScoreHidden => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bHud_MiniScoreHidden");

    // m_bHud_RadarHidden
    public ref bool Hud_RadarHidden => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bHud_RadarHidden");

    // m_nLastKillerIndex
    public CEntityIndex LastKillerIndex => Schema.GetDeclaredClass<CEntityIndex>(this.Handle, "CCSPlayerPawnBase", "m_nLastKillerIndex");

    // m_nLastConcurrentKilled
    public ref Int32 LastConcurrentKilled => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_nLastConcurrentKilled");

    // m_nDeathCamMusic
    public ref Int32 DeathCamMusic => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_nDeathCamMusic");

    // m_iAddonBits
    public ref Int32 AddonBits => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_iAddonBits");

    // m_iPrimaryAddon
    public ref Int32 PrimaryAddon => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_iPrimaryAddon");

    // m_iSecondaryAddon
    public ref Int32 SecondaryAddon => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_iSecondaryAddon");

    // m_vecPlayerPatchEconIndices
    public Span<UInt32> PlayerPatchEconIndices => Schema.GetFixedArray<UInt32>(this.Handle, "CCSPlayerPawnBase", "m_vecPlayerPatchEconIndices", 5);

    // m_unCurrentEquipmentValue
    public ref UInt16 CurrentEquipmentValue => ref Schema.GetRef<UInt16>(this.Handle, "CCSPlayerPawnBase", "m_unCurrentEquipmentValue");

    // m_unRoundStartEquipmentValue
    public ref UInt16 RoundStartEquipmentValue => ref Schema.GetRef<UInt16>(this.Handle, "CCSPlayerPawnBase", "m_unRoundStartEquipmentValue");

    // m_unFreezetimeEndEquipmentValue
    public ref UInt16 FreezetimeEndEquipmentValue => ref Schema.GetRef<UInt16>(this.Handle, "CCSPlayerPawnBase", "m_unFreezetimeEndEquipmentValue");

    // m_nSurvivalTeamNumber
    public ref Int32 SurvivalTeamNumber => ref Schema.GetRef<Int32>(this.Handle, "CCSPlayerPawnBase", "m_nSurvivalTeamNumber");

    // m_bKilledByHeadshot
    public ref bool KilledByHeadshot => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerPawnBase", "m_bKilledByHeadshot");

}

public partial class CCSPlayerResource : CBaseEntity
{
    public CCSPlayerResource (IntPtr pointer) : base(pointer) {}

    // m_bHostageAlive
    public Span<bool> HostageAlive => Schema.GetFixedArray<bool>(this.Handle, "CCSPlayerResource", "m_bHostageAlive", 12);

    // m_isHostageFollowingSomeone
    public Span<bool> IsHostageFollowingSomeone => Schema.GetFixedArray<bool>(this.Handle, "CCSPlayerResource", "m_isHostageFollowingSomeone", 12);

    // m_iHostageEntityIDs
    public Span<CEntityIndex> HostageEntityIDs => Schema.GetFixedArray<CEntityIndex>(this.Handle, "CCSPlayerResource", "m_iHostageEntityIDs", 12);

    // m_bombsiteCenterA
    public Vector BombsiteCenterA => Schema.GetDeclaredClass<Vector>(this.Handle, "CCSPlayerResource", "m_bombsiteCenterA");

    // m_bombsiteCenterB
    public Vector BombsiteCenterB => Schema.GetDeclaredClass<Vector>(this.Handle, "CCSPlayerResource", "m_bombsiteCenterB");

    // m_hostageRescueX
    public Span<Int32> HostageRescueX => Schema.GetFixedArray<Int32>(this.Handle, "CCSPlayerResource", "m_hostageRescueX", 4);

    // m_hostageRescueY
    public Span<Int32> HostageRescueY => Schema.GetFixedArray<Int32>(this.Handle, "CCSPlayerResource", "m_hostageRescueY", 4);

    // m_hostageRescueZ
    public Span<Int32> HostageRescueZ => Schema.GetFixedArray<Int32>(this.Handle, "CCSPlayerResource", "m_hostageRescueZ", 4);

    // m_bEndMatchNextMapAllVoted
    public ref bool EndMatchNextMapAllVoted => ref Schema.GetRef<bool>(this.Handle, "CCSPlayerResource", "m_bEndMatchNextMapAllVoted");

}

public partial class CCSTeam : CTeam
{
    public CCSTeam (IntPtr pointer) : base(pointer) {}

    // m_bSurrendered
    public ref bool Surrendered => ref Schema.GetRef<bool>(this.Handle, "CCSTeam", "m_bSurrendered");

    // m_szTeamMatchStat
    public string TeamMatchStat
    {
        get { return Schema.GetString(this.Handle, "CCSTeam", "m_szTeamMatchStat"); }
        set { Schema.SetString(this.Handle, "CCSTeam", "m_szTeamMatchStat", value); }
    }

    // m_numMapVictories
    public ref Int32 NumMapVictories => ref Schema.GetRef<Int32>(this.Handle, "CCSTeam", "m_numMapVictories");

    // m_scoreFirstHalf
    public ref Int32 ScoreFirstHalf => ref Schema.GetRef<Int32>(this.Handle, "CCSTeam", "m_scoreFirstHalf");

    // m_scoreSecondHalf
    public ref Int32 ScoreSecondHalf => ref Schema.GetRef<Int32>(this.Handle, "CCSTeam", "m_scoreSecondHalf");

    // m_scoreOvertime
    public ref Int32 ScoreOvertime => ref Schema.GetRef<Int32>(this.Handle, "CCSTeam", "m_scoreOvertime");

    // m_szClanTeamname
    public string ClanTeamname
    {
        get { return Schema.GetString(this.Handle, "CCSTeam", "m_szClanTeamname"); }
        set { Schema.SetString(this.Handle, "CCSTeam", "m_szClanTeamname", value); }
    }

    // m_iClanID
    public ref UInt32 ClanID => ref Schema.GetRef<UInt32>(this.Handle, "CCSTeam", "m_iClanID");

    // m_szTeamFlagImage
    public string TeamFlagImage
    {
        get { return Schema.GetString(this.Handle, "CCSTeam", "m_szTeamFlagImage"); }
        set { Schema.SetString(this.Handle, "CCSTeam", "m_szTeamFlagImage", value); }
    }

    // m_szTeamLogoImage
    public string TeamLogoImage
    {
        get { return Schema.GetString(this.Handle, "CCSTeam", "m_szTeamLogoImage"); }
        set { Schema.SetString(this.Handle, "CCSTeam", "m_szTeamLogoImage", value); }
    }

}

public partial class CCSWeaponBase : CBasePlayerWeapon
{
    public CCSWeaponBase (IntPtr pointer) : base(pointer) {}

    // m_flFireSequenceStartTime
    public ref float FireSequenceStartTime => ref Schema.GetRef<float>(this.Handle, "CCSWeaponBase", "m_flFireSequenceStartTime");

    // m_nFireSequenceStartTimeChange
    public ref Int32 FireSequenceStartTimeChange => ref Schema.GetRef<Int32>(this.Handle, "CCSWeaponBase", "m_nFireSequenceStartTimeChange");

    // m_bPlayerFireEventIsPrimary
    public ref bool PlayerFireEventIsPrimary => ref Schema.GetRef<bool>(this.Handle, "CCSWeaponBase", "m_bPlayerFireEventIsPrimary");

    // m_iState
    // MNetworkChangeCallback "OnWeaponStateNetworkChange"
    public ref CSWeaponState_t State => ref Schema.GetRef<CSWeaponState_t>(this.Handle, "CCSWeaponBase", "m_iState");

    // m_nViewModelIndex
    // MNetworkUserGroup "LocalWeaponExclusive"
    public ref UInt32 ViewModelIndex => ref Schema.GetRef<UInt32>(this.Handle, "CCSWeaponBase", "m_nViewModelIndex");

    // m_flTimeWeaponIdle
    // MNetworkUserGroup "LocalWeaponExclusive"
    // MNetworkPriority "32"
    public ref float TimeWeaponIdle => ref Schema.GetRef<float>(this.Handle, "CCSWeaponBase", "m_flTimeWeaponIdle");

    // m_weaponMode
    public ref CSWeaponMode WeaponMode => ref Schema.GetRef<CSWeaponMode>(this.Handle, "CCSWeaponBase", "m_weaponMode");

    // m_fAccuracyPenalty
    public ref float AccuracyPenalty => ref Schema.GetRef<float>(this.Handle, "CCSWeaponBase", "m_fAccuracyPenalty");

    // m_iRecoilIndex
    public ref Int32 IRecoilIndex => ref Schema.GetRef<Int32>(this.Handle, "CCSWeaponBase", "m_iRecoilIndex");

    // m_flRecoilIndex
    public ref float FlRecoilIndex => ref Schema.GetRef<float>(this.Handle, "CCSWeaponBase", "m_flRecoilIndex");

    // m_bBurstMode
    public ref bool BurstMode => ref Schema.GetRef<bool>(this.Handle, "CCSWeaponBase", "m_bBurstMode");

    // m_flPostponeFireReadyTime
    public ref float PostponeFireReadyTime => ref Schema.GetRef<float>(this.Handle, "CCSWeaponBase", "m_flPostponeFireReadyTime");

    // m_bInReload
    public ref bool InReload => ref Schema.GetRef<bool>(this.Handle, "CCSWeaponBase", "m_bInReload");

    // m_bReloadVisuallyComplete
    public ref bool ReloadVisuallyComplete => ref Schema.GetRef<bool>(this.Handle, "CCSWeaponBase", "m_bReloadVisuallyComplete");

    // m_flDroppedAtTime
    public ref float DroppedAtTime => ref Schema.GetRef<float>(this.Handle, "CCSWeaponBase", "m_flDroppedAtTime");

    // m_bIsHauledBack
    public ref bool IsHauledBack => ref Schema.GetRef<bool>(this.Handle, "CCSWeaponBase", "m_bIsHauledBack");

    // m_bSilencerOn
    public ref bool SilencerOn => ref Schema.GetRef<bool>(this.Handle, "CCSWeaponBase", "m_bSilencerOn");

    // m_flTimeSilencerSwitchComplete
    public ref float TimeSilencerSwitchComplete => ref Schema.GetRef<float>(this.Handle, "CCSWeaponBase", "m_flTimeSilencerSwitchComplete");

    // m_iOriginalTeamNumber
    public ref Int32 OriginalTeamNumber => ref Schema.GetRef<Int32>(this.Handle, "CCSWeaponBase", "m_iOriginalTeamNumber");

    // m_hPrevOwner
    public CHandle<CCSPlayerPawn> PrevOwner => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CCSWeaponBase", "m_hPrevOwner");

    // m_nDropTick
    // m_fLastShotTime
    public ref float LastShotTime => ref Schema.GetRef<float>(this.Handle, "CCSWeaponBase", "m_fLastShotTime");

    // m_iIronSightMode
    public ref Int32 IronSightMode => ref Schema.GetRef<Int32>(this.Handle, "CCSWeaponBase", "m_iIronSightMode");

    // m_iNumEmptyAttacks
    public ref Int32 NumEmptyAttacks => ref Schema.GetRef<Int32>(this.Handle, "CCSWeaponBase", "m_iNumEmptyAttacks");

}

public partial class CCSWeaponBaseGun : CCSWeaponBase
{
    public CCSWeaponBaseGun (IntPtr pointer) : base(pointer) {}

    // m_zoomLevel
    public ref Int32 ZoomLevel => ref Schema.GetRef<Int32>(this.Handle, "CCSWeaponBaseGun", "m_zoomLevel");

    // m_iBurstShotsRemaining
    public ref Int32 BurstShotsRemaining => ref Schema.GetRef<Int32>(this.Handle, "CCSWeaponBaseGun", "m_iBurstShotsRemaining");

    // m_bNeedsBoltAction
    public ref bool NeedsBoltAction => ref Schema.GetRef<bool>(this.Handle, "CCSWeaponBaseGun", "m_bNeedsBoltAction");

}

public partial class CDamageRecord : NativeObject
{
    public CDamageRecord (IntPtr pointer) : base(pointer) {}

    // m_PlayerDamager
    public CHandle<CCSPlayerPawnBase> PlayerDamager => Schema.GetDeclaredClass<CHandle<CCSPlayerPawnBase>>(this.Handle, "CDamageRecord", "m_PlayerDamager");

    // m_PlayerRecipient
    public CHandle<CCSPlayerPawnBase> PlayerRecipient => Schema.GetDeclaredClass<CHandle<CCSPlayerPawnBase>>(this.Handle, "CDamageRecord", "m_PlayerRecipient");

    // m_hPlayerControllerDamager
    public CHandle<CCSPlayerController> PlayerControllerDamager => Schema.GetDeclaredClass<CHandle<CCSPlayerController>>(this.Handle, "CDamageRecord", "m_hPlayerControllerDamager");

    // m_hPlayerControllerRecipient
    public CHandle<CCSPlayerController> PlayerControllerRecipient => Schema.GetDeclaredClass<CHandle<CCSPlayerController>>(this.Handle, "CDamageRecord", "m_hPlayerControllerRecipient");

    // m_szPlayerDamagerName
    public string PlayerDamagerName
    {
        get { return Schema.GetUtf8String(this.Handle, "CDamageRecord", "m_szPlayerDamagerName"); }
        set { Schema.SetString(this.Handle, "CDamageRecord", "m_szPlayerDamagerName", value); }
    }

    // m_szPlayerRecipientName
    public string PlayerRecipientName
    {
        get { return Schema.GetUtf8String(this.Handle, "CDamageRecord", "m_szPlayerRecipientName"); }
        set { Schema.SetString(this.Handle, "CDamageRecord", "m_szPlayerRecipientName", value); }
    }

    // m_DamagerXuid
    public ref UInt64 DamagerXuid => ref Schema.GetRef<UInt64>(this.Handle, "CDamageRecord", "m_DamagerXuid");

    // m_RecipientXuid
    public ref UInt64 RecipientXuid => ref Schema.GetRef<UInt64>(this.Handle, "CDamageRecord", "m_RecipientXuid");

    // m_iDamage
    public ref Int32 Damage => ref Schema.GetRef<Int32>(this.Handle, "CDamageRecord", "m_iDamage");

    // m_iActualHealthRemoved
    public ref Int32 ActualHealthRemoved => ref Schema.GetRef<Int32>(this.Handle, "CDamageRecord", "m_iActualHealthRemoved");

    // m_iNumHits
    public ref Int32 NumHits => ref Schema.GetRef<Int32>(this.Handle, "CDamageRecord", "m_iNumHits");

    // m_iLastBulletUpdate
    public ref Int32 LastBulletUpdate => ref Schema.GetRef<Int32>(this.Handle, "CDamageRecord", "m_iLastBulletUpdate");

    // m_bIsOtherEnemy
    public ref bool IsOtherEnemy => ref Schema.GetRef<bool>(this.Handle, "CDamageRecord", "m_bIsOtherEnemy");

    // m_killType
    public ref EKillTypes_t KillType => ref Schema.GetRef<EKillTypes_t>(this.Handle, "CDamageRecord", "m_killType");

}

public partial class CDEagle : CCSWeaponBaseGun
{
    public CDEagle (IntPtr pointer) : base(pointer) {}

}

public partial class CDecoyGrenade : CBaseCSGrenade
{
    public CDecoyGrenade (IntPtr pointer) : base(pointer) {}

}

public partial class CDecoyProjectile : CBaseCSGrenadeProjectile
{
    public CDecoyProjectile (IntPtr pointer) : base(pointer) {}

}

public partial class CDynamicLight : CBaseModelEntity
{
    public CDynamicLight (IntPtr pointer) : base(pointer) {}

    // m_Flags
    public ref byte DynamicLightFlags => ref Schema.GetRef<byte>(this.Handle, "CDynamicLight", "m_Flags");

    // m_LightStyle
    public ref byte LightStyle => ref Schema.GetRef<byte>(this.Handle, "CDynamicLight", "m_LightStyle");

    // m_Radius
    public ref float Radius => ref Schema.GetRef<float>(this.Handle, "CDynamicLight", "m_Radius");

    // m_Exponent
    public ref Int32 Exponent => ref Schema.GetRef<Int32>(this.Handle, "CDynamicLight", "m_Exponent");

    // m_InnerAngle
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "360.000000"
    public ref float InnerAngle => ref Schema.GetRef<float>(this.Handle, "CDynamicLight", "m_InnerAngle");

    // m_OuterAngle
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "360.000000"
    public ref float OuterAngle => ref Schema.GetRef<float>(this.Handle, "CDynamicLight", "m_OuterAngle");

    // m_SpotRadius
    public ref float SpotRadius => ref Schema.GetRef<float>(this.Handle, "CDynamicLight", "m_SpotRadius");

}

public partial class CDynamicProp : CBreakableProp
{
    public CDynamicProp (IntPtr pointer) : base(pointer) {}

    // m_bUseHitboxesForRenderBox
    public ref bool UseHitboxesForRenderBox => ref Schema.GetRef<bool>(this.Handle, "CDynamicProp", "m_bUseHitboxesForRenderBox");

    // m_bUseAnimGraph
    public ref bool UseAnimGraph => ref Schema.GetRef<bool>(this.Handle, "CDynamicProp", "m_bUseAnimGraph");

}

public partial class CEconEntity : CBaseFlex
{
    public CEconEntity (IntPtr pointer) : base(pointer) {}

    // m_AttributeManager
    public CAttributeContainer AttributeManager => Schema.GetDeclaredClass<CAttributeContainer>(this.Handle, "CEconEntity", "m_AttributeManager");

    // m_OriginalOwnerXuidLow
    public ref UInt32 OriginalOwnerXuidLow => ref Schema.GetRef<UInt32>(this.Handle, "CEconEntity", "m_OriginalOwnerXuidLow");

    // m_OriginalOwnerXuidHigh
    public ref UInt32 OriginalOwnerXuidHigh => ref Schema.GetRef<UInt32>(this.Handle, "CEconEntity", "m_OriginalOwnerXuidHigh");

    // m_nFallbackPaintKit
    public ref Int32 FallbackPaintKit => ref Schema.GetRef<Int32>(this.Handle, "CEconEntity", "m_nFallbackPaintKit");

    // m_nFallbackSeed
    public ref Int32 FallbackSeed => ref Schema.GetRef<Int32>(this.Handle, "CEconEntity", "m_nFallbackSeed");

    // m_flFallbackWear
    public ref float FallbackWear => ref Schema.GetRef<float>(this.Handle, "CEconEntity", "m_flFallbackWear");

    // m_nFallbackStatTrak
    public ref Int32 FallbackStatTrak => ref Schema.GetRef<Int32>(this.Handle, "CEconEntity", "m_nFallbackStatTrak");

}

public partial class CEconItemAttribute : NativeObject
{
    public CEconItemAttribute (IntPtr pointer) : base(pointer) {}

    // m_iAttributeDefinitionIndex
    public ref UInt16 AttributeDefinitionIndex => ref Schema.GetRef<UInt16>(this.Handle, "CEconItemAttribute", "m_iAttributeDefinitionIndex");

    // m_flValue
    // MNetworkAlias "m_iRawValue32"
    public ref float Value => ref Schema.GetRef<float>(this.Handle, "CEconItemAttribute", "m_flValue");

    // m_flInitialValue
    public ref float InitialValue => ref Schema.GetRef<float>(this.Handle, "CEconItemAttribute", "m_flInitialValue");

    // m_nRefundableCurrency
    public ref Int32 RefundableCurrency => ref Schema.GetRef<Int32>(this.Handle, "CEconItemAttribute", "m_nRefundableCurrency");

    // m_bSetBonus
    public ref bool SetBonus => ref Schema.GetRef<bool>(this.Handle, "CEconItemAttribute", "m_bSetBonus");

}

public partial class CEconItemView : IEconItemInterface
{
    public CEconItemView (IntPtr pointer) : base(pointer) {}

    // m_iItemDefinitionIndex
    public ref UInt16 ItemDefinitionIndex => ref Schema.GetRef<UInt16>(this.Handle, "CEconItemView", "m_iItemDefinitionIndex");

    // m_iEntityQuality
    public ref Int32 EntityQuality => ref Schema.GetRef<Int32>(this.Handle, "CEconItemView", "m_iEntityQuality");

    // m_iEntityLevel
    public ref UInt32 EntityLevel => ref Schema.GetRef<UInt32>(this.Handle, "CEconItemView", "m_iEntityLevel");

    // m_iItemIDHigh
    public ref UInt32 ItemIDHigh => ref Schema.GetRef<UInt32>(this.Handle, "CEconItemView", "m_iItemIDHigh");

    // m_iItemIDLow
    public ref UInt32 ItemIDLow => ref Schema.GetRef<UInt32>(this.Handle, "CEconItemView", "m_iItemIDLow");

    // m_iAccountID
    public ref UInt32 AccountID => ref Schema.GetRef<UInt32>(this.Handle, "CEconItemView", "m_iAccountID");

    // m_iInventoryPosition
    public ref UInt32 InventoryPosition => ref Schema.GetRef<UInt32>(this.Handle, "CEconItemView", "m_iInventoryPosition");

    // m_bInitialized
    public ref bool Initialized => ref Schema.GetRef<bool>(this.Handle, "CEconItemView", "m_bInitialized");

    // m_AttributeList
    public CAttributeList AttributeList => Schema.GetDeclaredClass<CAttributeList>(this.Handle, "CEconItemView", "m_AttributeList");

    // m_NetworkedDynamicAttributes
    public CAttributeList NetworkedDynamicAttributes => Schema.GetDeclaredClass<CAttributeList>(this.Handle, "CEconItemView", "m_NetworkedDynamicAttributes");

    // m_szCustomName
    public string CustomName
    {
        get { return Schema.GetString(this.Handle, "CEconItemView", "m_szCustomName"); }
        set { Schema.SetString(this.Handle, "CEconItemView", "m_szCustomName", value); }
    }

}

public partial class CEconWearable : CEconEntity
{
    public CEconWearable (IntPtr pointer) : base(pointer) {}

}

public partial class CEntityComponent : NativeObject
{
    public CEntityComponent (IntPtr pointer) : base(pointer) {}

}

public partial class CEntityDissolve : CBaseModelEntity
{
    public CEntityDissolve (IntPtr pointer) : base(pointer) {}

    // m_flFadeInStart
    public ref float FadeInStart => ref Schema.GetRef<float>(this.Handle, "CEntityDissolve", "m_flFadeInStart");

    // m_flFadeInLength
    public ref float FadeInLength => ref Schema.GetRef<float>(this.Handle, "CEntityDissolve", "m_flFadeInLength");

    // m_flFadeOutModelStart
    public ref float FadeOutModelStart => ref Schema.GetRef<float>(this.Handle, "CEntityDissolve", "m_flFadeOutModelStart");

    // m_flFadeOutModelLength
    public ref float FadeOutModelLength => ref Schema.GetRef<float>(this.Handle, "CEntityDissolve", "m_flFadeOutModelLength");

    // m_flFadeOutStart
    public ref float FadeOutStart => ref Schema.GetRef<float>(this.Handle, "CEntityDissolve", "m_flFadeOutStart");

    // m_flFadeOutLength
    public ref float FadeOutLength => ref Schema.GetRef<float>(this.Handle, "CEntityDissolve", "m_flFadeOutLength");

    // m_flStartTime
    public ref float StartTime => ref Schema.GetRef<float>(this.Handle, "CEntityDissolve", "m_flStartTime");

    // m_nDissolveType
    public ref EntityDisolveType_t DissolveType => ref Schema.GetRef<EntityDisolveType_t>(this.Handle, "CEntityDissolve", "m_nDissolveType");

    // m_vDissolverOrigin
    public Vector DissolverOrigin => Schema.GetDeclaredClass<Vector>(this.Handle, "CEntityDissolve", "m_vDissolverOrigin");

    // m_nMagnitude
    public ref UInt32 Magnitude => ref Schema.GetRef<UInt32>(this.Handle, "CEntityDissolve", "m_nMagnitude");

}

public partial class CEntityFlame : CBaseEntity
{
    public CEntityFlame (IntPtr pointer) : base(pointer) {}

    // m_hEntAttached
    public CHandle<CBaseEntity> EntAttached => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CEntityFlame", "m_hEntAttached");

    // m_bCheapEffect
    public ref bool CheapEffect => ref Schema.GetRef<bool>(this.Handle, "CEntityFlame", "m_bCheapEffect");

}

public partial class CEntityIdentity : NativeObject
{
    public CEntityIdentity (IntPtr pointer) : base(pointer) {}

    // m_nameStringableIndex
    // MNetworkChangeCallback "entityIdentityNameChanged"
    public ref Int32 NameStringableIndex => ref Schema.GetRef<Int32>(this.Handle, "CEntityIdentity", "m_nameStringableIndex");

}

public partial class CEntityInstance : NativeObject
{
    public CEntityInstance (IntPtr pointer) : base(pointer) {}

    // m_pEntity
    // MNetworkPriority "56"
    public CEntityIdentity? Entity => Schema.GetPointer<CEntityIdentity>(this.Handle, "CEntityInstance", "m_pEntity");

    // m_CScriptComponent
    // MNetworkDisable
    public CScriptComponent? CScriptComponent => Schema.GetPointer<CScriptComponent>(this.Handle, "CEntityInstance", "m_CScriptComponent");

}

public partial class CEnvCombinedLightProbeVolume : CBaseEntity
{
    public CEnvCombinedLightProbeVolume (IntPtr pointer) : base(pointer) {}

    // m_Color
    // MNetworkChangeCallback "StateChanged"
    public Color Color => Schema.GetDeclaredClass<Color>(this.Handle, "CEnvCombinedLightProbeVolume", "m_Color");

    // m_flBrightness
    // MNetworkChangeCallback "StateChanged"
    public ref float Brightness => ref Schema.GetRef<float>(this.Handle, "CEnvCombinedLightProbeVolume", "m_flBrightness");

    // m_hCubemapTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> CubemapTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvCombinedLightProbeVolume", "m_hCubemapTexture");

    // m_bCustomCubemapTexture
    public ref bool CustomCubemapTexture => ref Schema.GetRef<bool>(this.Handle, "CEnvCombinedLightProbeVolume", "m_bCustomCubemapTexture");

    // m_hLightProbeTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvCombinedLightProbeVolume", "m_hLightProbeTexture");

    // m_hLightProbeDirectLightIndicesTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightIndicesTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvCombinedLightProbeVolume", "m_hLightProbeDirectLightIndicesTexture");

    // m_hLightProbeDirectLightScalarsTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightScalarsTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvCombinedLightProbeVolume", "m_hLightProbeDirectLightScalarsTexture");

    // m_hLightProbeDirectLightShadowsTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightShadowsTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvCombinedLightProbeVolume", "m_hLightProbeDirectLightShadowsTexture");

    // m_vBoxMins
    public Vector BoxMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvCombinedLightProbeVolume", "m_vBoxMins");

    // m_vBoxMaxs
    public Vector BoxMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvCombinedLightProbeVolume", "m_vBoxMaxs");

    // m_LightGroups
    public string LightGroups
    {
        get { return Schema.GetUtf8String(this.Handle, "CEnvCombinedLightProbeVolume", "m_LightGroups"); }
        set { Schema.SetString(this.Handle, "CEnvCombinedLightProbeVolume", "m_LightGroups", value); }
    }

    // m_bMoveable
    public ref bool Moveable => ref Schema.GetRef<bool>(this.Handle, "CEnvCombinedLightProbeVolume", "m_bMoveable");

    // m_nHandshake
    public ref Int32 Handshake => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nHandshake");

    // m_nEnvCubeMapArrayIndex
    public ref Int32 EnvCubeMapArrayIndex => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nEnvCubeMapArrayIndex");

    // m_nPriority
    public ref Int32 Priority => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nPriority");

    // m_bStartDisabled
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CEnvCombinedLightProbeVolume", "m_bStartDisabled");

    // m_flEdgeFadeDist
    public ref float EdgeFadeDist => ref Schema.GetRef<float>(this.Handle, "CEnvCombinedLightProbeVolume", "m_flEdgeFadeDist");

    // m_vEdgeFadeDists
    public Vector EdgeFadeDists => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvCombinedLightProbeVolume", "m_vEdgeFadeDists");

    // m_nLightProbeSizeX
    public ref Int32 LightProbeSizeX => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nLightProbeSizeX");

    // m_nLightProbeSizeY
    public ref Int32 LightProbeSizeY => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nLightProbeSizeY");

    // m_nLightProbeSizeZ
    public ref Int32 LightProbeSizeZ => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nLightProbeSizeZ");

    // m_nLightProbeAtlasX
    public ref Int32 LightProbeAtlasX => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nLightProbeAtlasX");

    // m_nLightProbeAtlasY
    public ref Int32 LightProbeAtlasY => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nLightProbeAtlasY");

    // m_nLightProbeAtlasZ
    public ref Int32 LightProbeAtlasZ => ref Schema.GetRef<Int32>(this.Handle, "CEnvCombinedLightProbeVolume", "m_nLightProbeAtlasZ");

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CEnvCombinedLightProbeVolume", "m_bEnabled");

}

public partial class CEnvCubemap : CBaseEntity
{
    public CEnvCubemap (IntPtr pointer) : base(pointer) {}

    // m_hCubemapTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> CubemapTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvCubemap", "m_hCubemapTexture");

    // m_bCustomCubemapTexture
    public ref bool CustomCubemapTexture => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemap", "m_bCustomCubemapTexture");

    // m_flInfluenceRadius
    public ref float InfluenceRadius => ref Schema.GetRef<float>(this.Handle, "CEnvCubemap", "m_flInfluenceRadius");

    // m_vBoxProjectMins
    public Vector BoxProjectMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvCubemap", "m_vBoxProjectMins");

    // m_vBoxProjectMaxs
    public Vector BoxProjectMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvCubemap", "m_vBoxProjectMaxs");

    // m_LightGroups
    public string LightGroups
    {
        get { return Schema.GetUtf8String(this.Handle, "CEnvCubemap", "m_LightGroups"); }
        set { Schema.SetString(this.Handle, "CEnvCubemap", "m_LightGroups", value); }
    }

    // m_bMoveable
    public ref bool Moveable => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemap", "m_bMoveable");

    // m_nHandshake
    public ref Int32 Handshake => ref Schema.GetRef<Int32>(this.Handle, "CEnvCubemap", "m_nHandshake");

    // m_nEnvCubeMapArrayIndex
    public ref Int32 EnvCubeMapArrayIndex => ref Schema.GetRef<Int32>(this.Handle, "CEnvCubemap", "m_nEnvCubeMapArrayIndex");

    // m_nPriority
    public ref Int32 Priority => ref Schema.GetRef<Int32>(this.Handle, "CEnvCubemap", "m_nPriority");

    // m_flEdgeFadeDist
    public ref float EdgeFadeDist => ref Schema.GetRef<float>(this.Handle, "CEnvCubemap", "m_flEdgeFadeDist");

    // m_vEdgeFadeDists
    public Vector EdgeFadeDists => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvCubemap", "m_vEdgeFadeDists");

    // m_flDiffuseScale
    public ref float DiffuseScale => ref Schema.GetRef<float>(this.Handle, "CEnvCubemap", "m_flDiffuseScale");

    // m_bStartDisabled
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemap", "m_bStartDisabled");

    // m_bDefaultEnvMap
    public ref bool DefaultEnvMap => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemap", "m_bDefaultEnvMap");

    // m_bDefaultSpecEnvMap
    public ref bool DefaultSpecEnvMap => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemap", "m_bDefaultSpecEnvMap");

    // m_bIndoorCubeMap
    public ref bool IndoorCubeMap => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemap", "m_bIndoorCubeMap");

    // m_bCopyDiffuseFromDefaultCubemap
    public ref bool CopyDiffuseFromDefaultCubemap => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemap", "m_bCopyDiffuseFromDefaultCubemap");

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemap", "m_bEnabled");

}

public partial class CEnvCubemapBox : CEnvCubemap
{
    public CEnvCubemapBox (IntPtr pointer) : base(pointer) {}

}

public partial class CEnvCubemapFog : CBaseEntity
{
    public CEnvCubemapFog (IntPtr pointer) : base(pointer) {}

    // m_flEndDistance
    public ref float EndDistance => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flEndDistance");

    // m_flStartDistance
    public ref float StartDistance => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flStartDistance");

    // m_flFogFalloffExponent
    public ref float FogFalloffExponent => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flFogFalloffExponent");

    // m_bHeightFogEnabled
    public ref bool HeightFogEnabled => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemapFog", "m_bHeightFogEnabled");

    // m_flFogHeightWidth
    public ref float FogHeightWidth => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flFogHeightWidth");

    // m_flFogHeightEnd
    public ref float FogHeightEnd => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flFogHeightEnd");

    // m_flFogHeightStart
    public ref float FogHeightStart => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flFogHeightStart");

    // m_flFogHeightExponent
    public ref float FogHeightExponent => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flFogHeightExponent");

    // m_flLODBias
    public ref float LODBias => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flLODBias");

    // m_bActive
    public ref bool Active => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemapFog", "m_bActive");

    // m_bStartDisabled
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemapFog", "m_bStartDisabled");

    // m_flFogMaxOpacity
    public ref float FogMaxOpacity => ref Schema.GetRef<float>(this.Handle, "CEnvCubemapFog", "m_flFogMaxOpacity");

    // m_nCubemapSourceType
    public ref Int32 CubemapSourceType => ref Schema.GetRef<Int32>(this.Handle, "CEnvCubemapFog", "m_nCubemapSourceType");

    // m_hSkyMaterial
    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterial => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CEnvCubemapFog", "m_hSkyMaterial");

    // m_iszSkyEntity
    public string SkyEntity
    {
        get { return Schema.GetUtf8String(this.Handle, "CEnvCubemapFog", "m_iszSkyEntity"); }
        set { Schema.SetString(this.Handle, "CEnvCubemapFog", "m_iszSkyEntity", value); }
    }

    // m_hFogCubemapTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> FogCubemapTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvCubemapFog", "m_hFogCubemapTexture");

    // m_bHasHeightFogEnd
    public ref bool HasHeightFogEnd => ref Schema.GetRef<bool>(this.Handle, "CEnvCubemapFog", "m_bHasHeightFogEnd");

}

public partial class CEnvDecal : CBaseModelEntity
{
    public CEnvDecal (IntPtr pointer) : base(pointer) {}

    // m_hDecalMaterial
    public CStrongHandle<InfoForResourceTypeIMaterial2> DecalMaterial => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CEnvDecal", "m_hDecalMaterial");

    // m_flWidth
    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public ref float Width => ref Schema.GetRef<float>(this.Handle, "CEnvDecal", "m_flWidth");

    // m_flHeight
    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public ref float Height => ref Schema.GetRef<float>(this.Handle, "CEnvDecal", "m_flHeight");

    // m_flDepth
    // MNetworkChangeCallback "OnDecalDimensionsChanged"
    public ref float Depth => ref Schema.GetRef<float>(this.Handle, "CEnvDecal", "m_flDepth");

    // m_nRenderOrder
    public ref UInt32 RenderOrder => ref Schema.GetRef<UInt32>(this.Handle, "CEnvDecal", "m_nRenderOrder");

    // m_bProjectOnWorld
    public ref bool ProjectOnWorld => ref Schema.GetRef<bool>(this.Handle, "CEnvDecal", "m_bProjectOnWorld");

    // m_bProjectOnCharacters
    public ref bool ProjectOnCharacters => ref Schema.GetRef<bool>(this.Handle, "CEnvDecal", "m_bProjectOnCharacters");

    // m_bProjectOnWater
    public ref bool ProjectOnWater => ref Schema.GetRef<bool>(this.Handle, "CEnvDecal", "m_bProjectOnWater");

    // m_flDepthSortBias
    public ref float DepthSortBias => ref Schema.GetRef<float>(this.Handle, "CEnvDecal", "m_flDepthSortBias");

}

public partial class CEnvDetailController : CBaseEntity
{
    public CEnvDetailController (IntPtr pointer) : base(pointer) {}

    // m_flFadeStartDist
    public ref float FadeStartDist => ref Schema.GetRef<float>(this.Handle, "CEnvDetailController", "m_flFadeStartDist");

    // m_flFadeEndDist
    public ref float FadeEndDist => ref Schema.GetRef<float>(this.Handle, "CEnvDetailController", "m_flFadeEndDist");

}

public partial class CEnvLightProbeVolume : CBaseEntity
{
    public CEnvLightProbeVolume (IntPtr pointer) : base(pointer) {}

    // m_hLightProbeTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvLightProbeVolume", "m_hLightProbeTexture");

    // m_hLightProbeDirectLightIndicesTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightIndicesTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvLightProbeVolume", "m_hLightProbeDirectLightIndicesTexture");

    // m_hLightProbeDirectLightScalarsTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightScalarsTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvLightProbeVolume", "m_hLightProbeDirectLightScalarsTexture");

    // m_hLightProbeDirectLightShadowsTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightShadowsTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvLightProbeVolume", "m_hLightProbeDirectLightShadowsTexture");

    // m_vBoxMins
    public Vector BoxMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvLightProbeVolume", "m_vBoxMins");

    // m_vBoxMaxs
    public Vector BoxMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvLightProbeVolume", "m_vBoxMaxs");

    // m_LightGroups
    public string LightGroups
    {
        get { return Schema.GetUtf8String(this.Handle, "CEnvLightProbeVolume", "m_LightGroups"); }
        set { Schema.SetString(this.Handle, "CEnvLightProbeVolume", "m_LightGroups", value); }
    }

    // m_bMoveable
    public ref bool Moveable => ref Schema.GetRef<bool>(this.Handle, "CEnvLightProbeVolume", "m_bMoveable");

    // m_nHandshake
    public ref Int32 Handshake => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nHandshake");

    // m_nPriority
    public ref Int32 Priority => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nPriority");

    // m_bStartDisabled
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CEnvLightProbeVolume", "m_bStartDisabled");

    // m_nLightProbeSizeX
    public ref Int32 LightProbeSizeX => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeSizeX");

    // m_nLightProbeSizeY
    public ref Int32 LightProbeSizeY => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeSizeY");

    // m_nLightProbeSizeZ
    public ref Int32 LightProbeSizeZ => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeSizeZ");

    // m_nLightProbeAtlasX
    public ref Int32 LightProbeAtlasX => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeAtlasX");

    // m_nLightProbeAtlasY
    public ref Int32 LightProbeAtlasY => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeAtlasY");

    // m_nLightProbeAtlasZ
    public ref Int32 LightProbeAtlasZ => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeAtlasZ");

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CEnvLightProbeVolume", "m_bEnabled");

}

public partial class CEnvParticleGlow : CParticleSystem
{
    public CEnvParticleGlow (IntPtr pointer) : base(pointer) {}

    // m_flAlphaScale
    public ref float AlphaScale => ref Schema.GetRef<float>(this.Handle, "CEnvParticleGlow", "m_flAlphaScale");

    // m_flRadiusScale
    public ref float RadiusScale => ref Schema.GetRef<float>(this.Handle, "CEnvParticleGlow", "m_flRadiusScale");

    // m_flSelfIllumScale
    public ref float SelfIllumScale => ref Schema.GetRef<float>(this.Handle, "CEnvParticleGlow", "m_flSelfIllumScale");

    // m_ColorTint
    public Color ColorTint => Schema.GetDeclaredClass<Color>(this.Handle, "CEnvParticleGlow", "m_ColorTint");

    // m_hTextureOverride
    public CStrongHandle<InfoForResourceTypeCTextureBase> TextureOverride => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvParticleGlow", "m_hTextureOverride");

}

public partial class CEnvProjectedTexture : CModelPointEntity
{
    public CEnvProjectedTexture (IntPtr pointer) : base(pointer) {}

    // m_hTargetEntity
    public CHandle<CBaseEntity> TargetEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CEnvProjectedTexture", "m_hTargetEntity");

    // m_bState
    public ref bool State => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bState");

    // m_bAlwaysUpdate
    public ref bool AlwaysUpdate => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bAlwaysUpdate");

    // m_flLightFOV
    public ref float LightFOV => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flLightFOV");

    // m_bEnableShadows
    public ref bool EnableShadows => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bEnableShadows");

    // m_bSimpleProjection
    public ref bool SimpleProjection => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bSimpleProjection");

    // m_bLightOnlyTarget
    public ref bool LightOnlyTarget => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bLightOnlyTarget");

    // m_bLightWorld
    public ref bool LightWorld => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bLightWorld");

    // m_bCameraSpace
    public ref bool CameraSpace => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bCameraSpace");

    // m_flBrightnessScale
    public ref float BrightnessScale => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flBrightnessScale");

    // m_LightColor
    public Color LightColor => Schema.GetDeclaredClass<Color>(this.Handle, "CEnvProjectedTexture", "m_LightColor");

    // m_flIntensity
    public ref float Intensity => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flIntensity");

    // m_flLinearAttenuation
    public ref float LinearAttenuation => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flLinearAttenuation");

    // m_flQuadraticAttenuation
    public ref float QuadraticAttenuation => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flQuadraticAttenuation");

    // m_bVolumetric
    public ref bool Volumetric => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bVolumetric");

    // m_flNoiseStrength
    public ref float NoiseStrength => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flNoiseStrength");

    // m_flFlashlightTime
    public ref float FlashlightTime => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flFlashlightTime");

    // m_nNumPlanes
    public ref UInt32 NumPlanes => ref Schema.GetRef<UInt32>(this.Handle, "CEnvProjectedTexture", "m_nNumPlanes");

    // m_flPlaneOffset
    public ref float PlaneOffset => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flPlaneOffset");

    // m_flVolumetricIntensity
    public ref float VolumetricIntensity => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flVolumetricIntensity");

    // m_flColorTransitionTime
    public ref float ColorTransitionTime => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flColorTransitionTime");

    // m_flAmbient
    public ref float Ambient => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flAmbient");

    // m_SpotlightTextureName
    public string SpotlightTextureName
    {
        get { return Schema.GetString(this.Handle, "CEnvProjectedTexture", "m_SpotlightTextureName"); }
        set { Schema.SetString(this.Handle, "CEnvProjectedTexture", "m_SpotlightTextureName", value); }
    }

    // m_nSpotlightTextureFrame
    public ref Int32 SpotlightTextureFrame => ref Schema.GetRef<Int32>(this.Handle, "CEnvProjectedTexture", "m_nSpotlightTextureFrame");

    // m_nShadowQuality
    public ref UInt32 ShadowQuality => ref Schema.GetRef<UInt32>(this.Handle, "CEnvProjectedTexture", "m_nShadowQuality");

    // m_flNearZ
    // MNetworkBitCount "16"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "500.000000"
    // MNetworkEncodeFlags "1"
    public ref float NearZ => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flNearZ");

    // m_flFarZ
    // MNetworkBitCount "18"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1500.000000"
    // MNetworkEncodeFlags "1"
    public ref float FarZ => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flFarZ");

    // m_flProjectionSize
    public ref float ProjectionSize => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flProjectionSize");

    // m_flRotation
    public ref float Rotation => ref Schema.GetRef<float>(this.Handle, "CEnvProjectedTexture", "m_flRotation");

    // m_bFlipHorizontal
    public ref bool FlipHorizontal => ref Schema.GetRef<bool>(this.Handle, "CEnvProjectedTexture", "m_bFlipHorizontal");

}

public partial class CEnvScreenOverlay : CPointEntity
{
    public CEnvScreenOverlay (IntPtr pointer) : base(pointer) {}

    // m_iszOverlayNames
    public Span<string> OverlayNames => Schema.GetFixedArray<string>(this.Handle, "CEnvScreenOverlay", "m_iszOverlayNames", 10);

    // m_flOverlayTimes
    // MNetworkBitCount "11"
    // MNetworkMinValue "-1.000000"
    // MNetworkMaxValue "63.000000"
    public Span<float> OverlayTimes => Schema.GetFixedArray<float>(this.Handle, "CEnvScreenOverlay", "m_flOverlayTimes", 10);

    // m_flStartTime
    public ref float StartTime => ref Schema.GetRef<float>(this.Handle, "CEnvScreenOverlay", "m_flStartTime");

    // m_iDesiredOverlay
    public ref Int32 DesiredOverlay => ref Schema.GetRef<Int32>(this.Handle, "CEnvScreenOverlay", "m_iDesiredOverlay");

    // m_bIsActive
    public ref bool IsOverlayActive => ref Schema.GetRef<bool>(this.Handle, "CEnvScreenOverlay", "m_bIsActive");

}

public partial class CEnvSky : CBaseModelEntity
{
    public CEnvSky (IntPtr pointer) : base(pointer) {}

    // m_hSkyMaterial
    // MNetworkChangeCallback "SkyStateChanged"
    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterial => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CEnvSky", "m_hSkyMaterial");

    // m_hSkyMaterialLightingOnly
    // MNetworkChangeCallback "SkyStateChanged"
    public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterialLightingOnly => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CEnvSky", "m_hSkyMaterialLightingOnly");

    // m_bStartDisabled
    // MNetworkChangeCallback "SkyStateChanged"
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CEnvSky", "m_bStartDisabled");

    // m_vTintColor
    // MNetworkChangeCallback "SkyStateChanged"
    public Color TintColor => Schema.GetDeclaredClass<Color>(this.Handle, "CEnvSky", "m_vTintColor");

    // m_vTintColorLightingOnly
    // MNetworkChangeCallback "SkyStateChanged"
    public Color TintColorLightingOnly => Schema.GetDeclaredClass<Color>(this.Handle, "CEnvSky", "m_vTintColorLightingOnly");

    // m_flBrightnessScale
    // MNetworkChangeCallback "SkyStateChanged"
    public ref float BrightnessScale => ref Schema.GetRef<float>(this.Handle, "CEnvSky", "m_flBrightnessScale");

    // m_nFogType
    // MNetworkChangeCallback "SkyStateChanged"
    public ref Int32 FogType => ref Schema.GetRef<Int32>(this.Handle, "CEnvSky", "m_nFogType");

    // m_flFogMinStart
    // MNetworkChangeCallback "SkyStateChanged"
    public ref float FogMinStart => ref Schema.GetRef<float>(this.Handle, "CEnvSky", "m_flFogMinStart");

    // m_flFogMinEnd
    // MNetworkChangeCallback "SkyStateChanged"
    public ref float FogMinEnd => ref Schema.GetRef<float>(this.Handle, "CEnvSky", "m_flFogMinEnd");

    // m_flFogMaxStart
    // MNetworkChangeCallback "SkyStateChanged"
    public ref float FogMaxStart => ref Schema.GetRef<float>(this.Handle, "CEnvSky", "m_flFogMaxStart");

    // m_flFogMaxEnd
    // MNetworkChangeCallback "SkyStateChanged"
    public ref float FogMaxEnd => ref Schema.GetRef<float>(this.Handle, "CEnvSky", "m_flFogMaxEnd");

    // m_bEnabled
    // MNetworkChangeCallback "SkyStateChanged"
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CEnvSky", "m_bEnabled");

}

public partial class CEnvVolumetricFogController : CBaseEntity
{
    public CEnvVolumetricFogController (IntPtr pointer) : base(pointer) {}

    // m_flScattering
    public ref float Scattering => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flScattering");

    // m_flAnisotropy
    public ref float Anisotropy => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flAnisotropy");

    // m_flFadeSpeed
    public ref float FadeSpeed => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeSpeed");

    // m_flDrawDistance
    public ref float DrawDistance => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flDrawDistance");

    // m_flFadeInStart
    public ref float FadeInStart => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeInStart");

    // m_flFadeInEnd
    public ref float FadeInEnd => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeInEnd");

    // m_flIndirectStrength
    public ref float IndirectStrength => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flIndirectStrength");

    // m_nIndirectTextureDimX
    public ref Int32 IndirectTextureDimX => ref Schema.GetRef<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimX");

    // m_nIndirectTextureDimY
    public ref Int32 IndirectTextureDimY => ref Schema.GetRef<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimY");

    // m_nIndirectTextureDimZ
    public ref Int32 IndirectTextureDimZ => ref Schema.GetRef<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimZ");

    // m_vBoxMins
    public Vector BoxMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvVolumetricFogController", "m_vBoxMins");

    // m_vBoxMaxs
    public Vector BoxMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvVolumetricFogController", "m_vBoxMaxs");

    // m_bActive
    public ref bool Active => ref Schema.GetRef<bool>(this.Handle, "CEnvVolumetricFogController", "m_bActive");

    // m_flStartAnisoTime
    public ref float StartAnisoTime => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartAnisoTime");

    // m_flStartScatterTime
    public ref float StartScatterTime => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartScatterTime");

    // m_flStartDrawDistanceTime
    public ref float StartDrawDistanceTime => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartDrawDistanceTime");

    // m_flStartAnisotropy
    public ref float StartAnisotropy => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartAnisotropy");

    // m_flStartScattering
    public ref float StartScattering => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartScattering");

    // m_flStartDrawDistance
    public ref float StartDrawDistance => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartDrawDistance");

    // m_flDefaultAnisotropy
    public ref float DefaultAnisotropy => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultAnisotropy");

    // m_flDefaultScattering
    public ref float DefaultScattering => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultScattering");

    // m_flDefaultDrawDistance
    public ref float DefaultDrawDistance => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultDrawDistance");

    // m_bStartDisabled
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CEnvVolumetricFogController", "m_bStartDisabled");

    // m_bEnableIndirect
    public ref bool EnableIndirect => ref Schema.GetRef<bool>(this.Handle, "CEnvVolumetricFogController", "m_bEnableIndirect");

    // m_bIsMaster
    public ref bool IsMaster => ref Schema.GetRef<bool>(this.Handle, "CEnvVolumetricFogController", "m_bIsMaster");

    // m_hFogIndirectTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> FogIndirectTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvVolumetricFogController", "m_hFogIndirectTexture");

    // m_nForceRefreshCount
    public ref Int32 ForceRefreshCount => ref Schema.GetRef<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nForceRefreshCount");

}

public partial class CEnvVolumetricFogVolume : CBaseEntity
{
    public CEnvVolumetricFogVolume (IntPtr pointer) : base(pointer) {}

    // m_bActive
    public ref bool Active => ref Schema.GetRef<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bActive");

    // m_vBoxMins
    public Vector BoxMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvVolumetricFogVolume", "m_vBoxMins");

    // m_vBoxMaxs
    public Vector BoxMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvVolumetricFogVolume", "m_vBoxMaxs");

    // m_bStartDisabled
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bStartDisabled");

    // m_flStrength
    public ref float Strength => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogVolume", "m_flStrength");

    // m_nFalloffShape
    public ref Int32 FalloffShape => ref Schema.GetRef<Int32>(this.Handle, "CEnvVolumetricFogVolume", "m_nFalloffShape");

    // m_flFalloffExponent
    public ref float FalloffExponent => ref Schema.GetRef<float>(this.Handle, "CEnvVolumetricFogVolume", "m_flFalloffExponent");

}

public partial class CEnvWind : CBaseEntity
{
    public CEnvWind (IntPtr pointer) : base(pointer) {}

    // m_EnvWindShared
    public CEnvWindShared EnvWindShared => Schema.GetDeclaredClass<CEnvWindShared>(this.Handle, "CEnvWind", "m_EnvWindShared");

}

public partial class CEnvWindShared : NativeObject
{
    public CEnvWindShared (IntPtr pointer) : base(pointer) {}

    // m_flStartTime
    public ref float StartTime => ref Schema.GetRef<float>(this.Handle, "CEnvWindShared", "m_flStartTime");

    // m_iWindSeed
    public ref UInt32 WindSeed => ref Schema.GetRef<UInt32>(this.Handle, "CEnvWindShared", "m_iWindSeed");

    // m_iMinWind
    public ref UInt16 MinWind => ref Schema.GetRef<UInt16>(this.Handle, "CEnvWindShared", "m_iMinWind");

    // m_iMaxWind
    public ref UInt16 MaxWind => ref Schema.GetRef<UInt16>(this.Handle, "CEnvWindShared", "m_iMaxWind");

    // m_windRadius
    public ref Int32 WindRadius => ref Schema.GetRef<Int32>(this.Handle, "CEnvWindShared", "m_windRadius");

    // m_iMinGust
    public ref UInt16 MinGust => ref Schema.GetRef<UInt16>(this.Handle, "CEnvWindShared", "m_iMinGust");

    // m_iMaxGust
    public ref UInt16 MaxGust => ref Schema.GetRef<UInt16>(this.Handle, "CEnvWindShared", "m_iMaxGust");

    // m_flMinGustDelay
    public ref float MinGustDelay => ref Schema.GetRef<float>(this.Handle, "CEnvWindShared", "m_flMinGustDelay");

    // m_flMaxGustDelay
    public ref float MaxGustDelay => ref Schema.GetRef<float>(this.Handle, "CEnvWindShared", "m_flMaxGustDelay");

    // m_flGustDuration
    public ref float GustDuration => ref Schema.GetRef<float>(this.Handle, "CEnvWindShared", "m_flGustDuration");

    // m_iGustDirChange
    public ref UInt16 GustDirChange => ref Schema.GetRef<UInt16>(this.Handle, "CEnvWindShared", "m_iGustDirChange");

    // m_location
    // MNetworkEncoder "coord"
    public Vector Location => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvWindShared", "m_location");

    // m_iInitialWindDir
    public ref UInt16 InitialWindDir => ref Schema.GetRef<UInt16>(this.Handle, "CEnvWindShared", "m_iInitialWindDir");

    // m_flInitialWindSpeed
    public ref float InitialWindSpeed => ref Schema.GetRef<float>(this.Handle, "CEnvWindShared", "m_flInitialWindSpeed");

}

public partial class CFireCrackerBlast : CInferno
{
    public CFireCrackerBlast (IntPtr pointer) : base(pointer) {}

}

public partial class CFireSmoke : CBaseFire
{
    public CFireSmoke (IntPtr pointer) : base(pointer) {}

    // m_nFlameModelIndex
    public ref Int32 FlameModelIndex => ref Schema.GetRef<Int32>(this.Handle, "CFireSmoke", "m_nFlameModelIndex");

    // m_nFlameFromAboveModelIndex
    public ref Int32 FlameFromAboveModelIndex => ref Schema.GetRef<Int32>(this.Handle, "CFireSmoke", "m_nFlameFromAboveModelIndex");

}

public partial class CFish : CBaseAnimGraph
{
    public CFish (IntPtr pointer) : base(pointer) {}

    // m_x
    // MNetworkSerializer "fish_pos_x"
    public ref float X => ref Schema.GetRef<float>(this.Handle, "CFish", "m_x");

    // m_y
    // MNetworkSerializer "fish_pos_y"
    public ref float Y => ref Schema.GetRef<float>(this.Handle, "CFish", "m_y");

    // m_z
    // MNetworkSerializer "fish_pos_z"
    public ref float Z => ref Schema.GetRef<float>(this.Handle, "CFish", "m_z");

    // m_angle
    // MNetworkSerializer "angle_normalize_positive"
    // MNetworkBitCount "7"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "360.000000"
    // MNetworkEncodeFlags "1"
    public ref float Angle => ref Schema.GetRef<float>(this.Handle, "CFish", "m_angle");

    // m_poolOrigin
    // MNetworkEncoder "coord"
    public Vector PoolOrigin => Schema.GetDeclaredClass<Vector>(this.Handle, "CFish", "m_poolOrigin");

    // m_waterLevel
    public ref float FishWaterLevel => ref Schema.GetRef<float>(this.Handle, "CFish", "m_waterLevel");

}

public partial class CFists : CCSWeaponBase
{
    public CFists (IntPtr pointer) : base(pointer) {}

    // m_bPlayingUninterruptableAct
    public ref bool PlayingUninterruptableAct => ref Schema.GetRef<bool>(this.Handle, "CFists", "m_bPlayingUninterruptableAct");

    // m_nUninterruptableActivity
    // MNetworkChangeCallback "OnUninterruptChanged"
    public ref PlayerAnimEvent_t UninterruptableActivity => ref Schema.GetRef<PlayerAnimEvent_t>(this.Handle, "CFists", "m_nUninterruptableActivity");

}

public partial class CFlashbang : CBaseCSGrenade
{
    public CFlashbang (IntPtr pointer) : base(pointer) {}

}

public partial class CFogController : CBaseEntity
{
    public CFogController (IntPtr pointer) : base(pointer) {}

    // m_fog
    public fogparams_t Fog => Schema.GetDeclaredClass<fogparams_t>(this.Handle, "CFogController", "m_fog");

}

public partial class CFootstepControl : CBaseTrigger
{
    public CFootstepControl (IntPtr pointer) : base(pointer) {}

    // m_source
    public string Source
    {
        get { return Schema.GetUtf8String(this.Handle, "CFootstepControl", "m_source"); }
        set { Schema.SetString(this.Handle, "CFootstepControl", "m_source", value); }
    }

    // m_destination
    public string Destination
    {
        get { return Schema.GetUtf8String(this.Handle, "CFootstepControl", "m_destination"); }
        set { Schema.SetString(this.Handle, "CFootstepControl", "m_destination", value); }
    }

}

public partial class CFuncBrush : CBaseModelEntity
{
    public CFuncBrush (IntPtr pointer) : base(pointer) {}

}

public partial class CFuncConveyor : CBaseModelEntity
{
    public CFuncConveyor (IntPtr pointer) : base(pointer) {}

    // m_vecMoveDirEntitySpace
    public Vector MoveDirEntitySpace => Schema.GetDeclaredClass<Vector>(this.Handle, "CFuncConveyor", "m_vecMoveDirEntitySpace");

    // m_flTargetSpeed
    public ref float TargetSpeed => ref Schema.GetRef<float>(this.Handle, "CFuncConveyor", "m_flTargetSpeed");

    // m_nTransitionStartTick
    // m_nTransitionDurationTicks
    public ref Int32 TransitionDurationTicks => ref Schema.GetRef<Int32>(this.Handle, "CFuncConveyor", "m_nTransitionDurationTicks");

    // m_flTransitionStartSpeed
    public ref float TransitionStartSpeed => ref Schema.GetRef<float>(this.Handle, "CFuncConveyor", "m_flTransitionStartSpeed");

    // m_hConveyorModels
    public NetworkedVector<CHandle<CBaseEntity>> ConveyorModels => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseEntity>>>(this.Handle, "CFuncConveyor", "m_hConveyorModels");

}

public partial class CFuncElectrifiedVolume : CFuncBrush
{
    public CFuncElectrifiedVolume (IntPtr pointer) : base(pointer) {}

    // m_EffectName
    public string EffectName
    {
        get { return Schema.GetUtf8String(this.Handle, "CFuncElectrifiedVolume", "m_EffectName"); }
        set { Schema.SetString(this.Handle, "CFuncElectrifiedVolume", "m_EffectName", value); }
    }

}

public partial class CFuncLadder : CBaseModelEntity
{
    public CFuncLadder (IntPtr pointer) : base(pointer) {}

    // m_vecLadderDir
    // MNetworkEncoder "coord"
    public Vector LadderDir => Schema.GetDeclaredClass<Vector>(this.Handle, "CFuncLadder", "m_vecLadderDir");

    // m_vecPlayerMountPositionTop
    // MNetworkEncoder "coord"
    public Vector PlayerMountPositionTop => Schema.GetDeclaredClass<Vector>(this.Handle, "CFuncLadder", "m_vecPlayerMountPositionTop");

    // m_vecPlayerMountPositionBottom
    // MNetworkEncoder "coord"
    public Vector PlayerMountPositionBottom => Schema.GetDeclaredClass<Vector>(this.Handle, "CFuncLadder", "m_vecPlayerMountPositionBottom");

    // m_flAutoRideSpeed
    public ref float AutoRideSpeed => ref Schema.GetRef<float>(this.Handle, "CFuncLadder", "m_flAutoRideSpeed");

    // m_bFakeLadder
    public ref bool FakeLadder => ref Schema.GetRef<bool>(this.Handle, "CFuncLadder", "m_bFakeLadder");

}

public partial class CFuncMonitor : CFuncBrush
{
    public CFuncMonitor (IntPtr pointer) : base(pointer) {}

    // m_targetCamera
    public string TargetCamera
    {
        get { return Schema.GetUtf8String(this.Handle, "CFuncMonitor", "m_targetCamera"); }
        set { Schema.SetString(this.Handle, "CFuncMonitor", "m_targetCamera", value); }
    }

    // m_nResolutionEnum
    public ref Int32 ResolutionEnum => ref Schema.GetRef<Int32>(this.Handle, "CFuncMonitor", "m_nResolutionEnum");

    // m_bRenderShadows
    public ref bool RenderShadows => ref Schema.GetRef<bool>(this.Handle, "CFuncMonitor", "m_bRenderShadows");

    // m_bUseUniqueColorTarget
    public ref bool UseUniqueColorTarget => ref Schema.GetRef<bool>(this.Handle, "CFuncMonitor", "m_bUseUniqueColorTarget");

    // m_brushModelName
    public string BrushModelName
    {
        get { return Schema.GetUtf8String(this.Handle, "CFuncMonitor", "m_brushModelName"); }
        set { Schema.SetString(this.Handle, "CFuncMonitor", "m_brushModelName", value); }
    }

    // m_hTargetCamera
    public CHandle<CBaseEntity> HTargetCamera => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CFuncMonitor", "m_hTargetCamera");

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CFuncMonitor", "m_bEnabled");

    // m_bDraw3DSkybox
    public ref bool Draw3DSkybox => ref Schema.GetRef<bool>(this.Handle, "CFuncMonitor", "m_bDraw3DSkybox");

}

public partial class CFuncMoveLinear : CBaseToggle
{
    public CFuncMoveLinear (IntPtr pointer) : base(pointer) {}

}

public partial class CFuncRotating : CBaseModelEntity
{
    public CFuncRotating (IntPtr pointer) : base(pointer) {}

}

public partial class CFuncTrackTrain : CBaseModelEntity
{
    public CFuncTrackTrain (IntPtr pointer) : base(pointer) {}

}

public partial class CFuncWater : CBaseModelEntity
{
    public CFuncWater (IntPtr pointer) : base(pointer) {}

}

public partial class CGameRules : NativeObject
{
    public CGameRules (IntPtr pointer) : base(pointer) {}

}

public partial class CGameRulesProxy : CBaseEntity
{
    public CGameRulesProxy (IntPtr pointer) : base(pointer) {}

}

public partial class CGameSceneNode : NativeObject
{
    public CGameSceneNode (IntPtr pointer) : base(pointer) {}

    // m_hParent
    // MNetworkSerializer "gameSceneNode"
    // MNetworkChangeCallback "gameSceneNodeHierarchyParentChanged"
    // MNetworkPriority "32"
    // MNetworkVarEmbeddedFieldOffsetDelta "8"
    // m_vecOrigin
    // MNetworkPriority "32"
    // MNetworkUserGroup "Origin"
    // MNetworkChangeCallback "gameSceneNodeLocalOriginChanged"
    public CNetworkOriginCellCoordQuantizedVector Origin => Schema.GetDeclaredClass<CNetworkOriginCellCoordQuantizedVector>(this.Handle, "CGameSceneNode", "m_vecOrigin");

    // m_vecAbsOrigin
    public Vector AbsOrigin => Schema.GetDeclaredClass<Vector>(this.Handle, "CGameSceneNode", "m_vecAbsOrigin");

    // m_angAbsRotation
    public QAngle AbsRotation => Schema.GetDeclaredClass<QAngle>(this.Handle, "CGameSceneNode", "m_angAbsRotation");

    // m_angRotation
    // MNetworkEncoder "qangle_precise"
    // MNetworkPriority "32"
    // MNetworkSerializer "gameSceneNodeStepSimulationAnglesSerializer"
    // MNetworkChangeCallback "gameSceneNodeLocalAnglesChanged"
    public QAngle Rotation => Schema.GetDeclaredClass<QAngle>(this.Handle, "CGameSceneNode", "m_angRotation");

    // m_flScale
    // MNetworkChangeCallback "gameSceneNodeLocalScaleChanged"
    // MNetworkPriority "32"
    public ref float Scale => ref Schema.GetRef<float>(this.Handle, "CGameSceneNode", "m_flScale");

    // m_name
    public CUtlStringToken Name => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "CGameSceneNode", "m_name");

    // m_hierarchyAttachName
    // MNetworkChangeCallback "gameSceneNodeHierarchyAttachmentChanged"
    public CUtlStringToken HierarchyAttachName => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "CGameSceneNode", "m_hierarchyAttachName");

}

public partial class CGlowProperty : NativeObject
{
    public CGlowProperty (IntPtr pointer) : base(pointer) {}

    // m_iGlowType
    // MNetworkChangeCallback "OnGlowTypeChanged"
    public ref Int32 GlowType => ref Schema.GetRef<Int32>(this.Handle, "CGlowProperty", "m_iGlowType");

    // m_iGlowTeam
    public ref Int32 GlowTeam => ref Schema.GetRef<Int32>(this.Handle, "CGlowProperty", "m_iGlowTeam");

    // m_nGlowRange
    public ref Int32 GlowRange => ref Schema.GetRef<Int32>(this.Handle, "CGlowProperty", "m_nGlowRange");

    // m_nGlowRangeMin
    public ref Int32 GlowRangeMin => ref Schema.GetRef<Int32>(this.Handle, "CGlowProperty", "m_nGlowRangeMin");

    // m_glowColorOverride
    // MNetworkChangeCallback "OnGlowColorChanged"
    public Color GlowColorOverride => Schema.GetDeclaredClass<Color>(this.Handle, "CGlowProperty", "m_glowColorOverride");

    // m_bFlashing
    public ref bool Flashing => ref Schema.GetRef<bool>(this.Handle, "CGlowProperty", "m_bFlashing");

    // m_flGlowTime
    public ref float GlowTime => ref Schema.GetRef<float>(this.Handle, "CGlowProperty", "m_flGlowTime");

    // m_flGlowStartTime
    public ref float GlowStartTime => ref Schema.GetRef<float>(this.Handle, "CGlowProperty", "m_flGlowStartTime");

    // m_bEligibleForScreenHighlight
    public ref bool EligibleForScreenHighlight => ref Schema.GetRef<bool>(this.Handle, "CGlowProperty", "m_bEligibleForScreenHighlight");

}

public partial class CGradientFog : CBaseEntity
{
    public CGradientFog (IntPtr pointer) : base(pointer) {}

    // m_hGradientFogTexture
    public CStrongHandle<InfoForResourceTypeCTextureBase> GradientFogTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CGradientFog", "m_hGradientFogTexture");

    // m_flFogStartDistance
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FogStartDistance => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFogStartDistance");

    // m_flFogEndDistance
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FogEndDistance => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFogEndDistance");

    // m_bHeightFogEnabled
    // MNetworkChangeCallback "FogStateChanged"
    public ref bool HeightFogEnabled => ref Schema.GetRef<bool>(this.Handle, "CGradientFog", "m_bHeightFogEnabled");

    // m_flFogStartHeight
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FogStartHeight => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFogStartHeight");

    // m_flFogEndHeight
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FogEndHeight => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFogEndHeight");

    // m_flFarZ
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FarZ => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFarZ");

    // m_flFogMaxOpacity
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FogMaxOpacity => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFogMaxOpacity");

    // m_flFogFalloffExponent
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FogFalloffExponent => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFogFalloffExponent");

    // m_flFogVerticalExponent
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FogVerticalExponent => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFogVerticalExponent");

    // m_fogColor
    // MNetworkChangeCallback "FogStateChanged"
    public Color FogColor => Schema.GetDeclaredClass<Color>(this.Handle, "CGradientFog", "m_fogColor");

    // m_flFogStrength
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FogStrength => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFogStrength");

    // m_flFadeTime
    // MNetworkChangeCallback "FogStateChanged"
    public ref float FadeTime => ref Schema.GetRef<float>(this.Handle, "CGradientFog", "m_flFadeTime");

    // m_bStartDisabled
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CGradientFog", "m_bStartDisabled");

    // m_bIsEnabled
    public ref bool IsEnabled => ref Schema.GetRef<bool>(this.Handle, "CGradientFog", "m_bIsEnabled");

}

public partial class CHandleTest : CBaseEntity
{
    public CHandleTest (IntPtr pointer) : base(pointer) {}

    // m_Handle
    public CHandle<CBaseEntity> TestHandle => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CHandleTest", "m_Handle");

    // m_bSendHandle
    public ref bool SendHandle => ref Schema.GetRef<bool>(this.Handle, "CHandleTest", "m_bSendHandle");

}

public partial class CHEGrenade : CBaseCSGrenade
{
    public CHEGrenade (IntPtr pointer) : base(pointer) {}

}

public partial class CHitboxComponent : CEntityComponent
{
    public CHitboxComponent (IntPtr pointer) : base(pointer) {}

    // m_bvDisabledHitGroups
    public Span<UInt32> DisabledHitGroups => Schema.GetFixedArray<UInt32>(this.Handle, "CHitboxComponent", "m_bvDisabledHitGroups", 1);

}

public partial class CHostage : CHostageExpresserShim
{
    public CHostage (IntPtr pointer) : base(pointer) {}

    // m_entitySpottedState
    public EntitySpottedState_t EntitySpottedState => Schema.GetDeclaredClass<EntitySpottedState_t>(this.Handle, "CHostage", "m_entitySpottedState");

    // m_vel
    public Vector Vel => Schema.GetDeclaredClass<Vector>(this.Handle, "CHostage", "m_vel");

    // m_isRescued
    public ref bool IsRescued => ref Schema.GetRef<bool>(this.Handle, "CHostage", "m_isRescued");

    // m_jumpedThisFrame
    public ref bool JumpedThisFrame => ref Schema.GetRef<bool>(this.Handle, "CHostage", "m_jumpedThisFrame");

    // m_nHostageState
    public ref Int32 HostageState => ref Schema.GetRef<Int32>(this.Handle, "CHostage", "m_nHostageState");

    // m_leader
    public CHandle<CBaseEntity> Leader => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CHostage", "m_leader");

    // m_reuseTimer
    public CountdownTimer ReuseTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CHostage", "m_reuseTimer");

    // m_bHandsHaveBeenCut
    public ref bool HandsHaveBeenCut => ref Schema.GetRef<bool>(this.Handle, "CHostage", "m_bHandsHaveBeenCut");

    // m_hHostageGrabber
    public CHandle<CCSPlayerPawn> HostageGrabber => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CHostage", "m_hHostageGrabber");

    // m_flRescueStartTime
    public ref float RescueStartTime => ref Schema.GetRef<float>(this.Handle, "CHostage", "m_flRescueStartTime");

    // m_flGrabSuccessTime
    public ref float GrabSuccessTime => ref Schema.GetRef<float>(this.Handle, "CHostage", "m_flGrabSuccessTime");

    // m_flDropStartTime
    public ref float DropStartTime => ref Schema.GetRef<float>(this.Handle, "CHostage", "m_flDropStartTime");

}

public partial class CHostageCarriableProp : CBaseAnimGraph
{
    public CHostageCarriableProp (IntPtr pointer) : base(pointer) {}

}

public partial class CHostageExpresserShim : CBaseCombatCharacter
{
    public CHostageExpresserShim (IntPtr pointer) : base(pointer) {}

}

public partial class CHostageRescueZone : CHostageRescueZoneShim
{
    public CHostageRescueZone (IntPtr pointer) : base(pointer) {}

}

public partial class CHostageRescueZoneShim : CBaseTrigger
{
    public CHostageRescueZoneShim (IntPtr pointer) : base(pointer) {}

}

public partial class CIncendiaryGrenade : CMolotovGrenade
{
    public CIncendiaryGrenade (IntPtr pointer) : base(pointer) {}

}

public partial class CInferno : CBaseModelEntity
{
    public CInferno (IntPtr pointer) : base(pointer) {}

    // m_fireXDelta
    public Span<Int32> FireXDelta => Schema.GetFixedArray<Int32>(this.Handle, "CInferno", "m_fireXDelta", 64);

    // m_fireYDelta
    public Span<Int32> FireYDelta => Schema.GetFixedArray<Int32>(this.Handle, "CInferno", "m_fireYDelta", 64);

    // m_fireZDelta
    public Span<Int32> FireZDelta => Schema.GetFixedArray<Int32>(this.Handle, "CInferno", "m_fireZDelta", 64);

    // m_fireParentXDelta
    public Span<Int32> FireParentXDelta => Schema.GetFixedArray<Int32>(this.Handle, "CInferno", "m_fireParentXDelta", 64);

    // m_fireParentYDelta
    public Span<Int32> FireParentYDelta => Schema.GetFixedArray<Int32>(this.Handle, "CInferno", "m_fireParentYDelta", 64);

    // m_fireParentZDelta
    public Span<Int32> FireParentZDelta => Schema.GetFixedArray<Int32>(this.Handle, "CInferno", "m_fireParentZDelta", 64);

    // m_bFireIsBurning
    public Span<bool> FireIsBurning => Schema.GetFixedArray<bool>(this.Handle, "CInferno", "m_bFireIsBurning", 64);

    // m_BurnNormal
    public Span<Vector> BurnNormal => Schema.GetFixedArray<Vector>(this.Handle, "CInferno", "m_BurnNormal", 64);

    // m_fireCount
    public ref Int32 FireCount => ref Schema.GetRef<Int32>(this.Handle, "CInferno", "m_fireCount");

    // m_nInfernoType
    public ref Int32 InfernoType => ref Schema.GetRef<Int32>(this.Handle, "CInferno", "m_nInfernoType");

    // m_nFireEffectTickBegin
    public ref Int32 FireEffectTickBegin => ref Schema.GetRef<Int32>(this.Handle, "CInferno", "m_nFireEffectTickBegin");

    // m_nFireLifetime
    public ref float FireLifetime => ref Schema.GetRef<float>(this.Handle, "CInferno", "m_nFireLifetime");

    // m_bInPostEffectTime
    public ref bool InPostEffectTime => ref Schema.GetRef<bool>(this.Handle, "CInferno", "m_bInPostEffectTime");

}

public partial class CInfoInstructorHintHostageRescueZone : CPointEntity
{
    public CInfoInstructorHintHostageRescueZone (IntPtr pointer) : base(pointer) {}

}

public partial class CInfoLadderDismount : CBaseEntity
{
    public CInfoLadderDismount (IntPtr pointer) : base(pointer) {}

}

public partial class CInfoOffscreenPanoramaTexture : CPointEntity
{
    public CInfoOffscreenPanoramaTexture (IntPtr pointer) : base(pointer) {}

    // m_bDisabled
    public ref bool Disabled => ref Schema.GetRef<bool>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_bDisabled");

    // m_nResolutionX
    public ref Int32 ResolutionX => ref Schema.GetRef<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nResolutionX");

    // m_nResolutionY
    public ref Int32 ResolutionY => ref Schema.GetRef<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nResolutionY");

    // m_szLayoutFileName
    public string LayoutFileName
    {
        get { return Schema.GetUtf8String(this.Handle, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName"); }
        set { Schema.SetString(this.Handle, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName", value); }
    }

    // m_RenderAttrName
    public string RenderAttrName
    {
        get { return Schema.GetUtf8String(this.Handle, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName"); }
        set { Schema.SetString(this.Handle, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName", value); }
    }

    // m_TargetEntities
    public NetworkedVector<CHandle<CBaseModelEntity>> TargetEntities => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseModelEntity>>>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_TargetEntities");

    // m_nTargetChangeCount
    public ref Int32 TargetChangeCount => ref Schema.GetRef<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount");

    // m_vecCSSClasses
    public NetworkedVector<string> CSSClasses => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_vecCSSClasses");

}

public partial class CInfoVisibilityBox : CBaseEntity
{
    public CInfoVisibilityBox (IntPtr pointer) : base(pointer) {}

    // m_nMode
    public ref Int32 Mode => ref Schema.GetRef<Int32>(this.Handle, "CInfoVisibilityBox", "m_nMode");

    // m_vBoxSize
    public Vector BoxSize => Schema.GetDeclaredClass<Vector>(this.Handle, "CInfoVisibilityBox", "m_vBoxSize");

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CInfoVisibilityBox", "m_bEnabled");

}

public partial class CInfoWorldLayer : CBaseEntity
{
    public CInfoWorldLayer (IntPtr pointer) : base(pointer) {}

    // m_worldName
    public string WorldName
    {
        get { return Schema.GetUtf8String(this.Handle, "CInfoWorldLayer", "m_worldName"); }
        set { Schema.SetString(this.Handle, "CInfoWorldLayer", "m_worldName", value); }
    }

    // m_layerName
    public string LayerName
    {
        get { return Schema.GetUtf8String(this.Handle, "CInfoWorldLayer", "m_layerName"); }
        set { Schema.SetString(this.Handle, "CInfoWorldLayer", "m_layerName", value); }
    }

    // m_bWorldLayerVisible
    public ref bool WorldLayerVisible => ref Schema.GetRef<bool>(this.Handle, "CInfoWorldLayer", "m_bWorldLayerVisible");

    // m_bEntitiesSpawned
    public ref bool EntitiesSpawned => ref Schema.GetRef<bool>(this.Handle, "CInfoWorldLayer", "m_bEntitiesSpawned");

}

public partial class CItem : CBaseAnimGraph
{
    public CItem (IntPtr pointer) : base(pointer) {}

}

public partial class CItem_Healthshot : CWeaponBaseItem
{
    public CItem_Healthshot (IntPtr pointer) : base(pointer) {}

}

public partial class CItemDogtags : CItem
{
    public CItemDogtags (IntPtr pointer) : base(pointer) {}

    // m_OwningPlayer
    public CHandle<CCSPlayerPawn> OwningPlayer => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CItemDogtags", "m_OwningPlayer");

    // m_KillingPlayer
    public CHandle<CCSPlayerPawn> KillingPlayer => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CItemDogtags", "m_KillingPlayer");

}

public partial class CKnife : CCSWeaponBase
{
    public CKnife (IntPtr pointer) : base(pointer) {}

}

public partial class CLightComponent : CEntityComponent
{
    public CLightComponent (IntPtr pointer) : base(pointer) {}

    // m_Color
    // MNetworkChangeCallback "LightRenderingChanged"
    public Color Color => Schema.GetDeclaredClass<Color>(this.Handle, "CLightComponent", "m_Color");

    // m_SecondaryColor
    // MNetworkChangeCallback "LightRenderingChanged"
    public Color SecondaryColor => Schema.GetDeclaredClass<Color>(this.Handle, "CLightComponent", "m_SecondaryColor");

    // m_flBrightness
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float Brightness => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flBrightness");

    // m_flBrightnessScale
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float BrightnessScale => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flBrightnessScale");

    // m_flBrightnessMult
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float BrightnessMult => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flBrightnessMult");

    // m_flRange
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float Range => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flRange");

    // m_flFalloff
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float Falloff => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flFalloff");

    // m_flAttenuation0
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float Attenuation0 => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flAttenuation0");

    // m_flAttenuation1
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float Attenuation1 => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flAttenuation1");

    // m_flAttenuation2
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float Attenuation2 => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flAttenuation2");

    // m_flTheta
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float Theta => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flTheta");

    // m_flPhi
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float Phi => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flPhi");

    // m_hLightCookie
    // MNetworkChangeCallback "LightRenderingChanged"
    public CStrongHandle<InfoForResourceTypeCTextureBase> LightCookie => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CLightComponent", "m_hLightCookie");

    // m_nCascades
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 Cascades => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nCascades");

    // m_nCastShadows
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 CastShadows => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nCastShadows");

    // m_nShadowWidth
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 ShadowWidth => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nShadowWidth");

    // m_nShadowHeight
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 ShadowHeight => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nShadowHeight");

    // m_bRenderDiffuse
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref bool RenderDiffuse => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bRenderDiffuse");

    // m_nRenderSpecular
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 RenderSpecular => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nRenderSpecular");

    // m_bRenderTransmissive
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref bool RenderTransmissive => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bRenderTransmissive");

    // m_flOrthoLightWidth
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float OrthoLightWidth => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flOrthoLightWidth");

    // m_flOrthoLightHeight
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float OrthoLightHeight => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flOrthoLightHeight");

    // m_nStyle
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 Style => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nStyle");

    // m_Pattern
    // MNetworkChangeCallback "LightRenderingChanged"
    public string Pattern
    {
        get { return Schema.GetUtf8String(this.Handle, "CLightComponent", "m_Pattern"); }
        set { Schema.SetString(this.Handle, "CLightComponent", "m_Pattern", value); }
    }

    // m_nCascadeRenderStaticObjects
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 CascadeRenderStaticObjects => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nCascadeRenderStaticObjects");

    // m_flShadowCascadeCrossFade
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float ShadowCascadeCrossFade => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flShadowCascadeCrossFade");

    // m_flShadowCascadeDistanceFade
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float ShadowCascadeDistanceFade => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flShadowCascadeDistanceFade");

    // m_flShadowCascadeDistance0
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float ShadowCascadeDistance0 => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flShadowCascadeDistance0");

    // m_flShadowCascadeDistance1
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float ShadowCascadeDistance1 => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flShadowCascadeDistance1");

    // m_flShadowCascadeDistance2
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float ShadowCascadeDistance2 => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flShadowCascadeDistance2");

    // m_flShadowCascadeDistance3
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float ShadowCascadeDistance3 => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flShadowCascadeDistance3");

    // m_nShadowCascadeResolution0
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 ShadowCascadeResolution0 => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nShadowCascadeResolution0");

    // m_nShadowCascadeResolution1
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 ShadowCascadeResolution1 => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nShadowCascadeResolution1");

    // m_nShadowCascadeResolution2
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 ShadowCascadeResolution2 => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nShadowCascadeResolution2");

    // m_nShadowCascadeResolution3
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 ShadowCascadeResolution3 => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nShadowCascadeResolution3");

    // m_bUsesBakedShadowing
    // MNetworkChangeCallback "LightRenderingChanged"
    // MNetworkAlias "m_bUsesIndexedBakedLighting"
    public ref bool UsesBakedShadowing => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bUsesBakedShadowing");

    // m_nShadowPriority
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 ShadowPriority => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nShadowPriority");

    // m_nBakedShadowIndex
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref Int32 BakedShadowIndex => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nBakedShadowIndex");

    // m_bRenderToCubemaps
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref bool RenderToCubemaps => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bRenderToCubemaps");

    // m_LightGroups
    // MNetworkChangeCallback "LightRenderingChanged"
    public string LightGroups
    {
        get { return Schema.GetUtf8String(this.Handle, "CLightComponent", "m_LightGroups"); }
        set { Schema.SetString(this.Handle, "CLightComponent", "m_LightGroups", value); }
    }

    // m_nDirectLight
    public ref Int32 DirectLight => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nDirectLight");

    // m_nIndirectLight
    public ref Int32 IndirectLight => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nIndirectLight");

    // m_flFadeMinDist
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float FadeMinDist => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flFadeMinDist");

    // m_flFadeMaxDist
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float FadeMaxDist => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flFadeMaxDist");

    // m_flShadowFadeMinDist
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float ShadowFadeMinDist => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flShadowFadeMinDist");

    // m_flShadowFadeMaxDist
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float ShadowFadeMaxDist => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flShadowFadeMaxDist");

    // m_bEnabled
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bEnabled");

    // m_bFlicker
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref bool Flicker => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bFlicker");

    // m_bPrecomputedFieldsValid
    public ref bool PrecomputedFieldsValid => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bPrecomputedFieldsValid");

    // m_vPrecomputedBoundsMins
    public Vector PrecomputedBoundsMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CLightComponent", "m_vPrecomputedBoundsMins");

    // m_vPrecomputedBoundsMaxs
    public Vector PrecomputedBoundsMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CLightComponent", "m_vPrecomputedBoundsMaxs");

    // m_vPrecomputedOBBOrigin
    public Vector PrecomputedOBBOrigin => Schema.GetDeclaredClass<Vector>(this.Handle, "CLightComponent", "m_vPrecomputedOBBOrigin");

    // m_vPrecomputedOBBAngles
    public QAngle PrecomputedOBBAngles => Schema.GetDeclaredClass<QAngle>(this.Handle, "CLightComponent", "m_vPrecomputedOBBAngles");

    // m_vPrecomputedOBBExtent
    public Vector PrecomputedOBBExtent => Schema.GetDeclaredClass<Vector>(this.Handle, "CLightComponent", "m_vPrecomputedOBBExtent");

    // m_flPrecomputedMaxRange
    public ref float PrecomputedMaxRange => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flPrecomputedMaxRange");

    // m_nFogLightingMode
    public ref Int32 FogLightingMode => ref Schema.GetRef<Int32>(this.Handle, "CLightComponent", "m_nFogLightingMode");

    // m_flFogContributionStength
    public ref float FogContributionStength => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flFogContributionStength");

    // m_flNearClipPlane
    public ref float NearClipPlane => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flNearClipPlane");

    // m_SkyColor
    public Color SkyColor => Schema.GetDeclaredClass<Color>(this.Handle, "CLightComponent", "m_SkyColor");

    // m_flSkyIntensity
    public ref float SkyIntensity => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flSkyIntensity");

    // m_SkyAmbientBounce
    public Color SkyAmbientBounce => Schema.GetDeclaredClass<Color>(this.Handle, "CLightComponent", "m_SkyAmbientBounce");

    // m_bUseSecondaryColor
    public ref bool UseSecondaryColor => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bUseSecondaryColor");

    // m_bMixedShadows
    // MNetworkChangeCallback "MixedShadowsChanged"
    public ref bool MixedShadows => ref Schema.GetRef<bool>(this.Handle, "CLightComponent", "m_bMixedShadows");

    // m_flLightStyleStartTime
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float LightStyleStartTime => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flLightStyleStartTime");

    // m_flCapsuleLength
    public ref float CapsuleLength => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flCapsuleLength");

    // m_flMinRoughness
    // MNetworkChangeCallback "LightRenderingChanged"
    public ref float MinRoughness => ref Schema.GetRef<float>(this.Handle, "CLightComponent", "m_flMinRoughness");

}

public partial class CLightDirectionalEntity : CLightEntity
{
    public CLightDirectionalEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CLightEntity : CBaseModelEntity
{
    public CLightEntity (IntPtr pointer) : base(pointer) {}

    // m_CLightComponent
    // MNetworkUserGroup "CLightComponent"
    // MNetworkAlias "CLightComponent"
    // MNetworkTypeAlias "CLightComponent"
    public CLightComponent? CLightComponent => Schema.GetPointer<CLightComponent>(this.Handle, "CLightEntity", "m_CLightComponent");

}

public partial class CLightEnvironmentEntity : CLightDirectionalEntity
{
    public CLightEnvironmentEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CLightGlow : CBaseModelEntity
{
    public CLightGlow (IntPtr pointer) : base(pointer) {}

    // m_nHorizontalSize
    public ref UInt32 HorizontalSize => ref Schema.GetRef<UInt32>(this.Handle, "CLightGlow", "m_nHorizontalSize");

    // m_nVerticalSize
    public ref UInt32 VerticalSize => ref Schema.GetRef<UInt32>(this.Handle, "CLightGlow", "m_nVerticalSize");

    // m_nMinDist
    public ref UInt32 MinDist => ref Schema.GetRef<UInt32>(this.Handle, "CLightGlow", "m_nMinDist");

    // m_nMaxDist
    public ref UInt32 MaxDist => ref Schema.GetRef<UInt32>(this.Handle, "CLightGlow", "m_nMaxDist");

    // m_nOuterMaxDist
    public ref UInt32 OuterMaxDist => ref Schema.GetRef<UInt32>(this.Handle, "CLightGlow", "m_nOuterMaxDist");

    // m_flGlowProxySize
    // MNetworkBitCount "6"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "2"
    public ref float GlowProxySize => ref Schema.GetRef<float>(this.Handle, "CLightGlow", "m_flGlowProxySize");

    // m_flHDRColorScale
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public ref float HDRColorScale => ref Schema.GetRef<float>(this.Handle, "CLightGlow", "m_flHDRColorScale");

}

public partial class CLightOrthoEntity : CLightEntity
{
    public CLightOrthoEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CLightSpotEntity : CLightEntity
{
    public CLightSpotEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CMapVetoPickController : CBaseEntity
{
    public CMapVetoPickController (IntPtr pointer) : base(pointer) {}

    // m_nDraftType
    public ref Int32 DraftType => ref Schema.GetRef<Int32>(this.Handle, "CMapVetoPickController", "m_nDraftType");

    // m_nTeamWinningCoinToss
    public ref Int32 TeamWinningCoinToss => ref Schema.GetRef<Int32>(this.Handle, "CMapVetoPickController", "m_nTeamWinningCoinToss");

    // m_nTeamWithFirstChoice
    public Span<Int32> TeamWithFirstChoice => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nTeamWithFirstChoice", 64);

    // m_nVoteMapIdsList
    public Span<Int32> VoteMapIdsList => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nVoteMapIdsList", 7);

    // m_nAccountIDs
    public Span<Int32> AccountIDs => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nAccountIDs", 64);

    // m_nMapId0
    public Span<Int32> MapId0 => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nMapId0", 64);

    // m_nMapId1
    public Span<Int32> MapId1 => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nMapId1", 64);

    // m_nMapId2
    public Span<Int32> MapId2 => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nMapId2", 64);

    // m_nMapId3
    public Span<Int32> MapId3 => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nMapId3", 64);

    // m_nMapId4
    public Span<Int32> MapId4 => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nMapId4", 64);

    // m_nMapId5
    public Span<Int32> MapId5 => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nMapId5", 64);

    // m_nStartingSide0
    public Span<Int32> StartingSide0 => Schema.GetFixedArray<Int32>(this.Handle, "CMapVetoPickController", "m_nStartingSide0", 64);

    // m_nCurrentPhase
    public ref Int32 CurrentPhase => ref Schema.GetRef<Int32>(this.Handle, "CMapVetoPickController", "m_nCurrentPhase");

    // m_nPhaseStartTick
    public ref Int32 PhaseStartTick => ref Schema.GetRef<Int32>(this.Handle, "CMapVetoPickController", "m_nPhaseStartTick");

    // m_nPhaseDurationTicks
    public ref Int32 PhaseDurationTicks => ref Schema.GetRef<Int32>(this.Handle, "CMapVetoPickController", "m_nPhaseDurationTicks");

}

public partial class CMelee : CCSWeaponBase
{
    public CMelee (IntPtr pointer) : base(pointer) {}

    // m_flThrowAt
    public ref float ThrowAt => ref Schema.GetRef<float>(this.Handle, "CMelee", "m_flThrowAt");

}

public partial class CModelPointEntity : CBaseModelEntity
{
    public CModelPointEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CModelState : NativeObject
{
    public CModelState (IntPtr pointer) : base(pointer) {}

    // m_hModel
    // MNetworkChangeCallback "skeletonModelChanged"
    public CStrongHandle<InfoForResourceTypeCModel> Model => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCModel>>(this.Handle, "CModelState", "m_hModel");

    // m_bClientClothCreationSuppressed
    public ref bool ClientClothCreationSuppressed => ref Schema.GetRef<bool>(this.Handle, "CModelState", "m_bClientClothCreationSuppressed");

    // m_MeshGroupMask
    // MNetworkChangeCallback "skeletonMeshGroupMaskChanged"
    public ref UInt64 MeshGroupMask => ref Schema.GetRef<UInt64>(this.Handle, "CModelState", "m_MeshGroupMask");

    // m_nIdealMotionType
    // MNetworkChangeCallback "skeletonMotionTypeChanged"
    public ref sbyte IdealMotionType => ref Schema.GetRef<sbyte>(this.Handle, "CModelState", "m_nIdealMotionType");

}

public partial class CMolotovGrenade : CBaseCSGrenade
{
    public CMolotovGrenade (IntPtr pointer) : base(pointer) {}

}

public partial class CMolotovProjectile : CBaseCSGrenadeProjectile
{
    public CMolotovProjectile (IntPtr pointer) : base(pointer) {}

    // m_bIsIncGrenade
    public ref bool IsIncGrenade => ref Schema.GetRef<bool>(this.Handle, "CMolotovProjectile", "m_bIsIncGrenade");

}

public partial class CMultiplayRules : CGameRules
{
    public CMultiplayRules (IntPtr pointer) : base(pointer) {}

}

public partial class CNetworkedSequenceOperation : NativeObject
{
    public CNetworkedSequenceOperation (IntPtr pointer) : base(pointer) {}

    // m_hSequence
    // MNetworkSerializer "minusone"
    // MNetworkChangeCallback "sequenceOpSequenceChanged"
    // MNetworkPriority "32"
    // m_flPrevCycle
    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "8"
    // MNetworkPriority "32"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkUserGroup "m_flCycle"
    public ref float PrevCycle => ref Schema.GetRef<float>(this.Handle, "CNetworkedSequenceOperation", "m_flPrevCycle");

    // m_flCycle
    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "8"
    // MNetworkPriority "32"
    // MNetworkSendProxyRecipientsFilter
    // MNetworkUserGroup "m_flCycle"
    // MNetworkChangeCallback "sequenceOpCycleChanged"
    public ref float Cycle => ref Schema.GetRef<float>(this.Handle, "CNetworkedSequenceOperation", "m_flCycle");

    // m_flWeight
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "0"
    public float Weight => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkedSequenceOperation", "m_flWeight");

}

public partial class CNetworkOriginCellCoordQuantizedVector : NativeObject
{
    public CNetworkOriginCellCoordQuantizedVector (IntPtr pointer) : base(pointer) {}

    // m_cellX
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "cellx"
    public ref UInt16 CellX => ref Schema.GetRef<UInt16>(this.Handle, "CNetworkOriginCellCoordQuantizedVector", "m_cellX");

    // m_cellY
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "celly"
    public ref UInt16 CellY => ref Schema.GetRef<UInt16>(this.Handle, "CNetworkOriginCellCoordQuantizedVector", "m_cellY");

    // m_cellZ
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "cellz"
    public ref UInt16 CellZ => ref Schema.GetRef<UInt16>(this.Handle, "CNetworkOriginCellCoordQuantizedVector", "m_cellZ");

    // m_nOutsideWorld
    public ref UInt16 OutsideWorld => ref Schema.GetRef<UInt16>(this.Handle, "CNetworkOriginCellCoordQuantizedVector", "m_nOutsideWorld");

    // m_vecX
    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1024.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "posx"
    public float X => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkOriginCellCoordQuantizedVector", "m_vecX");

    // m_vecY
    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1024.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "posy"
    public float Y => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkOriginCellCoordQuantizedVector", "m_vecY");

    // m_vecZ
    // MNetworkBitCount "15"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1024.000000"
    // MNetworkEncodeFlags "1"
    // MNetworkChangeCallback "OnCellChanged"
    // MNetworkPriority "31"
    // MNetworkSerializer "posz"
    public float Z => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkOriginCellCoordQuantizedVector", "m_vecZ");

}

public partial class CNetworkVelocityVector : NativeObject
{
    public CNetworkVelocityVector (IntPtr pointer) : base(pointer) {}

    // m_vecX
    // MNetworkBitCount "18"
    // MNetworkMinValue "-4096.000000"
    // MNetworkMaxValue "4096.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float X => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkVelocityVector", "m_vecX");

    // m_vecY
    // MNetworkBitCount "18"
    // MNetworkMinValue "-4096.000000"
    // MNetworkMaxValue "4096.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float Y => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkVelocityVector", "m_vecY");

    // m_vecZ
    // MNetworkBitCount "18"
    // MNetworkMinValue "-4096.000000"
    // MNetworkMaxValue "4096.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkVelocityVector"
    public float Z => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkVelocityVector", "m_vecZ");

}

public partial class CNetworkViewOffsetVector : NativeObject
{
    public CNetworkViewOffsetVector (IntPtr pointer) : base(pointer) {}

    // m_vecX
    // MNetworkBitCount "10"
    // MNetworkMinValue "-64.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float X => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkViewOffsetVector", "m_vecX");

    // m_vecY
    // MNetworkBitCount "10"
    // MNetworkMinValue "-64.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float Y => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkViewOffsetVector", "m_vecY");

    // m_vecZ
    // MNetworkBitCount "20"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "128.000000"
    // MNetworkEncodeFlags "4"
    // MNetworkChangeCallback "CNetworkViewOffsetVector"
    public float Z => Schema.GetDeclaredClass<float>(this.Handle, "CNetworkViewOffsetVector", "m_vecZ");

}

public partial class COmniLight : CBarnLight
{
    public COmniLight (IntPtr pointer) : base(pointer) {}

    // m_flInnerAngle
    // MNetworkChangeCallback "RenderingChanged"
    public ref float InnerAngle => ref Schema.GetRef<float>(this.Handle, "COmniLight", "m_flInnerAngle");

    // m_flOuterAngle
    // MNetworkChangeCallback "RenderingChanged"
    public ref float OuterAngle => ref Schema.GetRef<float>(this.Handle, "COmniLight", "m_flOuterAngle");

    // m_bShowLight
    // MNetworkChangeCallback "RenderingChanged"
    public ref bool ShowLight => ref Schema.GetRef<bool>(this.Handle, "COmniLight", "m_bShowLight");

}

public partial class CountdownTimer : NativeObject
{
    public CountdownTimer (IntPtr pointer) : base(pointer) {}

    // m_duration
    public ref float Duration => ref Schema.GetRef<float>(this.Handle, "CountdownTimer", "m_duration");

    // m_timestamp
    public ref float Timestamp => ref Schema.GetRef<float>(this.Handle, "CountdownTimer", "m_timestamp");

    // m_timescale
    public ref float Timescale => ref Schema.GetRef<float>(this.Handle, "CountdownTimer", "m_timescale");

    // m_nWorldGroupId
    public WorldGroupId_t WorldGroupId => Schema.GetDeclaredClass<WorldGroupId_t>(this.Handle, "CountdownTimer", "m_nWorldGroupId");

}

public partial class CParticleSystem : CBaseModelEntity
{
    public CParticleSystem (IntPtr pointer) : base(pointer) {}

    // m_szSnapshotFileName
    public string SnapshotFileName
    {
        get { return Schema.GetString(this.Handle, "CParticleSystem", "m_szSnapshotFileName"); }
        set { Schema.SetString(this.Handle, "CParticleSystem", "m_szSnapshotFileName", value); }
    }

    // m_bActive
    public ref bool Active => ref Schema.GetRef<bool>(this.Handle, "CParticleSystem", "m_bActive");

    // m_bFrozen
    public ref bool Frozen => ref Schema.GetRef<bool>(this.Handle, "CParticleSystem", "m_bFrozen");

    // m_flFreezeTransitionDuration
    public ref float FreezeTransitionDuration => ref Schema.GetRef<float>(this.Handle, "CParticleSystem", "m_flFreezeTransitionDuration");

    // m_nStopType
    public ref Int32 StopType => ref Schema.GetRef<Int32>(this.Handle, "CParticleSystem", "m_nStopType");

    // m_bAnimateDuringGameplayPause
    public ref bool AnimateDuringGameplayPause => ref Schema.GetRef<bool>(this.Handle, "CParticleSystem", "m_bAnimateDuringGameplayPause");

    // m_iEffectIndex
    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> EffectIndex => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>>(this.Handle, "CParticleSystem", "m_iEffectIndex");

    // m_flStartTime
    public ref float StartTime => ref Schema.GetRef<float>(this.Handle, "CParticleSystem", "m_flStartTime");

    // m_flPreSimTime
    public ref float PreSimTime => ref Schema.GetRef<float>(this.Handle, "CParticleSystem", "m_flPreSimTime");

    // m_vServerControlPoints
    public Span<Vector> ServerControlPoints => Schema.GetFixedArray<Vector>(this.Handle, "CParticleSystem", "m_vServerControlPoints", 4);

    // m_iServerControlPointAssignments
    public Span<byte> ServerControlPointAssignments => Schema.GetFixedArray<byte>(this.Handle, "CParticleSystem", "m_iServerControlPointAssignments", 4);

    // m_hControlPointEnts
    public Span<CHandle<CBaseEntity>> ControlPointEnts => Schema.GetFixedArray<CHandle<CBaseEntity>>(this.Handle, "CParticleSystem", "m_hControlPointEnts", 64);

    // m_bNoSave
    public ref bool NoSave => ref Schema.GetRef<bool>(this.Handle, "CParticleSystem", "m_bNoSave");

    // m_bNoFreeze
    public ref bool NoFreeze => ref Schema.GetRef<bool>(this.Handle, "CParticleSystem", "m_bNoFreeze");

    // m_bNoRamp
    public ref bool NoRamp => ref Schema.GetRef<bool>(this.Handle, "CParticleSystem", "m_bNoRamp");

}

public partial class CPathParticleRope : CBaseEntity
{
    public CPathParticleRope (IntPtr pointer) : base(pointer) {}

    // m_flParticleSpacing
    public ref float ParticleSpacing => ref Schema.GetRef<float>(this.Handle, "CPathParticleRope", "m_flParticleSpacing");

    // m_flSlack
    // MNetworkChangeCallback "parametersChanged"
    public ref float Slack => ref Schema.GetRef<float>(this.Handle, "CPathParticleRope", "m_flSlack");

    // m_flRadius
    // MNetworkChangeCallback "parametersChanged"
    public ref float Radius => ref Schema.GetRef<float>(this.Handle, "CPathParticleRope", "m_flRadius");

    // m_ColorTint
    // MNetworkChangeCallback "parametersChanged"
    public Color ColorTint => Schema.GetDeclaredClass<Color>(this.Handle, "CPathParticleRope", "m_ColorTint");

    // m_nEffectState
    // MNetworkChangeCallback "effectStateChanged"
    public ref Int32 EffectState => ref Schema.GetRef<Int32>(this.Handle, "CPathParticleRope", "m_nEffectState");

    // m_iEffectIndex
    public CStrongHandle<InfoForResourceTypeIParticleSystemDefinition> EffectIndex => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>>(this.Handle, "CPathParticleRope", "m_iEffectIndex");

    // m_PathNodes_Position
    public NetworkedVector<Vector> PathNodes_Position => Schema.GetDeclaredClass<NetworkedVector<Vector>>(this.Handle, "CPathParticleRope", "m_PathNodes_Position");

    // m_PathNodes_TangentIn
    public NetworkedVector<Vector> PathNodes_TangentIn => Schema.GetDeclaredClass<NetworkedVector<Vector>>(this.Handle, "CPathParticleRope", "m_PathNodes_TangentIn");

    // m_PathNodes_TangentOut
    public NetworkedVector<Vector> PathNodes_TangentOut => Schema.GetDeclaredClass<NetworkedVector<Vector>>(this.Handle, "CPathParticleRope", "m_PathNodes_TangentOut");

    // m_PathNodes_Color
    public NetworkedVector<Vector> PathNodes_Color => Schema.GetDeclaredClass<NetworkedVector<Vector>>(this.Handle, "CPathParticleRope", "m_PathNodes_Color");

    // m_PathNodes_PinEnabled
    // MNetworkChangeCallback "pinStateChanged"
    public NetworkedVector<bool> PathNodes_PinEnabled => Schema.GetDeclaredClass<NetworkedVector<bool>>(this.Handle, "CPathParticleRope", "m_PathNodes_PinEnabled");

    // m_PathNodes_RadiusScale
    public NetworkedVector<float> PathNodes_RadiusScale => Schema.GetDeclaredClass<NetworkedVector<float>>(this.Handle, "CPathParticleRope", "m_PathNodes_RadiusScale");

}

public partial class CPhysBox : CBreakable
{
    public CPhysBox (IntPtr pointer) : base(pointer) {}

}

public partial class CPhysicsProp : CBreakableProp
{
    public CPhysicsProp (IntPtr pointer) : base(pointer) {}

    // m_bAwake
    public ref bool Awake => ref Schema.GetRef<bool>(this.Handle, "CPhysicsProp", "m_bAwake");

}

public partial class CPhysicsPropMultiplayer : CPhysicsProp
{
    public CPhysicsPropMultiplayer (IntPtr pointer) : base(pointer) {}

}

public partial class CPhysMagnet : CBaseAnimGraph
{
    public CPhysMagnet (IntPtr pointer) : base(pointer) {}

}

public partial class CPlantedC4 : CBaseAnimGraph
{
    public CPlantedC4 (IntPtr pointer) : base(pointer) {}

    // m_bBombTicking
    public ref bool BombTicking => ref Schema.GetRef<bool>(this.Handle, "CPlantedC4", "m_bBombTicking");

    // m_flC4Blow
    public ref float C4Blow => ref Schema.GetRef<float>(this.Handle, "CPlantedC4", "m_flC4Blow");

    // m_nBombSite
    public ref Int32 BombSite => ref Schema.GetRef<Int32>(this.Handle, "CPlantedC4", "m_nBombSite");

    // m_nSourceSoundscapeHash
    public ref Int32 SourceSoundscapeHash => ref Schema.GetRef<Int32>(this.Handle, "CPlantedC4", "m_nSourceSoundscapeHash");

    // m_bCannotBeDefused
    public ref bool CannotBeDefused => ref Schema.GetRef<bool>(this.Handle, "CPlantedC4", "m_bCannotBeDefused");

    // m_entitySpottedState
    public EntitySpottedState_t EntitySpottedState => Schema.GetDeclaredClass<EntitySpottedState_t>(this.Handle, "CPlantedC4", "m_entitySpottedState");

    // m_bHasExploded
    public ref bool HasExploded => ref Schema.GetRef<bool>(this.Handle, "CPlantedC4", "m_bHasExploded");

    // m_flTimerLength
    public ref float TimerLength => ref Schema.GetRef<float>(this.Handle, "CPlantedC4", "m_flTimerLength");

    // m_bBeingDefused
    public ref bool BeingDefused => ref Schema.GetRef<bool>(this.Handle, "CPlantedC4", "m_bBeingDefused");

    // m_flDefuseLength
    public ref float DefuseLength => ref Schema.GetRef<float>(this.Handle, "CPlantedC4", "m_flDefuseLength");

    // m_flDefuseCountDown
    public ref float DefuseCountDown => ref Schema.GetRef<float>(this.Handle, "CPlantedC4", "m_flDefuseCountDown");

    // m_bBombDefused
    public ref bool BombDefused => ref Schema.GetRef<bool>(this.Handle, "CPlantedC4", "m_bBombDefused");

    // m_hBombDefuser
    public CHandle<CCSPlayerPawn> BombDefuser => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CPlantedC4", "m_hBombDefuser");

    // m_hControlPanel
    public CHandle<CBaseEntity> ControlPanel => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPlantedC4", "m_hControlPanel");

}

public partial class CPlayer_AutoaimServices : CPlayerPawnComponent
{
    public CPlayer_AutoaimServices (IntPtr pointer) : base(pointer) {}

}

public partial class CPlayer_CameraServices : CPlayerPawnComponent
{
    public CPlayer_CameraServices (IntPtr pointer) : base(pointer) {}

    // m_vecCsViewPunchAngle
    // MNetworkEncoder "qangle_precise"
    public QAngle CsViewPunchAngle => Schema.GetDeclaredClass<QAngle>(this.Handle, "CPlayer_CameraServices", "m_vecCsViewPunchAngle");

    // m_nCsViewPunchAngleTick
    // m_flCsViewPunchAngleTickRatio
    public ref float CsViewPunchAngleTickRatio => ref Schema.GetRef<float>(this.Handle, "CPlayer_CameraServices", "m_flCsViewPunchAngleTickRatio");

    // m_PlayerFog
    public fogplayerparams_t PlayerFog => Schema.GetDeclaredClass<fogplayerparams_t>(this.Handle, "CPlayer_CameraServices", "m_PlayerFog");

    // m_hColorCorrectionCtrl
    public CHandle<CColorCorrection> ColorCorrectionCtrl => Schema.GetDeclaredClass<CHandle<CColorCorrection>>(this.Handle, "CPlayer_CameraServices", "m_hColorCorrectionCtrl");

    // m_hViewEntity
    public CHandle<CBaseEntity> ViewEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPlayer_CameraServices", "m_hViewEntity");

    // m_hTonemapController
    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public CHandle<CTonemapController2> TonemapController => Schema.GetDeclaredClass<CHandle<CTonemapController2>>(this.Handle, "CPlayer_CameraServices", "m_hTonemapController");

    // m_audio
    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public audioparams_t Audio => Schema.GetDeclaredClass<audioparams_t>(this.Handle, "CPlayer_CameraServices", "m_audio");

    // m_PostProcessingVolumes
    // MNetworkUserGroup "LocalPlayerAndObserversExclusive"
    public NetworkedVector<CHandle<CPostProcessingVolume>> PostProcessingVolumes => Schema.GetDeclaredClass<NetworkedVector<CHandle<CPostProcessingVolume>>>(this.Handle, "CPlayer_CameraServices", "m_PostProcessingVolumes");

}

public partial class CPlayer_FlashlightServices : CPlayerPawnComponent
{
    public CPlayer_FlashlightServices (IntPtr pointer) : base(pointer) {}

}

public partial class CPlayer_ItemServices : CPlayerPawnComponent
{
    public CPlayer_ItemServices (IntPtr pointer) : base(pointer) {}

}

public partial class CPlayer_MovementServices : CPlayerPawnComponent
{
    public CPlayer_MovementServices (IntPtr pointer) : base(pointer) {}

    // m_nToggleButtonDownMask
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref UInt64 ToggleButtonDownMask => ref Schema.GetRef<UInt64>(this.Handle, "CPlayer_MovementServices", "m_nToggleButtonDownMask");

    // m_flMaxspeed
    // MNetworkBitCount "12"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "2048.000000"
    // MNetworkEncodeFlags "1"
    public ref float Maxspeed => ref Schema.GetRef<float>(this.Handle, "CPlayer_MovementServices", "m_flMaxspeed");

    // m_arrForceSubtickMoveWhen
    public Span<float> ForceSubtickMoveWhen => Schema.GetFixedArray<float>(this.Handle, "CPlayer_MovementServices", "m_arrForceSubtickMoveWhen", 4);

}

public partial class CPlayer_MovementServices_Humanoid : CPlayer_MovementServices
{
    public CPlayer_MovementServices_Humanoid (IntPtr pointer) : base(pointer) {}

    // m_flFallVelocity
    // MNetworkUserGroup "LocalPlayerExclusive"
    // MNetworkBitCount "17"
    // MNetworkMinValue "-4096.000000"
    // MNetworkMaxValue "4096.000000"
    // MNetworkEncodeFlags "4"
    public ref float FallVelocity => ref Schema.GetRef<float>(this.Handle, "CPlayer_MovementServices_Humanoid", "m_flFallVelocity");

    // m_bInCrouch
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref bool InCrouch => ref Schema.GetRef<bool>(this.Handle, "CPlayer_MovementServices_Humanoid", "m_bInCrouch");

    // m_nCrouchState
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref UInt32 CrouchState => ref Schema.GetRef<UInt32>(this.Handle, "CPlayer_MovementServices_Humanoid", "m_nCrouchState");

    // m_flCrouchTransitionStartTime
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref float CrouchTransitionStartTime => ref Schema.GetRef<float>(this.Handle, "CPlayer_MovementServices_Humanoid", "m_flCrouchTransitionStartTime");

    // m_bDucked
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref bool Ducked => ref Schema.GetRef<bool>(this.Handle, "CPlayer_MovementServices_Humanoid", "m_bDucked");

    // m_bDucking
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref bool Ducking => ref Schema.GetRef<bool>(this.Handle, "CPlayer_MovementServices_Humanoid", "m_bDucking");

    // m_bInDuckJump
    // MNetworkUserGroup "LocalPlayerExclusive"
    public ref bool InDuckJump => ref Schema.GetRef<bool>(this.Handle, "CPlayer_MovementServices_Humanoid", "m_bInDuckJump");

}

public partial class CPlayer_ObserverServices : CPlayerPawnComponent
{
    public CPlayer_ObserverServices (IntPtr pointer) : base(pointer) {}

    // m_iObserverMode
    // MNetworkChangeCallback "OnObserverModeChanged"
    public ref byte ObserverMode => ref Schema.GetRef<byte>(this.Handle, "CPlayer_ObserverServices", "m_iObserverMode");

    // m_hObserverTarget
    // MNetworkChangeCallback "OnObserverTargetChanged"
    public CHandle<CBaseEntity> ObserverTarget => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPlayer_ObserverServices", "m_hObserverTarget");

}

public partial class CPlayer_UseServices : CPlayerPawnComponent
{
    public CPlayer_UseServices (IntPtr pointer) : base(pointer) {}

}

public partial class CPlayer_ViewModelServices : CPlayerPawnComponent
{
    public CPlayer_ViewModelServices (IntPtr pointer) : base(pointer) {}

}

public partial class CPlayer_WaterServices : CPlayerPawnComponent
{
    public CPlayer_WaterServices (IntPtr pointer) : base(pointer) {}

}

public partial class CPlayer_WeaponServices : CPlayerPawnComponent
{
    public CPlayer_WeaponServices (IntPtr pointer) : base(pointer) {}

    // m_hMyWeapons
    public NetworkedVector<CHandle<CBasePlayerWeapon>> MyWeapons => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBasePlayerWeapon>>>(this.Handle, "CPlayer_WeaponServices", "m_hMyWeapons");

    // m_hActiveWeapon
    public CHandle<CBasePlayerWeapon> ActiveWeapon => Schema.GetDeclaredClass<CHandle<CBasePlayerWeapon>>(this.Handle, "CPlayer_WeaponServices", "m_hActiveWeapon");

    // m_hLastWeapon
    // MNetworkUserGroup "LocalPlayerExclusive"
    public CHandle<CBasePlayerWeapon> LastWeapon => Schema.GetDeclaredClass<CHandle<CBasePlayerWeapon>>(this.Handle, "CPlayer_WeaponServices", "m_hLastWeapon");

    // m_iAmmo
    public Span<UInt16> Ammo => Schema.GetFixedArray<UInt16>(this.Handle, "CPlayer_WeaponServices", "m_iAmmo", 32);

}

public partial class CPlayerControllerComponent : NativeObject
{
    public CPlayerControllerComponent (IntPtr pointer) : base(pointer) {}

}

public partial class CPlayerPawnComponent : NativeObject
{
    public CPlayerPawnComponent (IntPtr pointer) : base(pointer) {}

}

public partial class CPlayerPing : CBaseEntity
{
    public CPlayerPing (IntPtr pointer) : base(pointer) {}

    // m_hPlayer
    public CHandle<CCSPlayerPawn> Player => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CPlayerPing", "m_hPlayer");

    // m_hPingedEntity
    public CHandle<CBaseEntity> PingedEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPlayerPing", "m_hPingedEntity");

    // m_iType
    public ref Int32 Type => ref Schema.GetRef<Int32>(this.Handle, "CPlayerPing", "m_iType");

    // m_bUrgent
    public ref bool Urgent => ref Schema.GetRef<bool>(this.Handle, "CPlayerPing", "m_bUrgent");

    // m_szPlaceName
    public string PlaceName
    {
        get { return Schema.GetString(this.Handle, "CPlayerPing", "m_szPlaceName"); }
        set { Schema.SetString(this.Handle, "CPlayerPing", "m_szPlaceName", value); }
    }

}

public partial class CPlayerSprayDecal : CModelPointEntity
{
    public CPlayerSprayDecal (IntPtr pointer) : base(pointer) {}

    // m_nUniqueID
    public ref Int32 UniqueID => ref Schema.GetRef<Int32>(this.Handle, "CPlayerSprayDecal", "m_nUniqueID");

    // m_unAccountID
    public ref UInt32 AccountID => ref Schema.GetRef<UInt32>(this.Handle, "CPlayerSprayDecal", "m_unAccountID");

    // m_unTraceID
    public ref UInt32 TraceID => ref Schema.GetRef<UInt32>(this.Handle, "CPlayerSprayDecal", "m_unTraceID");

    // m_rtGcTime
    public ref UInt32 RtGcTime => ref Schema.GetRef<UInt32>(this.Handle, "CPlayerSprayDecal", "m_rtGcTime");

    // m_vecEndPos
    public Vector EndPos => Schema.GetDeclaredClass<Vector>(this.Handle, "CPlayerSprayDecal", "m_vecEndPos");

    // m_vecStart
    public Vector Start => Schema.GetDeclaredClass<Vector>(this.Handle, "CPlayerSprayDecal", "m_vecStart");

    // m_vecLeft
    public Vector Left => Schema.GetDeclaredClass<Vector>(this.Handle, "CPlayerSprayDecal", "m_vecLeft");

    // m_vecNormal
    public Vector Normal => Schema.GetDeclaredClass<Vector>(this.Handle, "CPlayerSprayDecal", "m_vecNormal");

    // m_nPlayer
    public ref Int32 Player => ref Schema.GetRef<Int32>(this.Handle, "CPlayerSprayDecal", "m_nPlayer");

    // m_nEntity
    public ref Int32 DecalEntity => ref Schema.GetRef<Int32>(this.Handle, "CPlayerSprayDecal", "m_nEntity");

    // m_nHitbox
    public ref Int32 Hitbox => ref Schema.GetRef<Int32>(this.Handle, "CPlayerSprayDecal", "m_nHitbox");

    // m_flCreationTime
    public ref float CreationTime => ref Schema.GetRef<float>(this.Handle, "CPlayerSprayDecal", "m_flCreationTime");

    // m_nTintID
    public ref Int32 TintID => ref Schema.GetRef<Int32>(this.Handle, "CPlayerSprayDecal", "m_nTintID");

    // m_nVersion
    public ref byte Version => ref Schema.GetRef<byte>(this.Handle, "CPlayerSprayDecal", "m_nVersion");

    // m_ubSignature
    public Span<byte> Signature => Schema.GetFixedArray<byte>(this.Handle, "CPlayerSprayDecal", "m_ubSignature", 128);

}

public partial class CPlayerVisibility : CBaseEntity
{
    public CPlayerVisibility (IntPtr pointer) : base(pointer) {}

    // m_flVisibilityStrength
    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public ref float VisibilityStrength => ref Schema.GetRef<float>(this.Handle, "CPlayerVisibility", "m_flVisibilityStrength");

    // m_flFogDistanceMultiplier
    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public ref float FogDistanceMultiplier => ref Schema.GetRef<float>(this.Handle, "CPlayerVisibility", "m_flFogDistanceMultiplier");

    // m_flFogMaxDensityMultiplier
    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public ref float FogMaxDensityMultiplier => ref Schema.GetRef<float>(this.Handle, "CPlayerVisibility", "m_flFogMaxDensityMultiplier");

    // m_flFadeTime
    // MNetworkChangeCallback "PlayerVisibilityStateChanged"
    public ref float FadeTime => ref Schema.GetRef<float>(this.Handle, "CPlayerVisibility", "m_flFadeTime");

    // m_bStartDisabled
    public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CPlayerVisibility", "m_bStartDisabled");

    // m_bIsEnabled
    public ref bool IsEnabled => ref Schema.GetRef<bool>(this.Handle, "CPlayerVisibility", "m_bIsEnabled");

}

public partial class CPointCamera : CBaseEntity
{
    public CPointCamera (IntPtr pointer) : base(pointer) {}

    // m_FOV
    public ref float FOV => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_FOV");

    // m_Resolution
    public ref float Resolution => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_Resolution");

    // m_bFogEnable
    public ref bool FogEnable => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bFogEnable");

    // m_FogColor
    public Color FogColor => Schema.GetDeclaredClass<Color>(this.Handle, "CPointCamera", "m_FogColor");

    // m_flFogStart
    public ref float FogStart => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flFogStart");

    // m_flFogEnd
    public ref float FogEnd => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flFogEnd");

    // m_flFogMaxDensity
    public ref float FogMaxDensity => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flFogMaxDensity");

    // m_bActive
    public ref bool Active => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bActive");

    // m_bUseScreenAspectRatio
    public ref bool UseScreenAspectRatio => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bUseScreenAspectRatio");

    // m_flAspectRatio
    public ref float AspectRatio => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flAspectRatio");

    // m_bNoSky
    public ref bool NoSky => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bNoSky");

    // m_fBrightness
    public ref float Brightness => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_fBrightness");

    // m_flZFar
    public ref float ZFar => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flZFar");

    // m_flZNear
    public ref float ZNear => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flZNear");

    // m_bCanHLTVUse
    public ref bool CanHLTVUse => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bCanHLTVUse");

    // m_bDofEnabled
    public ref bool DofEnabled => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bDofEnabled");

    // m_flDofNearBlurry
    public ref float DofNearBlurry => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofNearBlurry");

    // m_flDofNearCrisp
    public ref float DofNearCrisp => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofNearCrisp");

    // m_flDofFarCrisp
    public ref float DofFarCrisp => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofFarCrisp");

    // m_flDofFarBlurry
    public ref float DofFarBlurry => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofFarBlurry");

    // m_flDofTiltToGround
    public ref float DofTiltToGround => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofTiltToGround");

}

public partial class CPointClientUIDialog : CBaseClientUIEntity
{
    public CPointClientUIDialog (IntPtr pointer) : base(pointer) {}

    // m_hActivator
    // MNetworkChangeCallback "OnDialogActivatorChanged"
    public CHandle<CBaseEntity> Activator => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPointClientUIDialog", "m_hActivator");

}

public partial class CPointClientUIWorldPanel : CBaseClientUIEntity
{
    public CPointClientUIWorldPanel (IntPtr pointer) : base(pointer) {}

    // m_bIgnoreInput
    public ref bool IgnoreInput => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bIgnoreInput");

    // m_bLit
    public ref bool Lit => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bLit");

    // m_bFollowPlayerAcrossTeleport
    public ref bool FollowPlayerAcrossTeleport => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport");

    // m_flWidth
    public ref float Width => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flWidth");

    // m_flHeight
    public ref float Height => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flHeight");

    // m_flDPI
    public ref float DPI => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flDPI");

    // m_flInteractDistance
    public ref float InteractDistance => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flInteractDistance");

    // m_flDepthOffset
    public ref float DepthOffset => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flDepthOffset");

    // m_unOwnerContext
    public ref UInt32 OwnerContext => ref Schema.GetRef<UInt32>(this.Handle, "CPointClientUIWorldPanel", "m_unOwnerContext");

    // m_unHorizontalAlign
    public ref UInt32 HorizontalAlign => ref Schema.GetRef<UInt32>(this.Handle, "CPointClientUIWorldPanel", "m_unHorizontalAlign");

    // m_unVerticalAlign
    public ref UInt32 VerticalAlign => ref Schema.GetRef<UInt32>(this.Handle, "CPointClientUIWorldPanel", "m_unVerticalAlign");

    // m_unOrientation
    public ref UInt32 Orientation => ref Schema.GetRef<UInt32>(this.Handle, "CPointClientUIWorldPanel", "m_unOrientation");

    // m_bAllowInteractionFromAllSceneWorlds
    public ref bool AllowInteractionFromAllSceneWorlds => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds");

    // m_vecCSSClasses
    public NetworkedVector<string> CSSClasses => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CPointClientUIWorldPanel", "m_vecCSSClasses");

    // m_bOpaque
    public ref bool Opaque => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bOpaque");

    // m_bNoDepth
    public ref bool NoDepth => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bNoDepth");

    // m_bRenderBackface
    public ref bool RenderBackface => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bRenderBackface");

    // m_bUseOffScreenIndicator
    public ref bool UseOffScreenIndicator => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bUseOffScreenIndicator");

    // m_bExcludeFromSaveGames
    public ref bool ExcludeFromSaveGames => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bExcludeFromSaveGames");

    // m_bGrabbable
    public ref bool Grabbable => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bGrabbable");

    // m_bOnlyRenderToTexture
    public ref bool OnlyRenderToTexture => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bOnlyRenderToTexture");

    // m_bDisableMipGen
    public ref bool DisableMipGen => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bDisableMipGen");

    // m_nExplicitImageLayout
    public ref Int32 ExplicitImageLayout => ref Schema.GetRef<Int32>(this.Handle, "CPointClientUIWorldPanel", "m_nExplicitImageLayout");

}

public partial class CPointClientUIWorldTextPanel : CPointClientUIWorldPanel
{
    public CPointClientUIWorldTextPanel (IntPtr pointer) : base(pointer) {}

    // m_messageText
    public string MessageText
    {
        get { return Schema.GetString(this.Handle, "CPointClientUIWorldTextPanel", "m_messageText"); }
        set { Schema.SetString(this.Handle, "CPointClientUIWorldTextPanel", "m_messageText", value); }
    }

}

public partial class CPointCommentaryNode : CBaseAnimGraph
{
    public CPointCommentaryNode (IntPtr pointer) : base(pointer) {}

    // m_iszCommentaryFile
    public string CommentaryFile
    {
        get { return Schema.GetUtf8String(this.Handle, "CPointCommentaryNode", "m_iszCommentaryFile"); }
        set { Schema.SetString(this.Handle, "CPointCommentaryNode", "m_iszCommentaryFile", value); }
    }

    // m_hViewPosition
    public CHandle<CBaseEntity> ViewPosition => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPointCommentaryNode", "m_hViewPosition");

    // m_bActive
    public ref bool Active => ref Schema.GetRef<bool>(this.Handle, "CPointCommentaryNode", "m_bActive");

    // m_flStartTime
    public ref float StartTime => ref Schema.GetRef<float>(this.Handle, "CPointCommentaryNode", "m_flStartTime");

    // m_flStartTimeInCommentary
    public ref float StartTimeInCommentary => ref Schema.GetRef<float>(this.Handle, "CPointCommentaryNode", "m_flStartTimeInCommentary");

    // m_iszTitle
    public string Title
    {
        get { return Schema.GetUtf8String(this.Handle, "CPointCommentaryNode", "m_iszTitle"); }
        set { Schema.SetString(this.Handle, "CPointCommentaryNode", "m_iszTitle", value); }
    }

    // m_iszSpeakers
    public string Speakers
    {
        get { return Schema.GetUtf8String(this.Handle, "CPointCommentaryNode", "m_iszSpeakers"); }
        set { Schema.SetString(this.Handle, "CPointCommentaryNode", "m_iszSpeakers", value); }
    }

    // m_iNodeNumber
    public ref Int32 NodeNumber => ref Schema.GetRef<Int32>(this.Handle, "CPointCommentaryNode", "m_iNodeNumber");

    // m_iNodeNumberMax
    public ref Int32 NodeNumberMax => ref Schema.GetRef<Int32>(this.Handle, "CPointCommentaryNode", "m_iNodeNumberMax");

    // m_bListenedTo
    public ref bool ListenedTo => ref Schema.GetRef<bool>(this.Handle, "CPointCommentaryNode", "m_bListenedTo");

}

public partial class CPointEntity : CBaseEntity
{
    public CPointEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CPointValueRemapper : CBaseEntity
{
    public CPointValueRemapper (IntPtr pointer) : base(pointer) {}

    // m_bDisabled
    public ref bool Disabled => ref Schema.GetRef<bool>(this.Handle, "CPointValueRemapper", "m_bDisabled");

    // m_bUpdateOnClient
    public ref bool UpdateOnClient => ref Schema.GetRef<bool>(this.Handle, "CPointValueRemapper", "m_bUpdateOnClient");

    // m_nInputType
    public ref ValueRemapperInputType_t InputType => ref Schema.GetRef<ValueRemapperInputType_t>(this.Handle, "CPointValueRemapper", "m_nInputType");

    // m_hRemapLineStart
    public CHandle<CBaseEntity> RemapLineStart => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPointValueRemapper", "m_hRemapLineStart");

    // m_hRemapLineEnd
    public CHandle<CBaseEntity> RemapLineEnd => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPointValueRemapper", "m_hRemapLineEnd");

    // m_flMaximumChangePerSecond
    public ref float MaximumChangePerSecond => ref Schema.GetRef<float>(this.Handle, "CPointValueRemapper", "m_flMaximumChangePerSecond");

    // m_flDisengageDistance
    public ref float DisengageDistance => ref Schema.GetRef<float>(this.Handle, "CPointValueRemapper", "m_flDisengageDistance");

    // m_flEngageDistance
    public ref float EngageDistance => ref Schema.GetRef<float>(this.Handle, "CPointValueRemapper", "m_flEngageDistance");

    // m_bRequiresUseKey
    public ref bool RequiresUseKey => ref Schema.GetRef<bool>(this.Handle, "CPointValueRemapper", "m_bRequiresUseKey");

    // m_nOutputType
    public ref ValueRemapperOutputType_t OutputType => ref Schema.GetRef<ValueRemapperOutputType_t>(this.Handle, "CPointValueRemapper", "m_nOutputType");

    // m_hOutputEntities
    public NetworkedVector<CHandle<CBaseEntity>> OutputEntities => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseEntity>>>(this.Handle, "CPointValueRemapper", "m_hOutputEntities");

    // m_nHapticsType
    public ref ValueRemapperHapticsType_t HapticsType => ref Schema.GetRef<ValueRemapperHapticsType_t>(this.Handle, "CPointValueRemapper", "m_nHapticsType");

    // m_nMomentumType
    public ref ValueRemapperMomentumType_t MomentumType => ref Schema.GetRef<ValueRemapperMomentumType_t>(this.Handle, "CPointValueRemapper", "m_nMomentumType");

    // m_flMomentumModifier
    public ref float MomentumModifier => ref Schema.GetRef<float>(this.Handle, "CPointValueRemapper", "m_flMomentumModifier");

    // m_flSnapValue
    public ref float SnapValue => ref Schema.GetRef<float>(this.Handle, "CPointValueRemapper", "m_flSnapValue");

    // m_nRatchetType
    public ref ValueRemapperRatchetType_t RatchetType => ref Schema.GetRef<ValueRemapperRatchetType_t>(this.Handle, "CPointValueRemapper", "m_nRatchetType");

    // m_flInputOffset
    public ref float InputOffset => ref Schema.GetRef<float>(this.Handle, "CPointValueRemapper", "m_flInputOffset");

}

public partial class CPointWorldText : CModelPointEntity
{
    public CPointWorldText (IntPtr pointer) : base(pointer) {}

    // m_messageText
    public string MessageText
    {
        get { return Schema.GetString(this.Handle, "CPointWorldText", "m_messageText"); }
        set { Schema.SetString(this.Handle, "CPointWorldText", "m_messageText", value); }
    }

    // m_FontName
    public string FontName
    {
        get { return Schema.GetString(this.Handle, "CPointWorldText", "m_FontName"); }
        set { Schema.SetString(this.Handle, "CPointWorldText", "m_FontName", value); }
    }

    // m_bEnabled
    public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CPointWorldText", "m_bEnabled");

    // m_bFullbright
    public ref bool Fullbright => ref Schema.GetRef<bool>(this.Handle, "CPointWorldText", "m_bFullbright");

    // m_flWorldUnitsPerPx
    public ref float WorldUnitsPerPx => ref Schema.GetRef<float>(this.Handle, "CPointWorldText", "m_flWorldUnitsPerPx");

    // m_flFontSize
    public ref float FontSize => ref Schema.GetRef<float>(this.Handle, "CPointWorldText", "m_flFontSize");

    // m_flDepthOffset
    public ref float DepthOffset => ref Schema.GetRef<float>(this.Handle, "CPointWorldText", "m_flDepthOffset");

    // m_Color
    public Color Color => Schema.GetDeclaredClass<Color>(this.Handle, "CPointWorldText", "m_Color");

    // m_nJustifyHorizontal
    public ref PointWorldTextJustifyHorizontal_t JustifyHorizontal => ref Schema.GetRef<PointWorldTextJustifyHorizontal_t>(this.Handle, "CPointWorldText", "m_nJustifyHorizontal");

    // m_nJustifyVertical
    public ref PointWorldTextJustifyVertical_t JustifyVertical => ref Schema.GetRef<PointWorldTextJustifyVertical_t>(this.Handle, "CPointWorldText", "m_nJustifyVertical");

    // m_nReorientMode
    public ref PointWorldTextReorientMode_t ReorientMode => ref Schema.GetRef<PointWorldTextReorientMode_t>(this.Handle, "CPointWorldText", "m_nReorientMode");

}

public partial class CPostProcessingVolume : CBaseTrigger
{
    public CPostProcessingVolume (IntPtr pointer) : base(pointer) {}

    // m_hPostSettings
    public CStrongHandle<InfoForResourceTypeCPostProcessingResource> PostSettings => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCPostProcessingResource>>(this.Handle, "CPostProcessingVolume", "m_hPostSettings");

    // m_flFadeDuration
    public ref float FadeDuration => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flFadeDuration");

    // m_flMinLogExposure
    public ref float MinLogExposure => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flMinLogExposure");

    // m_flMaxLogExposure
    public ref float MaxLogExposure => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flMaxLogExposure");

    // m_flMinExposure
    public ref float MinExposure => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flMinExposure");

    // m_flMaxExposure
    public ref float MaxExposure => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flMaxExposure");

    // m_flExposureCompensation
    public ref float ExposureCompensation => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flExposureCompensation");

    // m_flExposureFadeSpeedUp
    public ref float ExposureFadeSpeedUp => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flExposureFadeSpeedUp");

    // m_flExposureFadeSpeedDown
    public ref float ExposureFadeSpeedDown => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flExposureFadeSpeedDown");

    // m_flTonemapEVSmoothingRange
    public ref float TonemapEVSmoothingRange => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flTonemapEVSmoothingRange");

    // m_bMaster
    public ref bool Master => ref Schema.GetRef<bool>(this.Handle, "CPostProcessingVolume", "m_bMaster");

    // m_bExposureControl
    public ref bool ExposureControl => ref Schema.GetRef<bool>(this.Handle, "CPostProcessingVolume", "m_bExposureControl");

    // m_flRate
    public ref float Rate => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flRate");

    // m_flTonemapPercentTarget
    public ref float TonemapPercentTarget => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flTonemapPercentTarget");

    // m_flTonemapPercentBrightPixels
    public ref float TonemapPercentBrightPixels => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flTonemapPercentBrightPixels");

    // m_flTonemapMinAvgLum
    public ref float TonemapMinAvgLum => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flTonemapMinAvgLum");

}

public partial class CPrecipitation : CBaseTrigger
{
    public CPrecipitation (IntPtr pointer) : base(pointer) {}

}

public partial class CPrecipitationBlocker : CBaseModelEntity
{
    public CPrecipitationBlocker (IntPtr pointer) : base(pointer) {}

}

public partial class CPredictedViewModel : CBaseViewModel
{
    public CPredictedViewModel (IntPtr pointer) : base(pointer) {}

}

public partial class CRagdollManager : CBaseEntity
{
    public CRagdollManager (IntPtr pointer) : base(pointer) {}

    // m_iCurrentMaxRagdollCount
    public ref sbyte CurrentMaxRagdollCount => ref Schema.GetRef<sbyte>(this.Handle, "CRagdollManager", "m_iCurrentMaxRagdollCount");

}

public partial class CRagdollProp : CBaseAnimGraph
{
    public CRagdollProp (IntPtr pointer) : base(pointer) {}

    // m_ragPos
    // MNetworkEncoder "coord"
    public NetworkedVector<Vector> RagPos => Schema.GetDeclaredClass<NetworkedVector<Vector>>(this.Handle, "CRagdollProp", "m_ragPos");

    // m_ragAngles
    // MNetworkEncoder "qangle"
    // MNetworkBitCount "13"
    public NetworkedVector<QAngle> RagAngles => Schema.GetDeclaredClass<NetworkedVector<QAngle>>(this.Handle, "CRagdollProp", "m_ragAngles");

    // m_hRagdollSource
    public CHandle<CBaseEntity> RagdollSource => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CRagdollProp", "m_hRagdollSource");

    // m_flBlendWeight
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    // MNetworkEncodeFlags "1"
    public ref float BlendWeight => ref Schema.GetRef<float>(this.Handle, "CRagdollProp", "m_flBlendWeight");

}

public partial class CRagdollPropAttached : CRagdollProp
{
    public CRagdollPropAttached (IntPtr pointer) : base(pointer) {}

    // m_boneIndexAttached
    public ref UInt32 BoneIndexAttached => ref Schema.GetRef<UInt32>(this.Handle, "CRagdollPropAttached", "m_boneIndexAttached");

    // m_ragdollAttachedObjectIndex
    public ref UInt32 RagdollAttachedObjectIndex => ref Schema.GetRef<UInt32>(this.Handle, "CRagdollPropAttached", "m_ragdollAttachedObjectIndex");

    // m_attachmentPointBoneSpace
    // MNetworkEncoder "coord"
    public Vector AttachmentPointBoneSpace => Schema.GetDeclaredClass<Vector>(this.Handle, "CRagdollPropAttached", "m_attachmentPointBoneSpace");

    // m_attachmentPointRagdollSpace
    // MNetworkEncoder "coord"
    public Vector AttachmentPointRagdollSpace => Schema.GetDeclaredClass<Vector>(this.Handle, "CRagdollPropAttached", "m_attachmentPointRagdollSpace");

}

public partial class CRectLight : CBarnLight
{
    public CRectLight (IntPtr pointer) : base(pointer) {}

    // m_bShowLight
    // MNetworkChangeCallback "RenderingChanged"
    public ref bool ShowLight => ref Schema.GetRef<bool>(this.Handle, "CRectLight", "m_bShowLight");

}

public partial class CRenderComponent : CEntityComponent
{
    public CRenderComponent (IntPtr pointer) : base(pointer) {}

}

public partial class CRetakeGameRules : NativeObject
{
    public CRetakeGameRules (IntPtr pointer) : base(pointer) {}

    // m_nMatchSeed
    public ref Int32 MatchSeed => ref Schema.GetRef<Int32>(this.Handle, "CRetakeGameRules", "m_nMatchSeed");

    // m_bBlockersPresent
    public ref bool BlockersPresent => ref Schema.GetRef<bool>(this.Handle, "CRetakeGameRules", "m_bBlockersPresent");

    // m_bRoundInProgress
    public ref bool RoundInProgress => ref Schema.GetRef<bool>(this.Handle, "CRetakeGameRules", "m_bRoundInProgress");

    // m_iFirstSecondHalfRound
    public ref Int32 FirstSecondHalfRound => ref Schema.GetRef<Int32>(this.Handle, "CRetakeGameRules", "m_iFirstSecondHalfRound");

    // m_iBombSite
    public ref Int32 BombSite => ref Schema.GetRef<Int32>(this.Handle, "CRetakeGameRules", "m_iBombSite");

}

public partial class CRopeKeyframe : CBaseModelEntity
{
    public CRopeKeyframe (IntPtr pointer) : base(pointer) {}

    // m_RopeFlags
    public ref UInt16 RopeFlags => ref Schema.GetRef<UInt16>(this.Handle, "CRopeKeyframe", "m_RopeFlags");

    // m_Slack
    public ref Int16 Slack => ref Schema.GetRef<Int16>(this.Handle, "CRopeKeyframe", "m_Slack");

    // m_Width
    public ref float Width => ref Schema.GetRef<float>(this.Handle, "CRopeKeyframe", "m_Width");

    // m_TextureScale
    // MNetworkBitCount "10"
    // MNetworkMinValue "0.100000"
    // MNetworkMaxValue "10.000000"
    public ref float TextureScale => ref Schema.GetRef<float>(this.Handle, "CRopeKeyframe", "m_TextureScale");

    // m_nSegments
    public ref byte Segments => ref Schema.GetRef<byte>(this.Handle, "CRopeKeyframe", "m_nSegments");

    // m_bConstrainBetweenEndpoints
    public ref bool ConstrainBetweenEndpoints => ref Schema.GetRef<bool>(this.Handle, "CRopeKeyframe", "m_bConstrainBetweenEndpoints");

    // m_iRopeMaterialModelIndex
    public CStrongHandle<InfoForResourceTypeIMaterial2> RopeMaterialModelIndex => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CRopeKeyframe", "m_iRopeMaterialModelIndex");

    // m_Subdiv
    public ref byte Subdiv => ref Schema.GetRef<byte>(this.Handle, "CRopeKeyframe", "m_Subdiv");

    // m_nChangeCount
    public ref byte ChangeCount => ref Schema.GetRef<byte>(this.Handle, "CRopeKeyframe", "m_nChangeCount");

    // m_RopeLength
    public ref Int16 RopeLength => ref Schema.GetRef<Int16>(this.Handle, "CRopeKeyframe", "m_RopeLength");

    // m_fLockedPoints
    public ref byte LockedPoints => ref Schema.GetRef<byte>(this.Handle, "CRopeKeyframe", "m_fLockedPoints");

    // m_flScrollSpeed
    public ref float ScrollSpeed => ref Schema.GetRef<float>(this.Handle, "CRopeKeyframe", "m_flScrollSpeed");

    // m_hStartPoint
    public CHandle<CBaseEntity> StartPoint => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CRopeKeyframe", "m_hStartPoint");

    // m_hEndPoint
    public CHandle<CBaseEntity> EndPoint => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CRopeKeyframe", "m_hEndPoint");

    // m_iStartAttachment
    // m_iEndAttachment
}

public partial class CSceneEntity : CPointEntity
{
    public CSceneEntity (IntPtr pointer) : base(pointer) {}

    // m_bIsPlayingBack
    public ref bool IsPlayingBack => ref Schema.GetRef<bool>(this.Handle, "CSceneEntity", "m_bIsPlayingBack");

    // m_bPaused
    public ref bool Paused => ref Schema.GetRef<bool>(this.Handle, "CSceneEntity", "m_bPaused");

    // m_bMultiplayer
    public ref bool Multiplayer => ref Schema.GetRef<bool>(this.Handle, "CSceneEntity", "m_bMultiplayer");

    // m_bAutogenerated
    public ref bool Autogenerated => ref Schema.GetRef<bool>(this.Handle, "CSceneEntity", "m_bAutogenerated");

    // m_flForceClientTime
    public ref float ForceClientTime => ref Schema.GetRef<float>(this.Handle, "CSceneEntity", "m_flForceClientTime");

    // m_hActorList
    public NetworkedVector<CHandle<CBaseFlex>> ActorList => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseFlex>>>(this.Handle, "CSceneEntity", "m_hActorList");

    // m_nSceneStringIndex
    public ref UInt16 SceneStringIndex => ref Schema.GetRef<UInt16>(this.Handle, "CSceneEntity", "m_nSceneStringIndex");

}

public partial class CScriptComponent : CEntityComponent
{
    public CScriptComponent (IntPtr pointer) : base(pointer) {}

}

public partial class CSensorGrenade : CBaseCSGrenade
{
    public CSensorGrenade (IntPtr pointer) : base(pointer) {}

}

public partial class CSensorGrenadeProjectile : CBaseCSGrenadeProjectile
{
    public CSensorGrenadeProjectile (IntPtr pointer) : base(pointer) {}

}

public partial class CShatterGlassShardPhysics : CPhysicsProp
{
    public CShatterGlassShardPhysics (IntPtr pointer) : base(pointer) {}

    // m_ShardDesc
    public shard_model_desc_t ShardDesc => Schema.GetDeclaredClass<shard_model_desc_t>(this.Handle, "CShatterGlassShardPhysics", "m_ShardDesc");

}

public partial class CSkeletonAnimationController : ISkeletonAnimationController
{
    public CSkeletonAnimationController (IntPtr pointer) : base(pointer) {}

}

public partial class CSkeletonInstance : CGameSceneNode
{
    public CSkeletonInstance (IntPtr pointer) : base(pointer) {}

    // m_modelState
    public CModelState ModelState => Schema.GetDeclaredClass<CModelState>(this.Handle, "CSkeletonInstance", "m_modelState");

    // m_bIsAnimationEnabled
    public ref bool IsAnimationEnabled => ref Schema.GetRef<bool>(this.Handle, "CSkeletonInstance", "m_bIsAnimationEnabled");

    // m_bUseParentRenderBounds
    public ref bool UseParentRenderBounds => ref Schema.GetRef<bool>(this.Handle, "CSkeletonInstance", "m_bUseParentRenderBounds");

    // m_materialGroup
    // MNetworkChangeCallback "skeletonMaterialGroupChanged"
    public CUtlStringToken MaterialGroup => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "CSkeletonInstance", "m_materialGroup");

    // m_nHitboxSet
    public ref byte HitboxSet => ref Schema.GetRef<byte>(this.Handle, "CSkeletonInstance", "m_nHitboxSet");

}

public partial class CSkyCamera : CBaseEntity
{
    public CSkyCamera (IntPtr pointer) : base(pointer) {}

    // m_skyboxData
    public sky3dparams_t SkyboxData => Schema.GetDeclaredClass<sky3dparams_t>(this.Handle, "CSkyCamera", "m_skyboxData");

    // m_skyboxSlotToken
    public CUtlStringToken SkyboxSlotToken => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "CSkyCamera", "m_skyboxSlotToken");

}

public partial class CSMatchStats_t : CSPerRoundStats_t
{
    public CSMatchStats_t (IntPtr pointer) : base(pointer) {}

    // m_iEnemy5Ks
    public ref Int32 Enemy5Ks => ref Schema.GetRef<Int32>(this.Handle, "CSMatchStats_t", "m_iEnemy5Ks");

    // m_iEnemy4Ks
    public ref Int32 Enemy4Ks => ref Schema.GetRef<Int32>(this.Handle, "CSMatchStats_t", "m_iEnemy4Ks");

    // m_iEnemy3Ks
    public ref Int32 Enemy3Ks => ref Schema.GetRef<Int32>(this.Handle, "CSMatchStats_t", "m_iEnemy3Ks");

}

public partial class CSmokeGrenade : CBaseCSGrenade
{
    public CSmokeGrenade (IntPtr pointer) : base(pointer) {}

}

public partial class CSmokeGrenadeProjectile : CBaseCSGrenadeProjectile
{
    public CSmokeGrenadeProjectile (IntPtr pointer) : base(pointer) {}

    // m_nSmokeEffectTickBegin
    public ref Int32 SmokeEffectTickBegin => ref Schema.GetRef<Int32>(this.Handle, "CSmokeGrenadeProjectile", "m_nSmokeEffectTickBegin");

    // m_bDidSmokeEffect
    public ref bool DidSmokeEffect => ref Schema.GetRef<bool>(this.Handle, "CSmokeGrenadeProjectile", "m_bDidSmokeEffect");

    // m_nRandomSeed
    public ref Int32 RandomSeed => ref Schema.GetRef<Int32>(this.Handle, "CSmokeGrenadeProjectile", "m_nRandomSeed");

    // m_vSmokeColor
    public Vector SmokeColor => Schema.GetDeclaredClass<Vector>(this.Handle, "CSmokeGrenadeProjectile", "m_vSmokeColor");

    // m_vSmokeDetonationPos
    public Vector SmokeDetonationPos => Schema.GetDeclaredClass<Vector>(this.Handle, "CSmokeGrenadeProjectile", "m_vSmokeDetonationPos");

    // m_VoxelFrameData
    public NetworkedVector<byte> VoxelFrameData => Schema.GetDeclaredClass<NetworkedVector<byte>>(this.Handle, "CSmokeGrenadeProjectile", "m_VoxelFrameData");

}

public partial class CSoundAreaEntityBase : CBaseEntity
{
    public CSoundAreaEntityBase (IntPtr pointer) : base(pointer) {}

    // m_bDisabled
    public ref bool Disabled => ref Schema.GetRef<bool>(this.Handle, "CSoundAreaEntityBase", "m_bDisabled");

    // m_iszSoundAreaType
    public string SoundAreaType
    {
        get { return Schema.GetUtf8String(this.Handle, "CSoundAreaEntityBase", "m_iszSoundAreaType"); }
        set { Schema.SetString(this.Handle, "CSoundAreaEntityBase", "m_iszSoundAreaType", value); }
    }

    // m_vPos
    public Vector Pos => Schema.GetDeclaredClass<Vector>(this.Handle, "CSoundAreaEntityBase", "m_vPos");

}

public partial class CSoundAreaEntityOrientedBox : CSoundAreaEntityBase
{
    public CSoundAreaEntityOrientedBox (IntPtr pointer) : base(pointer) {}

    // m_vMin
    public Vector Min => Schema.GetDeclaredClass<Vector>(this.Handle, "CSoundAreaEntityOrientedBox", "m_vMin");

    // m_vMax
    public Vector Max => Schema.GetDeclaredClass<Vector>(this.Handle, "CSoundAreaEntityOrientedBox", "m_vMax");

}

public partial class CSoundAreaEntitySphere : CSoundAreaEntityBase
{
    public CSoundAreaEntitySphere (IntPtr pointer) : base(pointer) {}

    // m_flRadius
    public ref float Radius => ref Schema.GetRef<float>(this.Handle, "CSoundAreaEntitySphere", "m_flRadius");

}

public partial class CSoundOpvarSetAABBEntity : CSoundOpvarSetPointEntity
{
    public CSoundOpvarSetAABBEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CSoundOpvarSetOBBEntity : CSoundOpvarSetAABBEntity
{
    public CSoundOpvarSetOBBEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CSoundOpvarSetOBBWindEntity : CSoundOpvarSetPointBase
{
    public CSoundOpvarSetOBBWindEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CSoundOpvarSetPathCornerEntity : CSoundOpvarSetPointEntity
{
    public CSoundOpvarSetPathCornerEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CSoundOpvarSetPointBase : CBaseEntity
{
    public CSoundOpvarSetPointBase (IntPtr pointer) : base(pointer) {}

    // m_iszStackName
    public string StackName
    {
        get { return Schema.GetUtf8String(this.Handle, "CSoundOpvarSetPointBase", "m_iszStackName"); }
        set { Schema.SetString(this.Handle, "CSoundOpvarSetPointBase", "m_iszStackName", value); }
    }

    // m_iszOperatorName
    public string OperatorName
    {
        get { return Schema.GetUtf8String(this.Handle, "CSoundOpvarSetPointBase", "m_iszOperatorName"); }
        set { Schema.SetString(this.Handle, "CSoundOpvarSetPointBase", "m_iszOperatorName", value); }
    }

    // m_iszOpvarName
    public string OpvarName
    {
        get { return Schema.GetUtf8String(this.Handle, "CSoundOpvarSetPointBase", "m_iszOpvarName"); }
        set { Schema.SetString(this.Handle, "CSoundOpvarSetPointBase", "m_iszOpvarName", value); }
    }

    // m_iOpvarIndex
    public ref Int32 OpvarIndex => ref Schema.GetRef<Int32>(this.Handle, "CSoundOpvarSetPointBase", "m_iOpvarIndex");

    // m_bUseAutoCompare
    public ref bool UseAutoCompare => ref Schema.GetRef<bool>(this.Handle, "CSoundOpvarSetPointBase", "m_bUseAutoCompare");

}

public partial class CSoundOpvarSetPointEntity : CSoundOpvarSetPointBase
{
    public CSoundOpvarSetPointEntity (IntPtr pointer) : base(pointer) {}

}

public partial class CSPerRoundStats_t : NativeObject
{
    public CSPerRoundStats_t (IntPtr pointer) : base(pointer) {}

    // m_iKills
    public ref Int32 Kills => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iKills");

    // m_iDeaths
    public ref Int32 Deaths => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iDeaths");

    // m_iAssists
    public ref Int32 Assists => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iAssists");

    // m_iDamage
    // MNetworkUserGroup "AllPlayersDuringFreezePeriod"
    public ref Int32 Damage => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iDamage");

    // m_iEquipmentValue
    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public ref Int32 EquipmentValue => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iEquipmentValue");

    // m_iMoneySaved
    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public ref Int32 MoneySaved => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iMoneySaved");

    // m_iKillReward
    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public ref Int32 KillReward => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iKillReward");

    // m_iLiveTime
    public ref Int32 LiveTime => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iLiveTime");

    // m_iHeadShotKills
    public ref Int32 HeadShotKills => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iHeadShotKills");

    // m_iObjective
    // MNetworkUserGroup "AllPlayersDuringFreezePeriod"
    public ref Int32 Objective => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iObjective");

    // m_iCashEarned
    // MNetworkUserGroup "TeammateAndSpectatorExclusive"
    public ref Int32 CashEarned => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iCashEarned");

    // m_iUtilityDamage
    // MNetworkUserGroup "AllPlayersDuringFreezePeriod"
    public ref Int32 UtilityDamage => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iUtilityDamage");

    // m_iEnemiesFlashed
    // MNetworkUserGroup "AllPlayersDuringFreezePeriod"
    public ref Int32 EnemiesFlashed => ref Schema.GetRef<Int32>(this.Handle, "CSPerRoundStats_t", "m_iEnemiesFlashed");

}

public partial class CSpotlightEnd : CBaseModelEntity
{
    public CSpotlightEnd (IntPtr pointer) : base(pointer) {}

    // m_flLightScale
    public ref float LightScale => ref Schema.GetRef<float>(this.Handle, "CSpotlightEnd", "m_flLightScale");

    // m_Radius
    public ref float Radius => ref Schema.GetRef<float>(this.Handle, "CSpotlightEnd", "m_Radius");

}

public partial class CSprite : CBaseModelEntity
{
    public CSprite (IntPtr pointer) : base(pointer) {}

    // m_hSpriteMaterial
    public CStrongHandle<InfoForResourceTypeIMaterial2> SpriteMaterial => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CSprite", "m_hSpriteMaterial");

    // m_hAttachedToEntity
    public CHandle<CBaseEntity> AttachedToEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CSprite", "m_hAttachedToEntity");

    // m_nAttachment
    // m_flSpriteFramerate
    // MNetworkBitCount "8"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "60.000000"
    // MNetworkEncodeFlags "2"
    public ref float SpriteFramerate => ref Schema.GetRef<float>(this.Handle, "CSprite", "m_flSpriteFramerate");

    // m_flFrame
    // MNetworkBitCount "20"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "256.000000"
    // MNetworkEncodeFlags "1"
    public ref float Frame => ref Schema.GetRef<float>(this.Handle, "CSprite", "m_flFrame");

    // m_nBrightness
    public ref UInt32 Brightness => ref Schema.GetRef<UInt32>(this.Handle, "CSprite", "m_nBrightness");

    // m_flBrightnessDuration
    public ref float BrightnessDuration => ref Schema.GetRef<float>(this.Handle, "CSprite", "m_flBrightnessDuration");

    // m_flSpriteScale
    // MNetworkChangeCallback "OnSpriteScaleChanged"
    public ref float SpriteScale => ref Schema.GetRef<float>(this.Handle, "CSprite", "m_flSpriteScale");

    // m_flScaleDuration
    public ref float ScaleDuration => ref Schema.GetRef<float>(this.Handle, "CSprite", "m_flScaleDuration");

    // m_bWorldSpaceScale
    public ref bool WorldSpaceScale => ref Schema.GetRef<bool>(this.Handle, "CSprite", "m_bWorldSpaceScale");

    // m_flGlowProxySize
    // MNetworkBitCount "6"
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "64.000000"
    // MNetworkEncodeFlags "2"
    public ref float GlowProxySize => ref Schema.GetRef<float>(this.Handle, "CSprite", "m_flGlowProxySize");

    // m_flHDRColorScale
    public ref float HDRColorScale => ref Schema.GetRef<float>(this.Handle, "CSprite", "m_flHDRColorScale");

}

public partial class CSpriteOriented : CSprite
{
    public CSpriteOriented (IntPtr pointer) : base(pointer) {}

}

public partial class CSun : CBaseModelEntity
{
    public CSun (IntPtr pointer) : base(pointer) {}

    // m_vDirection
    public Vector Direction => Schema.GetDeclaredClass<Vector>(this.Handle, "CSun", "m_vDirection");

    // m_clrOverlay
    public Color Overlay => Schema.GetDeclaredClass<Color>(this.Handle, "CSun", "m_clrOverlay");

    // m_iszEffectName
    public string EffectName
    {
        get { return Schema.GetUtf8String(this.Handle, "CSun", "m_iszEffectName"); }
        set { Schema.SetString(this.Handle, "CSun", "m_iszEffectName", value); }
    }

    // m_iszSSEffectName
    public string SSEffectName
    {
        get { return Schema.GetUtf8String(this.Handle, "CSun", "m_iszSSEffectName"); }
        set { Schema.SetString(this.Handle, "CSun", "m_iszSSEffectName", value); }
    }

    // m_bOn
    public ref bool On => ref Schema.GetRef<bool>(this.Handle, "CSun", "m_bOn");

    // m_bmaxColor
    public ref bool BmaxColor => ref Schema.GetRef<bool>(this.Handle, "CSun", "m_bmaxColor");

    // m_flSize
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public ref float Size => ref Schema.GetRef<float>(this.Handle, "CSun", "m_flSize");

    // m_flRotation
    // MNetworkMinValue "-360.000000"
    // MNetworkMaxValue "360.000000"
    public ref float Rotation => ref Schema.GetRef<float>(this.Handle, "CSun", "m_flRotation");

    // m_flHazeScale
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public ref float HazeScale => ref Schema.GetRef<float>(this.Handle, "CSun", "m_flHazeScale");

    // m_flAlphaHaze
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "2.000000"
    public ref float AlphaHaze => ref Schema.GetRef<float>(this.Handle, "CSun", "m_flAlphaHaze");

    // m_flAlphaHdr
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "2.000000"
    public ref float AlphaHdr => ref Schema.GetRef<float>(this.Handle, "CSun", "m_flAlphaHdr");

    // m_flAlphaScale
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "2.000000"
    public ref float AlphaScale => ref Schema.GetRef<float>(this.Handle, "CSun", "m_flAlphaScale");

    // m_flHDRColorScale
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "100.000000"
    public ref float HDRColorScale => ref Schema.GetRef<float>(this.Handle, "CSun", "m_flHDRColorScale");

    // m_flFarZScale
    // MNetworkMinValue "0.000000"
    // MNetworkMaxValue "1.000000"
    public ref float FarZScale => ref Schema.GetRef<float>(this.Handle, "CSun", "m_flFarZScale");

}

public partial class CTablet : CCSWeaponBase
{
    public CTablet (IntPtr pointer) : base(pointer) {}

}

public partial class CTeam : CBaseEntity
{
    public CTeam (IntPtr pointer) : base(pointer) {}

    // m_aPlayerControllers
    // MNetworkAlias "m_aPlayers"
    public NetworkedVector<CHandle<CBasePlayerController>> PlayerControllers => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBasePlayerController>>>(this.Handle, "CTeam", "m_aPlayerControllers");

    // m_aPlayers
    // MNetworkAlias "m_aPawns"
    public NetworkedVector<CHandle<CBasePlayerPawn>> Players => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBasePlayerPawn>>>(this.Handle, "CTeam", "m_aPlayers");

    // m_iScore
    public ref Int32 Score => ref Schema.GetRef<Int32>(this.Handle, "CTeam", "m_iScore");

    // m_szTeamname
    public string Teamname
    {
        get { return Schema.GetString(this.Handle, "CTeam", "m_szTeamname"); }
        set { Schema.SetString(this.Handle, "CTeam", "m_szTeamname", value); }
    }

}

public partial class CTeamplayRules : CMultiplayRules
{
    public CTeamplayRules (IntPtr pointer) : base(pointer) {}

}

public partial class CTextureBasedAnimatable : CBaseModelEntity
{
    public CTextureBasedAnimatable (IntPtr pointer) : base(pointer) {}

    // m_bLoop
    public ref bool Loop => ref Schema.GetRef<bool>(this.Handle, "CTextureBasedAnimatable", "m_bLoop");

    // m_flFPS
    public ref float FPS => ref Schema.GetRef<float>(this.Handle, "CTextureBasedAnimatable", "m_flFPS");

    // m_hPositionKeys
    public CStrongHandle<InfoForResourceTypeCTextureBase> PositionKeys => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CTextureBasedAnimatable", "m_hPositionKeys");

    // m_hRotationKeys
    public CStrongHandle<InfoForResourceTypeCTextureBase> RotationKeys => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CTextureBasedAnimatable", "m_hRotationKeys");

    // m_vAnimationBoundsMin
    public Vector AnimationBoundsMin => Schema.GetDeclaredClass<Vector>(this.Handle, "CTextureBasedAnimatable", "m_vAnimationBoundsMin");

    // m_vAnimationBoundsMax
    public Vector AnimationBoundsMax => Schema.GetDeclaredClass<Vector>(this.Handle, "CTextureBasedAnimatable", "m_vAnimationBoundsMax");

    // m_flStartTime
    public ref float StartTime => ref Schema.GetRef<float>(this.Handle, "CTextureBasedAnimatable", "m_flStartTime");

    // m_flStartFrame
    public ref float StartFrame => ref Schema.GetRef<float>(this.Handle, "CTextureBasedAnimatable", "m_flStartFrame");

}

public partial class CTonemapController2 : CBaseEntity
{
    public CTonemapController2 (IntPtr pointer) : base(pointer) {}

    // m_flAutoExposureMin
    public ref float AutoExposureMin => ref Schema.GetRef<float>(this.Handle, "CTonemapController2", "m_flAutoExposureMin");

    // m_flAutoExposureMax
    public ref float AutoExposureMax => ref Schema.GetRef<float>(this.Handle, "CTonemapController2", "m_flAutoExposureMax");

    // m_flTonemapPercentTarget
    public ref float TonemapPercentTarget => ref Schema.GetRef<float>(this.Handle, "CTonemapController2", "m_flTonemapPercentTarget");

    // m_flTonemapPercentBrightPixels
    public ref float TonemapPercentBrightPixels => ref Schema.GetRef<float>(this.Handle, "CTonemapController2", "m_flTonemapPercentBrightPixels");

    // m_flTonemapMinAvgLum
    public ref float TonemapMinAvgLum => ref Schema.GetRef<float>(this.Handle, "CTonemapController2", "m_flTonemapMinAvgLum");

    // m_flExposureAdaptationSpeedUp
    public ref float ExposureAdaptationSpeedUp => ref Schema.GetRef<float>(this.Handle, "CTonemapController2", "m_flExposureAdaptationSpeedUp");

    // m_flExposureAdaptationSpeedDown
    public ref float ExposureAdaptationSpeedDown => ref Schema.GetRef<float>(this.Handle, "CTonemapController2", "m_flExposureAdaptationSpeedDown");

    // m_flTonemapEVSmoothingRange
    public ref float TonemapEVSmoothingRange => ref Schema.GetRef<float>(this.Handle, "CTonemapController2", "m_flTonemapEVSmoothingRange");

}

public partial class CTouchExpansionComponent : CEntityComponent
{
    public CTouchExpansionComponent (IntPtr pointer) : base(pointer) {}

}

public partial class CTriggerBuoyancy : CBaseTrigger
{
    public CTriggerBuoyancy (IntPtr pointer) : base(pointer) {}

    // m_flFluidDensity
    public ref float FluidDensity => ref Schema.GetRef<float>(this.Handle, "CTriggerBuoyancy", "m_flFluidDensity");

}

public partial class CTriggerTripWire : CBaseTrigger
{
    public CTriggerTripWire (IntPtr pointer) : base(pointer) {}

}

public partial class CTriggerVolume : CBaseModelEntity
{
    public CTriggerVolume (IntPtr pointer) : base(pointer) {}

}

public partial class CTripWireFire : CBaseCSGrenade
{
    public CTripWireFire (IntPtr pointer) : base(pointer) {}

}

public partial class CTripWireFireProjectile : CBaseGrenade
{
    public CTripWireFireProjectile (IntPtr pointer) : base(pointer) {}

}

public partial class CVoteController : CBaseEntity
{
    public CVoteController (IntPtr pointer) : base(pointer) {}

    // m_iActiveIssueIndex
    public ref Int32 ActiveIssueIndex => ref Schema.GetRef<Int32>(this.Handle, "CVoteController", "m_iActiveIssueIndex");

    // m_iOnlyTeamToVote
    public ref Int32 OnlyTeamToVote => ref Schema.GetRef<Int32>(this.Handle, "CVoteController", "m_iOnlyTeamToVote");

    // m_nVoteOptionCount
    public Span<Int32> VoteOptionCount => Schema.GetFixedArray<Int32>(this.Handle, "CVoteController", "m_nVoteOptionCount", 5);

    // m_nPotentialVotes
    public ref Int32 PotentialVotes => ref Schema.GetRef<Int32>(this.Handle, "CVoteController", "m_nPotentialVotes");

    // m_bIsYesNoVote
    public ref bool IsYesNoVote => ref Schema.GetRef<bool>(this.Handle, "CVoteController", "m_bIsYesNoVote");

}

public partial class CWaterBullet : CBaseAnimGraph
{
    public CWaterBullet (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponAug : CCSWeaponBaseGun
{
    public CWeaponAug (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponAWP : CCSWeaponBaseGun
{
    public CWeaponAWP (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponBaseItem : CCSWeaponBase
{
    public CWeaponBaseItem (IntPtr pointer) : base(pointer) {}

    // m_SequenceCompleteTimer
    public CountdownTimer SequenceCompleteTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CWeaponBaseItem", "m_SequenceCompleteTimer");

    // m_bRedraw
    public ref bool Redraw => ref Schema.GetRef<bool>(this.Handle, "CWeaponBaseItem", "m_bRedraw");

}

public partial class CWeaponBizon : CCSWeaponBaseGun
{
    public CWeaponBizon (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponElite : CCSWeaponBaseGun
{
    public CWeaponElite (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponFamas : CCSWeaponBaseGun
{
    public CWeaponFamas (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponFiveSeven : CCSWeaponBaseGun
{
    public CWeaponFiveSeven (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponG3SG1 : CCSWeaponBaseGun
{
    public CWeaponG3SG1 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponGalilAR : CCSWeaponBaseGun
{
    public CWeaponGalilAR (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponGlock : CCSWeaponBaseGun
{
    public CWeaponGlock (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponHKP2000 : CCSWeaponBaseGun
{
    public CWeaponHKP2000 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponM249 : CCSWeaponBaseGun
{
    public CWeaponM249 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponM4A1 : CCSWeaponBaseGun
{
    public CWeaponM4A1 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponMAC10 : CCSWeaponBaseGun
{
    public CWeaponMAC10 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponMag7 : CCSWeaponBaseGun
{
    public CWeaponMag7 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponMP7 : CCSWeaponBaseGun
{
    public CWeaponMP7 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponMP9 : CCSWeaponBaseGun
{
    public CWeaponMP9 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponNegev : CCSWeaponBaseGun
{
    public CWeaponNegev (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponNOVA : CCSWeaponBase
{
    public CWeaponNOVA (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponP250 : CCSWeaponBaseGun
{
    public CWeaponP250 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponP90 : CCSWeaponBaseGun
{
    public CWeaponP90 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponSawedoff : CCSWeaponBase
{
    public CWeaponSawedoff (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponSCAR20 : CCSWeaponBaseGun
{
    public CWeaponSCAR20 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponSG556 : CCSWeaponBaseGun
{
    public CWeaponSG556 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponShield : CCSWeaponBaseGun
{
    public CWeaponShield (IntPtr pointer) : base(pointer) {}

    // m_flDisplayHealth
    public ref float DisplayHealth => ref Schema.GetRef<float>(this.Handle, "CWeaponShield", "m_flDisplayHealth");

}

public partial class CWeaponSSG08 : CCSWeaponBaseGun
{
    public CWeaponSSG08 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponTaser : CCSWeaponBaseGun
{
    public CWeaponTaser (IntPtr pointer) : base(pointer) {}

    // m_fFireTime
    public ref float FireTime => ref Schema.GetRef<float>(this.Handle, "CWeaponTaser", "m_fFireTime");

}

public partial class CWeaponTec9 : CCSWeaponBaseGun
{
    public CWeaponTec9 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponUMP45 : CCSWeaponBaseGun
{
    public CWeaponUMP45 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponXM1014 : CCSWeaponBase
{
    public CWeaponXM1014 (IntPtr pointer) : base(pointer) {}

}

public partial class CWeaponZoneRepulsor : CCSWeaponBaseGun
{
    public CWeaponZoneRepulsor (IntPtr pointer) : base(pointer) {}

}

public partial class CWorld : CBaseModelEntity
{
    public CWorld (IntPtr pointer) : base(pointer) {}

}

public partial class EntityRenderAttribute_t : NativeObject
{
    public EntityRenderAttribute_t (IntPtr pointer) : base(pointer) {}

    // m_ID
    public CUtlStringToken ID => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "EntityRenderAttribute_t", "m_ID");

    // m_Values
    public Vector4D Values => Schema.GetDeclaredClass<Vector4D>(this.Handle, "EntityRenderAttribute_t", "m_Values");

}

public partial class EntitySpottedState_t : NativeObject
{
    public EntitySpottedState_t (IntPtr pointer) : base(pointer) {}

    // m_bSpotted
    // MNetworkChangeCallback "OnIsSpottedChanged"
    public ref bool Spotted => ref Schema.GetRef<bool>(this.Handle, "EntitySpottedState_t", "m_bSpotted");

    // m_bSpottedByMask
    // MNetworkChangeCallback "OnIsSpottedChanged"
    public Span<UInt32> SpottedByMask => Schema.GetFixedArray<UInt32>(this.Handle, "EntitySpottedState_t", "m_bSpottedByMask", 2);

}

public partial class fogparams_t : NativeObject
{
    public fogparams_t (IntPtr pointer) : base(pointer) {}

    // dirPrimary
    // MNetworkEncoder "coord"
    public Vector DirPrimary => Schema.GetDeclaredClass<Vector>(this.Handle, "fogparams_t", "dirPrimary");

    // colorPrimary
    public Color ColorPrimary => Schema.GetDeclaredClass<Color>(this.Handle, "fogparams_t", "colorPrimary");

    // colorSecondary
    public Color ColorSecondary => Schema.GetDeclaredClass<Color>(this.Handle, "fogparams_t", "colorSecondary");

    // colorPrimaryLerpTo
    // MNetworkUserGroup "FogController"
    public Color ColorPrimaryLerpTo => Schema.GetDeclaredClass<Color>(this.Handle, "fogparams_t", "colorPrimaryLerpTo");

    // colorSecondaryLerpTo
    // MNetworkUserGroup "FogController"
    public Color ColorSecondaryLerpTo => Schema.GetDeclaredClass<Color>(this.Handle, "fogparams_t", "colorSecondaryLerpTo");

    // start
    public ref float Start => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "start");

    // end
    public ref float End => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "end");

    // farz
    // MNetworkUserGroup "FogController"
    public ref float Farz => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "farz");

    // maxdensity
    public ref float Maxdensity => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "maxdensity");

    // exponent
    public ref float Exponent => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "exponent");

    // HDRColorScale
    public ref float HDRColorScale => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "HDRColorScale");

    // skyboxFogFactor
    // MNetworkUserGroup "FogController"
    public ref float SkyboxFogFactor => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "skyboxFogFactor");

    // skyboxFogFactorLerpTo
    // MNetworkUserGroup "FogController"
    public ref float SkyboxFogFactorLerpTo => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "skyboxFogFactorLerpTo");

    // startLerpTo
    // MNetworkUserGroup "FogController"
    public ref float StartLerpTo => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "startLerpTo");

    // endLerpTo
    // MNetworkUserGroup "FogController"
    public ref float EndLerpTo => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "endLerpTo");

    // maxdensityLerpTo
    // MNetworkUserGroup "FogController"
    public ref float MaxdensityLerpTo => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "maxdensityLerpTo");

    // lerptime
    // MNetworkUserGroup "FogController"
    public ref float Lerptime => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "lerptime");

    // duration
    // MNetworkUserGroup "FogController"
    public ref float Duration => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "duration");

    // blendtobackground
    // MNetworkUserGroup "FogController"
    public ref float Blendtobackground => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "blendtobackground");

    // scattering
    // MNetworkUserGroup "FogController"
    public ref float Scattering => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "scattering");

    // locallightscale
    // MNetworkUserGroup "FogController"
    public ref float Locallightscale => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "locallightscale");

    // enable
    public ref bool Enable => ref Schema.GetRef<bool>(this.Handle, "fogparams_t", "enable");

    // blend
    public ref bool Blend => ref Schema.GetRef<bool>(this.Handle, "fogparams_t", "blend");

    // m_bNoReflectionFog
    public ref bool NoReflectionFog => ref Schema.GetRef<bool>(this.Handle, "fogparams_t", "m_bNoReflectionFog");

}

public partial class fogplayerparams_t : NativeObject
{
    public fogplayerparams_t (IntPtr pointer) : base(pointer) {}

    // m_hCtrl
    // MNetworkUserGroup "PlayerFogController"
    public CHandle<CFogController> Ctrl => Schema.GetDeclaredClass<CHandle<CFogController>>(this.Handle, "fogplayerparams_t", "m_hCtrl");

}

public partial class IEconItemInterface : NativeObject
{
    public IEconItemInterface (IntPtr pointer) : base(pointer) {}

}

public partial class InfoForResourceTypeCModel : NativeObject
{
    public InfoForResourceTypeCModel (IntPtr pointer) : base(pointer) {}

}

public partial class InfoForResourceTypeCPostProcessingResource : NativeObject
{
    public InfoForResourceTypeCPostProcessingResource (IntPtr pointer) : base(pointer) {}

}

public partial class InfoForResourceTypeCTextureBase : NativeObject
{
    public InfoForResourceTypeCTextureBase (IntPtr pointer) : base(pointer) {}

}

public partial class InfoForResourceTypeIMaterial2 : NativeObject
{
    public InfoForResourceTypeIMaterial2 (IntPtr pointer) : base(pointer) {}

}

public partial class InfoForResourceTypeIParticleSystemDefinition : NativeObject
{
    public InfoForResourceTypeIParticleSystemDefinition (IntPtr pointer) : base(pointer) {}

}

public partial class ISkeletonAnimationController : NativeObject
{
    public ISkeletonAnimationController (IntPtr pointer) : base(pointer) {}

}

public partial class PhysicsRagdollPose_t : NativeObject
{
    public PhysicsRagdollPose_t (IntPtr pointer) : base(pointer) {}

    // m_Transforms
    // MNetworkChangeCallback "OnTransformChanged"
    public NetworkedVector<CTransform> Transforms => Schema.GetDeclaredClass<NetworkedVector<CTransform>>(this.Handle, "PhysicsRagdollPose_t", "m_Transforms");

    // m_hOwner
    public CHandle<CBaseEntity> Owner => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "PhysicsRagdollPose_t", "m_hOwner");

}

public partial class SellbackPurchaseEntry_t : NativeObject
{
    public SellbackPurchaseEntry_t (IntPtr pointer) : base(pointer) {}

    // m_unDefIdx
    public ref UInt16 DefIdx => ref Schema.GetRef<UInt16>(this.Handle, "SellbackPurchaseEntry_t", "m_unDefIdx");

    // m_nCost
    public ref Int32 Cost => ref Schema.GetRef<Int32>(this.Handle, "SellbackPurchaseEntry_t", "m_nCost");

    // m_nPrevArmor
    public ref Int32 PrevArmor => ref Schema.GetRef<Int32>(this.Handle, "SellbackPurchaseEntry_t", "m_nPrevArmor");

    // m_bPrevHelmet
    public ref bool PrevHelmet => ref Schema.GetRef<bool>(this.Handle, "SellbackPurchaseEntry_t", "m_bPrevHelmet");

    // m_hItem
    public CHandle<CEntityInstance> Item => Schema.GetDeclaredClass<CHandle<CEntityInstance>>(this.Handle, "SellbackPurchaseEntry_t", "m_hItem");

}

public partial class ServerAuthoritativeWeaponSlot_t : NativeObject
{
    public ServerAuthoritativeWeaponSlot_t (IntPtr pointer) : base(pointer) {}

    // unClass
    public ref UInt16 UnClass => ref Schema.GetRef<UInt16>(this.Handle, "ServerAuthoritativeWeaponSlot_t", "unClass");

    // unSlot
    public ref UInt16 UnSlot => ref Schema.GetRef<UInt16>(this.Handle, "ServerAuthoritativeWeaponSlot_t", "unSlot");

    // unItemDefIdx
    public ref UInt16 UnItemDefIdx => ref Schema.GetRef<UInt16>(this.Handle, "ServerAuthoritativeWeaponSlot_t", "unItemDefIdx");

}

public partial class shard_model_desc_t : NativeObject
{
    public shard_model_desc_t (IntPtr pointer) : base(pointer) {}

    // m_nModelID
    public ref Int32 ModelID => ref Schema.GetRef<Int32>(this.Handle, "shard_model_desc_t", "m_nModelID");

    // m_hMaterial
    public CStrongHandle<InfoForResourceTypeIMaterial2> Material => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "shard_model_desc_t", "m_hMaterial");

    // m_solid
    public ref ShardSolid_t Solid => ref Schema.GetRef<ShardSolid_t>(this.Handle, "shard_model_desc_t", "m_solid");

    // m_ShatterPanelMode
    public ref ShatterPanelMode ShatterPanelMode => ref Schema.GetRef<ShatterPanelMode>(this.Handle, "shard_model_desc_t", "m_ShatterPanelMode");

    // m_vecPanelSize
    public Vector2D PanelSize => Schema.GetDeclaredClass<Vector2D>(this.Handle, "shard_model_desc_t", "m_vecPanelSize");

    // m_vecStressPositionA
    public Vector2D StressPositionA => Schema.GetDeclaredClass<Vector2D>(this.Handle, "shard_model_desc_t", "m_vecStressPositionA");

    // m_vecStressPositionB
    public Vector2D StressPositionB => Schema.GetDeclaredClass<Vector2D>(this.Handle, "shard_model_desc_t", "m_vecStressPositionB");

    // m_vecPanelVertices
    public NetworkedVector<Vector2D> PanelVertices => Schema.GetDeclaredClass<NetworkedVector<Vector2D>>(this.Handle, "shard_model_desc_t", "m_vecPanelVertices");

    // m_flGlassHalfThickness
    public ref float GlassHalfThickness => ref Schema.GetRef<float>(this.Handle, "shard_model_desc_t", "m_flGlassHalfThickness");

    // m_bHasParent
    public ref bool HasParent => ref Schema.GetRef<bool>(this.Handle, "shard_model_desc_t", "m_bHasParent");

    // m_bParentFrozen
    public ref bool ParentFrozen => ref Schema.GetRef<bool>(this.Handle, "shard_model_desc_t", "m_bParentFrozen");

    // m_SurfacePropStringToken
    public CUtlStringToken SurfacePropStringToken => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "shard_model_desc_t", "m_SurfacePropStringToken");

    // m_LightGroup
    public CUtlStringToken LightGroup => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "shard_model_desc_t", "m_LightGroup");

}

public partial class sky3dparams_t : NativeObject
{
    public sky3dparams_t (IntPtr pointer) : base(pointer) {}

    // scale
    public ref Int16 Scale => ref Schema.GetRef<Int16>(this.Handle, "sky3dparams_t", "scale");

    // origin
    // MNetworkEncoder "coord"
    public Vector Origin => Schema.GetDeclaredClass<Vector>(this.Handle, "sky3dparams_t", "origin");

    // bClip3DSkyBoxNearToWorldFar
    public ref bool BClip3DSkyBoxNearToWorldFar => ref Schema.GetRef<bool>(this.Handle, "sky3dparams_t", "bClip3DSkyBoxNearToWorldFar");

    // flClip3DSkyBoxNearToWorldFarOffset
    public ref float FlClip3DSkyBoxNearToWorldFarOffset => ref Schema.GetRef<float>(this.Handle, "sky3dparams_t", "flClip3DSkyBoxNearToWorldFarOffset");

    // fog
    public fogparams_t Fog => Schema.GetDeclaredClass<fogparams_t>(this.Handle, "sky3dparams_t", "fog");

    // m_nWorldGroupID
    public WorldGroupId_t WorldGroupID => Schema.GetDeclaredClass<WorldGroupId_t>(this.Handle, "sky3dparams_t", "m_nWorldGroupID");

}

public partial class ViewAngleServerChange_t : NativeObject
{
    public ViewAngleServerChange_t (IntPtr pointer) : base(pointer) {}

    // nType
    public ref FixAngleSet_t NType => ref Schema.GetRef<FixAngleSet_t>(this.Handle, "ViewAngleServerChange_t", "nType");

    // qAngle
    // MNetworkEncoder "qangle_precise"
    public QAngle QAngle => Schema.GetDeclaredClass<QAngle>(this.Handle, "ViewAngleServerChange_t", "qAngle");

    // nIndex
    public ref UInt32 NIndex => ref Schema.GetRef<UInt32>(this.Handle, "ViewAngleServerChange_t", "nIndex");

}

public partial class VPhysicsCollisionAttribute_t : NativeObject
{
    public VPhysicsCollisionAttribute_t (IntPtr pointer) : base(pointer) {}

    // m_nInteractsAs
    public ref UInt64 InteractsAs => ref Schema.GetRef<UInt64>(this.Handle, "VPhysicsCollisionAttribute_t", "m_nInteractsAs");

    // m_nInteractsWith
    public ref UInt64 InteractsWith => ref Schema.GetRef<UInt64>(this.Handle, "VPhysicsCollisionAttribute_t", "m_nInteractsWith");

    // m_nInteractsExclude
    public ref UInt64 InteractsExclude => ref Schema.GetRef<UInt64>(this.Handle, "VPhysicsCollisionAttribute_t", "m_nInteractsExclude");

    // m_nEntityId
    public ref UInt32 EntityId => ref Schema.GetRef<UInt32>(this.Handle, "VPhysicsCollisionAttribute_t", "m_nEntityId");

    // m_nOwnerId
    public ref UInt32 OwnerId => ref Schema.GetRef<UInt32>(this.Handle, "VPhysicsCollisionAttribute_t", "m_nOwnerId");

    // m_nHierarchyId
    public ref UInt16 HierarchyId => ref Schema.GetRef<UInt16>(this.Handle, "VPhysicsCollisionAttribute_t", "m_nHierarchyId");

    // m_nCollisionGroup
    public ref byte CollisionGroup => ref Schema.GetRef<byte>(this.Handle, "VPhysicsCollisionAttribute_t", "m_nCollisionGroup");

    // m_nCollisionFunctionMask
    public ref byte CollisionFunctionMask => ref Schema.GetRef<byte>(this.Handle, "VPhysicsCollisionAttribute_t", "m_nCollisionFunctionMask");

}

public partial class WeaponPurchaseCount_t : NativeObject
{
    public WeaponPurchaseCount_t (IntPtr pointer) : base(pointer) {}

    // m_nItemDefIndex
    public ref UInt16 ItemDefIndex => ref Schema.GetRef<UInt16>(this.Handle, "WeaponPurchaseCount_t", "m_nItemDefIndex");

    // m_nCount
    public ref UInt16 Count => ref Schema.GetRef<UInt16>(this.Handle, "WeaponPurchaseCount_t", "m_nCount");

}

public partial class WeaponPurchaseTracker_t : NativeObject
{
    public WeaponPurchaseTracker_t (IntPtr pointer) : base(pointer) {}

    // m_weaponPurchases
    public NetworkedVector<WeaponPurchaseCount_t> WeaponPurchases => Schema.GetDeclaredClass<NetworkedVector<WeaponPurchaseCount_t>>(this.Handle, "WeaponPurchaseTracker_t", "m_weaponPurchases");

}
