// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CSound : NativeObject
{
    public CSound (IntPtr pointer) : base(pointer) {}

	// m_hOwner
	[SchemaMember("CSound", "m_hOwner")]
	public CHandle<CBaseEntity> Owner => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CSound", "m_hOwner");

	// m_hTarget
	[SchemaMember("CSound", "m_hTarget")]
	public CHandle<CBaseEntity> Target => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CSound", "m_hTarget");

	// m_iVolume
	[SchemaMember("CSound", "m_iVolume")]
	public ref Int32 Volume => ref Schema.GetRef<Int32>(this.Handle, "CSound", "m_iVolume");

	// m_flOcclusionScale
	[SchemaMember("CSound", "m_flOcclusionScale")]
	public ref float OcclusionScale => ref Schema.GetRef<float>(this.Handle, "CSound", "m_flOcclusionScale");

	// m_iType
	[SchemaMember("CSound", "m_iType")]
	public ref Int32 Type => ref Schema.GetRef<Int32>(this.Handle, "CSound", "m_iType");

	// m_iNextAudible
	[SchemaMember("CSound", "m_iNextAudible")]
	public ref Int32 NextAudible => ref Schema.GetRef<Int32>(this.Handle, "CSound", "m_iNextAudible");

	// m_flExpireTime
	[SchemaMember("CSound", "m_flExpireTime")]
	public ref float ExpireTime => ref Schema.GetRef<float>(this.Handle, "CSound", "m_flExpireTime");

	// m_iNext
	[SchemaMember("CSound", "m_iNext")]
	public ref Int16 Next => ref Schema.GetRef<Int16>(this.Handle, "CSound", "m_iNext");

	// m_bNoExpirationTime
	[SchemaMember("CSound", "m_bNoExpirationTime")]
	public ref bool NoExpirationTime => ref Schema.GetRef<bool>(this.Handle, "CSound", "m_bNoExpirationTime");

	// m_ownerChannelIndex
	[SchemaMember("CSound", "m_ownerChannelIndex")]
	public ref Int32 OwnerChannelIndex => ref Schema.GetRef<Int32>(this.Handle, "CSound", "m_ownerChannelIndex");

	// m_vecOrigin
	[SchemaMember("CSound", "m_vecOrigin")]
	public Vector Origin => Schema.GetDeclaredClass<Vector>(this.Handle, "CSound", "m_vecOrigin");

	// m_bHasOwner
	[SchemaMember("CSound", "m_bHasOwner")]
	public ref bool HasOwner => ref Schema.GetRef<bool>(this.Handle, "CSound", "m_bHasOwner");

}
