// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CGlowProperty : NativeObject
{
    public CGlowProperty (IntPtr pointer) : base(pointer) {}

	// m_fGlowColor
	[SchemaMember("CGlowProperty", "m_fGlowColor")]
	public Vector3 GlowColor
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CGlowProperty", "m_fGlowColor"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CGlowProperty", "m_fGlowColor", value); }
	}

	// m_iGlowType
	[SchemaMember("CGlowProperty", "m_iGlowType")]
	public Int32 GlowType
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CGlowProperty", "m_iGlowType"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CGlowProperty", "m_iGlowType", value); }
	}

	// m_iGlowTeam
	[SchemaMember("CGlowProperty", "m_iGlowTeam")]
	public Int32 GlowTeam
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CGlowProperty", "m_iGlowTeam"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CGlowProperty", "m_iGlowTeam", value); }
	}

	// m_nGlowRange
	[SchemaMember("CGlowProperty", "m_nGlowRange")]
	public Int32 GlowRange
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CGlowProperty", "m_nGlowRange"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CGlowProperty", "m_nGlowRange", value); }
	}

	// m_nGlowRangeMin
	[SchemaMember("CGlowProperty", "m_nGlowRangeMin")]
	public Int32 GlowRangeMin
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CGlowProperty", "m_nGlowRangeMin"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CGlowProperty", "m_nGlowRangeMin", value); }
	}

	// m_glowColorOverride
	[SchemaMember("CGlowProperty", "m_glowColorOverride")]
	public Color GlowColorOverride
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CGlowProperty", "m_glowColorOverride"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CGlowProperty", "m_glowColorOverride", value); }
	}

	// m_bFlashing
	[SchemaMember("CGlowProperty", "m_bFlashing")]
	public bool Flashing
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CGlowProperty", "m_bFlashing"); }
		set { Schema.SetValueType<bool>(this.Handle, "CGlowProperty", "m_bFlashing", value); }
	}

	// m_flGlowTime
	[SchemaMember("CGlowProperty", "m_flGlowTime")]
	public float GlowTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CGlowProperty", "m_flGlowTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CGlowProperty", "m_flGlowTime", value); }
	}

	// m_flGlowStartTime
	[SchemaMember("CGlowProperty", "m_flGlowStartTime")]
	public float GlowStartTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CGlowProperty", "m_flGlowStartTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CGlowProperty", "m_flGlowStartTime", value); }
	}

	// m_bEligibleForScreenHighlight
	[SchemaMember("CGlowProperty", "m_bEligibleForScreenHighlight")]
	public bool EligibleForScreenHighlight
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CGlowProperty", "m_bEligibleForScreenHighlight"); }
		set { Schema.SetValueType<bool>(this.Handle, "CGlowProperty", "m_bEligibleForScreenHighlight", value); }
	}

	// m_bGlowing
	[SchemaMember("CGlowProperty", "m_bGlowing")]
	public bool Glowing
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CGlowProperty", "m_bGlowing"); }
		set { Schema.SetValueType<bool>(this.Handle, "CGlowProperty", "m_bGlowing", value); }
	}

	public void GlowTypePropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_iGlowType");
	public void GlowTeamPropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_iGlowTeam");
	public void GlowRangePropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_nGlowRange");
	public void GlowRangeMinPropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_nGlowRangeMin");
	public void GlowColorOverridePropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_glowColorOverride");
	public void FlashingPropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_bFlashing");
	public void GlowTimePropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_flGlowTime");
	public void GlowStartTimePropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_flGlowStartTime");
	public void EligibleForScreenHighlightPropertyChanged() => Utilities.SetStateChanged(this, "CGlowProperty", "m_bEligibleForScreenHighlight");
}
