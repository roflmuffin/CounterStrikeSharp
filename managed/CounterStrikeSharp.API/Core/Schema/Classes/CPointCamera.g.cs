// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPointCamera : CBaseEntity
{
    public CPointCamera (IntPtr pointer) : base(pointer) {}

	// m_FOV
	[SchemaMember("CPointCamera", "m_FOV")]
	public ref float FOV => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_FOV");

	// m_Resolution
	[SchemaMember("CPointCamera", "m_Resolution")]
	public ref float Resolution => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_Resolution");

	// m_bFogEnable
	[SchemaMember("CPointCamera", "m_bFogEnable")]
	public ref bool FogEnable => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bFogEnable");

	// m_FogColor
	[SchemaMember("CPointCamera", "m_FogColor")]
	public Color FogColor
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CPointCamera", "m_FogColor"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CPointCamera", "m_FogColor", value); }
	}

	// m_flFogStart
	[SchemaMember("CPointCamera", "m_flFogStart")]
	public ref float FogStart => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flFogStart");

	// m_flFogEnd
	[SchemaMember("CPointCamera", "m_flFogEnd")]
	public ref float FogEnd => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flFogEnd");

	// m_flFogMaxDensity
	[SchemaMember("CPointCamera", "m_flFogMaxDensity")]
	public ref float FogMaxDensity => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flFogMaxDensity");

	// m_bActive
	[SchemaMember("CPointCamera", "m_bActive")]
	public ref bool Active => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bActive");

	// m_bUseScreenAspectRatio
	[SchemaMember("CPointCamera", "m_bUseScreenAspectRatio")]
	public ref bool UseScreenAspectRatio => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bUseScreenAspectRatio");

	// m_flAspectRatio
	[SchemaMember("CPointCamera", "m_flAspectRatio")]
	public ref float AspectRatio => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flAspectRatio");

	// m_bNoSky
	[SchemaMember("CPointCamera", "m_bNoSky")]
	public ref bool NoSky => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bNoSky");

	// m_fBrightness
	[SchemaMember("CPointCamera", "m_fBrightness")]
	public ref float Brightness => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_fBrightness");

	// m_flZFar
	[SchemaMember("CPointCamera", "m_flZFar")]
	public ref float ZFar => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flZFar");

	// m_flZNear
	[SchemaMember("CPointCamera", "m_flZNear")]
	public ref float ZNear => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flZNear");

	// m_bCanHLTVUse
	[SchemaMember("CPointCamera", "m_bCanHLTVUse")]
	public ref bool CanHLTVUse => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bCanHLTVUse");

	// m_bDofEnabled
	[SchemaMember("CPointCamera", "m_bDofEnabled")]
	public ref bool DofEnabled => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bDofEnabled");

	// m_flDofNearBlurry
	[SchemaMember("CPointCamera", "m_flDofNearBlurry")]
	public ref float DofNearBlurry => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofNearBlurry");

	// m_flDofNearCrisp
	[SchemaMember("CPointCamera", "m_flDofNearCrisp")]
	public ref float DofNearCrisp => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofNearCrisp");

	// m_flDofFarCrisp
	[SchemaMember("CPointCamera", "m_flDofFarCrisp")]
	public ref float DofFarCrisp => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofFarCrisp");

	// m_flDofFarBlurry
	[SchemaMember("CPointCamera", "m_flDofFarBlurry")]
	public ref float DofFarBlurry => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofFarBlurry");

	// m_flDofTiltToGround
	[SchemaMember("CPointCamera", "m_flDofTiltToGround")]
	public ref float DofTiltToGround => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_flDofTiltToGround");

	// m_TargetFOV
	[SchemaMember("CPointCamera", "m_TargetFOV")]
	public ref float TargetFOV => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_TargetFOV");

	// m_DegreesPerSecond
	[SchemaMember("CPointCamera", "m_DegreesPerSecond")]
	public ref float DegreesPerSecond => ref Schema.GetRef<float>(this.Handle, "CPointCamera", "m_DegreesPerSecond");

	// m_bIsOn
	[SchemaMember("CPointCamera", "m_bIsOn")]
	public ref bool IsOn => ref Schema.GetRef<bool>(this.Handle, "CPointCamera", "m_bIsOn");

	// m_pNext
	[SchemaMember("CPointCamera", "m_pNext")]
	public CPointCamera? Next => Schema.GetPointer<CPointCamera>(this.Handle, "CPointCamera", "m_pNext");

}
