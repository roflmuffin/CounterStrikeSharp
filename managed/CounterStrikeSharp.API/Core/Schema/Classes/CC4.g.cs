// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CC4 : CCSWeaponBase
{
    public CC4 (IntPtr pointer) : base(pointer) {}

	// m_vecLastValidPlayerHeldPosition
	[SchemaMember("CC4", "m_vecLastValidPlayerHeldPosition")]
	public Vector3 LastValidPlayerHeldPosition
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CC4", "m_vecLastValidPlayerHeldPosition"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CC4", "m_vecLastValidPlayerHeldPosition", value); }
	}

	// m_vecLastValidDroppedPosition
	[SchemaMember("CC4", "m_vecLastValidDroppedPosition")]
	public Vector3 LastValidDroppedPosition
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CC4", "m_vecLastValidDroppedPosition"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CC4", "m_vecLastValidDroppedPosition", value); }
	}

	// m_bDoValidDroppedPositionCheck
	[SchemaMember("CC4", "m_bDoValidDroppedPositionCheck")]
	public bool DoValidDroppedPositionCheck
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CC4", "m_bDoValidDroppedPositionCheck"); }
		set { Schema.SetValueType<bool>(this.Handle, "CC4", "m_bDoValidDroppedPositionCheck", value); }
	}

	// m_bStartedArming
	[SchemaMember("CC4", "m_bStartedArming")]
	public bool StartedArming
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CC4", "m_bStartedArming"); }
		set { Schema.SetValueType<bool>(this.Handle, "CC4", "m_bStartedArming", value); }
	}

	// m_fArmedTime
	[SchemaMember("CC4", "m_fArmedTime")]
	public float ArmedTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CC4", "m_fArmedTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CC4", "m_fArmedTime", value); }
	}

	// m_bBombPlacedAnimation
	[SchemaMember("CC4", "m_bBombPlacedAnimation")]
	public bool BombPlacedAnimation
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CC4", "m_bBombPlacedAnimation"); }
		set { Schema.SetValueType<bool>(this.Handle, "CC4", "m_bBombPlacedAnimation", value); }
	}

	// m_bIsPlantingViaUse
	[SchemaMember("CC4", "m_bIsPlantingViaUse")]
	public bool IsPlantingViaUse
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CC4", "m_bIsPlantingViaUse"); }
		set { Schema.SetValueType<bool>(this.Handle, "CC4", "m_bIsPlantingViaUse", value); }
	}

	// m_entitySpottedState
	[SchemaMember("CC4", "m_entitySpottedState")]
	public EntitySpottedState_t EntitySpottedState => Schema.GetDeclaredClass<EntitySpottedState_t>(this.Handle, "CC4", "m_entitySpottedState");

	// m_nSpotRules
	[SchemaMember("CC4", "m_nSpotRules")]
	public Int32 SpotRules
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CC4", "m_nSpotRules"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CC4", "m_nSpotRules", value); }
	}

	// m_bPlayedArmingBeeps
	[SchemaMember("CC4", "m_bPlayedArmingBeeps")]
	public Span<bool> PlayedArmingBeeps => Schema.GetFixedArray<bool>(this.Handle, "CC4", "m_bPlayedArmingBeeps", 7);

	// m_bBombPlanted
	[SchemaMember("CC4", "m_bBombPlanted")]
	public bool BombPlanted
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CC4", "m_bBombPlanted"); }
		set { Schema.SetValueType<bool>(this.Handle, "CC4", "m_bBombPlanted", value); }
	}

	public void StartedArmingPropertyChanged() => Utilities.SetStateChanged(this, "CC4", "m_bStartedArming");
	public void ArmedTimePropertyChanged() => Utilities.SetStateChanged(this, "CC4", "m_fArmedTime");
	public void BombPlacedAnimationPropertyChanged() => Utilities.SetStateChanged(this, "CC4", "m_bBombPlacedAnimation");
	public void IsPlantingViaUsePropertyChanged() => Utilities.SetStateChanged(this, "CC4", "m_bIsPlantingViaUse");
	public void EntitySpottedStatePropertyChanged() => Utilities.SetStateChanged(this, "CC4", "m_entitySpottedState");
}
