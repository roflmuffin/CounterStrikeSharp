// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CSkeletonInstance : CGameSceneNode
{
    public CSkeletonInstance (IntPtr pointer) : base(pointer) {}

	// m_modelState
	[SchemaMember("CSkeletonInstance", "m_modelState")]
	public CModelState ModelState => Schema.GetDeclaredClass<CModelState>(this.Handle, "CSkeletonInstance", "m_modelState");

	// m_bIsAnimationEnabled
	[SchemaMember("CSkeletonInstance", "m_bIsAnimationEnabled")]
	public bool IsAnimationEnabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CSkeletonInstance", "m_bIsAnimationEnabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CSkeletonInstance", "m_bIsAnimationEnabled", value); }
	}

	// m_bUseParentRenderBounds
	[SchemaMember("CSkeletonInstance", "m_bUseParentRenderBounds")]
	public bool UseParentRenderBounds
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CSkeletonInstance", "m_bUseParentRenderBounds"); }
		set { Schema.SetValueType<bool>(this.Handle, "CSkeletonInstance", "m_bUseParentRenderBounds", value); }
	}

	// m_bDisableSolidCollisionsForHierarchy
	[SchemaMember("CSkeletonInstance", "m_bDisableSolidCollisionsForHierarchy")]
	public bool DisableSolidCollisionsForHierarchy
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CSkeletonInstance", "m_bDisableSolidCollisionsForHierarchy"); }
		set { Schema.SetValueType<bool>(this.Handle, "CSkeletonInstance", "m_bDisableSolidCollisionsForHierarchy", value); }
	}

	// m_materialGroup
	[SchemaMember("CSkeletonInstance", "m_materialGroup")]
	public CUtlStringToken MaterialGroup => Schema.GetDeclaredClass<CUtlStringToken>(this.Handle, "CSkeletonInstance", "m_materialGroup");

	// m_nHitboxSet
	[SchemaMember("CSkeletonInstance", "m_nHitboxSet")]
	public byte HitboxSet
	{
		get { return Schema.GetValueType<byte>(this.Handle, "CSkeletonInstance", "m_nHitboxSet"); }
		set { Schema.SetValueType<byte>(this.Handle, "CSkeletonInstance", "m_nHitboxSet", value); }
	}

}
