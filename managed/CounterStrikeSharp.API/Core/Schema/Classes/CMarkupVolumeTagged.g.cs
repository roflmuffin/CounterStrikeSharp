// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CMarkupVolumeTagged : CMarkupVolume
{
    public CMarkupVolumeTagged (IntPtr pointer) : base(pointer) {}

	// m_GroupNames
	[SchemaMember("CMarkupVolumeTagged", "m_GroupNames")]
	public NetworkedVector<string> GroupNames => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CMarkupVolumeTagged", "m_GroupNames");

	// m_Tags
	[SchemaMember("CMarkupVolumeTagged", "m_Tags")]
	public NetworkedVector<string> Tags => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CMarkupVolumeTagged", "m_Tags");

	// m_bIsGroup
	[SchemaMember("CMarkupVolumeTagged", "m_bIsGroup")]
	public bool IsGroup
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bIsGroup"); }
		set { Schema.SetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bIsGroup", value); }
	}

	// m_bGroupByPrefab
	[SchemaMember("CMarkupVolumeTagged", "m_bGroupByPrefab")]
	public bool GroupByPrefab
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bGroupByPrefab"); }
		set { Schema.SetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bGroupByPrefab", value); }
	}

	// m_bGroupByVolume
	[SchemaMember("CMarkupVolumeTagged", "m_bGroupByVolume")]
	public bool GroupByVolume
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bGroupByVolume"); }
		set { Schema.SetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bGroupByVolume", value); }
	}

	// m_bGroupOtherGroups
	[SchemaMember("CMarkupVolumeTagged", "m_bGroupOtherGroups")]
	public bool GroupOtherGroups
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bGroupOtherGroups"); }
		set { Schema.SetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bGroupOtherGroups", value); }
	}

	// m_bIsInGroup
	[SchemaMember("CMarkupVolumeTagged", "m_bIsInGroup")]
	public bool IsInGroup
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bIsInGroup"); }
		set { Schema.SetValueType<bool>(this.Handle, "CMarkupVolumeTagged", "m_bIsInGroup", value); }
	}

}
