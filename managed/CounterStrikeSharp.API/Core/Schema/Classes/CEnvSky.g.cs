// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CEnvSky : CBaseModelEntity
{
    public CEnvSky (IntPtr pointer) : base(pointer) {}

	// m_hSkyMaterial
	[SchemaMember("CEnvSky", "m_hSkyMaterial")]
	public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterial => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CEnvSky", "m_hSkyMaterial");

	// m_hSkyMaterialLightingOnly
	[SchemaMember("CEnvSky", "m_hSkyMaterialLightingOnly")]
	public CStrongHandle<InfoForResourceTypeIMaterial2> SkyMaterialLightingOnly => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeIMaterial2>>(this.Handle, "CEnvSky", "m_hSkyMaterialLightingOnly");

	// m_bStartDisabled
	[SchemaMember("CEnvSky", "m_bStartDisabled")]
	public bool StartDisabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvSky", "m_bStartDisabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvSky", "m_bStartDisabled", value); }
	}

	// m_vTintColor
	[SchemaMember("CEnvSky", "m_vTintColor")]
	public Color TintColor
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CEnvSky", "m_vTintColor"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CEnvSky", "m_vTintColor", value); }
	}

	// m_vTintColorLightingOnly
	[SchemaMember("CEnvSky", "m_vTintColorLightingOnly")]
	public Color TintColorLightingOnly
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CEnvSky", "m_vTintColorLightingOnly"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CEnvSky", "m_vTintColorLightingOnly", value); }
	}

	// m_flBrightnessScale
	[SchemaMember("CEnvSky", "m_flBrightnessScale")]
	public float BrightnessScale
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvSky", "m_flBrightnessScale"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvSky", "m_flBrightnessScale", value); }
	}

	// m_nFogType
	[SchemaMember("CEnvSky", "m_nFogType")]
	public Int32 FogType
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CEnvSky", "m_nFogType"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CEnvSky", "m_nFogType", value); }
	}

	// m_flFogMinStart
	[SchemaMember("CEnvSky", "m_flFogMinStart")]
	public float FogMinStart
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvSky", "m_flFogMinStart"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvSky", "m_flFogMinStart", value); }
	}

	// m_flFogMinEnd
	[SchemaMember("CEnvSky", "m_flFogMinEnd")]
	public float FogMinEnd
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvSky", "m_flFogMinEnd"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvSky", "m_flFogMinEnd", value); }
	}

	// m_flFogMaxStart
	[SchemaMember("CEnvSky", "m_flFogMaxStart")]
	public float FogMaxStart
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvSky", "m_flFogMaxStart"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvSky", "m_flFogMaxStart", value); }
	}

	// m_flFogMaxEnd
	[SchemaMember("CEnvSky", "m_flFogMaxEnd")]
	public float FogMaxEnd
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvSky", "m_flFogMaxEnd"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvSky", "m_flFogMaxEnd", value); }
	}

	// m_bEnabled
	[SchemaMember("CEnvSky", "m_bEnabled")]
	public bool Enabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvSky", "m_bEnabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvSky", "m_bEnabled", value); }
	}

	public void SkyMaterialPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_hSkyMaterial");
	public void SkyMaterialLightingOnlyPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_hSkyMaterialLightingOnly");
	public void StartDisabledPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_bStartDisabled");
	public void TintColorPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_vTintColor");
	public void TintColorLightingOnlyPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_vTintColorLightingOnly");
	public void BrightnessScalePropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_flBrightnessScale");
	public void FogTypePropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_nFogType");
	public void FogMinStartPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_flFogMinStart");
	public void FogMinEndPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_flFogMinEnd");
	public void FogMaxStartPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_flFogMaxStart");
	public void FogMaxEndPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_flFogMaxEnd");
	public void EnabledPropertyChanged() => Utilities.SetStateChanged(this, "CEnvSky", "m_bEnabled");
}
