// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPlayer_CameraServices : CPlayerPawnComponent
{
    public CPlayer_CameraServices (IntPtr pointer) : base(pointer) {}

	// m_vecCsViewPunchAngle
	[SchemaMember("CPlayer_CameraServices", "m_vecCsViewPunchAngle")]
	public QAngle CsViewPunchAngle
	{
		get { return Schema.GetValueType<QAngle>(this.Handle, "CPlayer_CameraServices", "m_vecCsViewPunchAngle"); }
		set { Schema.SetValueType<QAngle>(this.Handle, "CPlayer_CameraServices", "m_vecCsViewPunchAngle", value); }
	}

	// m_nCsViewPunchAngleTick
	[SchemaMember("CPlayer_CameraServices", "m_nCsViewPunchAngleTick")]
	public Int32 CsViewPunchAngleTick
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CPlayer_CameraServices", "m_nCsViewPunchAngleTick"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CPlayer_CameraServices", "m_nCsViewPunchAngleTick", value); }
	}

	// m_flCsViewPunchAngleTickRatio
	[SchemaMember("CPlayer_CameraServices", "m_flCsViewPunchAngleTickRatio")]
	public float CsViewPunchAngleTickRatio
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPlayer_CameraServices", "m_flCsViewPunchAngleTickRatio"); }
		set { Schema.SetValueType<float>(this.Handle, "CPlayer_CameraServices", "m_flCsViewPunchAngleTickRatio", value); }
	}

	// m_PlayerFog
	[SchemaMember("CPlayer_CameraServices", "m_PlayerFog")]
	public fogplayerparams_t PlayerFog => Schema.GetDeclaredClass<fogplayerparams_t>(this.Handle, "CPlayer_CameraServices", "m_PlayerFog");

	// m_hColorCorrectionCtrl
	[SchemaMember("CPlayer_CameraServices", "m_hColorCorrectionCtrl")]
	public CHandle<CColorCorrection> ColorCorrectionCtrl => Schema.GetDeclaredClass<CHandle<CColorCorrection>>(this.Handle, "CPlayer_CameraServices", "m_hColorCorrectionCtrl");

	// m_hViewEntity
	[SchemaMember("CPlayer_CameraServices", "m_hViewEntity")]
	public CHandle<CBaseEntity> ViewEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPlayer_CameraServices", "m_hViewEntity");

	// m_hTonemapController
	[SchemaMember("CPlayer_CameraServices", "m_hTonemapController")]
	public CHandle<CTonemapController2> TonemapController => Schema.GetDeclaredClass<CHandle<CTonemapController2>>(this.Handle, "CPlayer_CameraServices", "m_hTonemapController");

	// m_audio
	[SchemaMember("CPlayer_CameraServices", "m_audio")]
	public audioparams_t Audio => Schema.GetDeclaredClass<audioparams_t>(this.Handle, "CPlayer_CameraServices", "m_audio");

	// m_PostProcessingVolumes
	[SchemaMember("CPlayer_CameraServices", "m_PostProcessingVolumes")]
	public NetworkedVector<CHandle<CPostProcessingVolume>> PostProcessingVolumes => Schema.GetDeclaredClass<NetworkedVector<CHandle<CPostProcessingVolume>>>(this.Handle, "CPlayer_CameraServices", "m_PostProcessingVolumes");

	// m_flOldPlayerZ
	[SchemaMember("CPlayer_CameraServices", "m_flOldPlayerZ")]
	public float OldPlayerZ
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPlayer_CameraServices", "m_flOldPlayerZ"); }
		set { Schema.SetValueType<float>(this.Handle, "CPlayer_CameraServices", "m_flOldPlayerZ", value); }
	}

	// m_flOldPlayerViewOffsetZ
	[SchemaMember("CPlayer_CameraServices", "m_flOldPlayerViewOffsetZ")]
	public float OldPlayerViewOffsetZ
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPlayer_CameraServices", "m_flOldPlayerViewOffsetZ"); }
		set { Schema.SetValueType<float>(this.Handle, "CPlayer_CameraServices", "m_flOldPlayerViewOffsetZ", value); }
	}

	// m_hTriggerSoundscapeList
	[SchemaMember("CPlayer_CameraServices", "m_hTriggerSoundscapeList")]
	public NetworkedVector<CHandle<CEnvSoundscapeTriggerable>> TriggerSoundscapeList => Schema.GetDeclaredClass<NetworkedVector<CHandle<CEnvSoundscapeTriggerable>>>(this.Handle, "CPlayer_CameraServices", "m_hTriggerSoundscapeList");

	public void CsViewPunchAnglePropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_vecCsViewPunchAngle");
	public void CsViewPunchAngleTickPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_nCsViewPunchAngleTick");
	public void CsViewPunchAngleTickRatioPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_flCsViewPunchAngleTickRatio");
	public void PlayerFogPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_PlayerFog");
	public void ColorCorrectionCtrlPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_hColorCorrectionCtrl");
	public void ViewEntityPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_hViewEntity");
	public void TonemapControllerPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_hTonemapController");
	public void AudioPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_audio");
	public void PostProcessingVolumesPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_CameraServices", "m_PostProcessingVolumes");
}
