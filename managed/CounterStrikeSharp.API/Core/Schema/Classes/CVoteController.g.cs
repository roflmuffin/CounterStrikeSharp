// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CVoteController : CBaseEntity
{
    public CVoteController (IntPtr pointer) : base(pointer) {}

	// m_iActiveIssueIndex
	[SchemaMember("CVoteController", "m_iActiveIssueIndex")]
	public Int32 ActiveIssueIndex
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CVoteController", "m_iActiveIssueIndex"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CVoteController", "m_iActiveIssueIndex", value); }
	}

	// m_iOnlyTeamToVote
	[SchemaMember("CVoteController", "m_iOnlyTeamToVote")]
	public Int32 OnlyTeamToVote
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CVoteController", "m_iOnlyTeamToVote"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CVoteController", "m_iOnlyTeamToVote", value); }
	}

	// m_nVoteOptionCount
	[SchemaMember("CVoteController", "m_nVoteOptionCount")]
	public Span<Int32> VoteOptionCount => Schema.GetFixedArray<Int32>(this.Handle, "CVoteController", "m_nVoteOptionCount", 5);

	// m_nPotentialVotes
	[SchemaMember("CVoteController", "m_nPotentialVotes")]
	public Int32 PotentialVotes
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CVoteController", "m_nPotentialVotes"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CVoteController", "m_nPotentialVotes", value); }
	}

	// m_bIsYesNoVote
	[SchemaMember("CVoteController", "m_bIsYesNoVote")]
	public bool IsYesNoVote
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CVoteController", "m_bIsYesNoVote"); }
		set { Schema.SetValueType<bool>(this.Handle, "CVoteController", "m_bIsYesNoVote", value); }
	}

	// m_acceptingVotesTimer
	[SchemaMember("CVoteController", "m_acceptingVotesTimer")]
	public CountdownTimer AcceptingVotesTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CVoteController", "m_acceptingVotesTimer");

	// m_executeCommandTimer
	[SchemaMember("CVoteController", "m_executeCommandTimer")]
	public CountdownTimer ExecuteCommandTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CVoteController", "m_executeCommandTimer");

	// m_resetVoteTimer
	[SchemaMember("CVoteController", "m_resetVoteTimer")]
	public CountdownTimer ResetVoteTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CVoteController", "m_resetVoteTimer");

	// m_nVotesCast
	[SchemaMember("CVoteController", "m_nVotesCast")]
	public Span<Int32> VotesCast => Schema.GetFixedArray<Int32>(this.Handle, "CVoteController", "m_nVotesCast", 64);

	// m_playerHoldingVote
	[SchemaMember("CVoteController", "m_playerHoldingVote")]
	public Int32 PlayerHoldingVote
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CVoteController", "m_playerHoldingVote"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CVoteController", "m_playerHoldingVote", value); }
	}

	// m_playerOverrideForVote
	[SchemaMember("CVoteController", "m_playerOverrideForVote")]
	public Int32 PlayerOverrideForVote
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CVoteController", "m_playerOverrideForVote"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CVoteController", "m_playerOverrideForVote", value); }
	}

	// m_nHighestCountIndex
	[SchemaMember("CVoteController", "m_nHighestCountIndex")]
	public Int32 HighestCountIndex
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CVoteController", "m_nHighestCountIndex"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CVoteController", "m_nHighestCountIndex", value); }
	}

	// m_potentialIssues
	[SchemaMember("CVoteController", "m_potentialIssues")]
	public NetworkedVector<CBaseIssue?> PotentialIssues => Schema.GetDeclaredClass<NetworkedVector<CBaseIssue?>>(this.Handle, "CVoteController", "m_potentialIssues");

	public void ActiveIssueIndexPropertyChanged() => Utilities.SetStateChanged(this, "CVoteController", "m_iActiveIssueIndex");
	public void OnlyTeamToVotePropertyChanged() => Utilities.SetStateChanged(this, "CVoteController", "m_iOnlyTeamToVote");
	public void VoteOptionCountPropertyChanged() => Utilities.SetStateChanged(this, "CVoteController", "m_nVoteOptionCount");
	public void PotentialVotesPropertyChanged() => Utilities.SetStateChanged(this, "CVoteController", "m_nPotentialVotes");
	public void IsYesNoVotePropertyChanged() => Utilities.SetStateChanged(this, "CVoteController", "m_bIsYesNoVote");
}
