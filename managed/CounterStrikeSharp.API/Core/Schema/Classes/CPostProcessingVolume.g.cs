// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPostProcessingVolume : CBaseTrigger
{
    public CPostProcessingVolume (IntPtr pointer) : base(pointer) {}

	// m_hPostSettings
	[SchemaMember("CPostProcessingVolume", "m_hPostSettings")]
	public CStrongHandle<InfoForResourceTypeCPostProcessingResource> PostSettings => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCPostProcessingResource>>(this.Handle, "CPostProcessingVolume", "m_hPostSettings");

	// m_flFadeDuration
	[SchemaMember("CPostProcessingVolume", "m_flFadeDuration")]
	public ref float FadeDuration => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flFadeDuration");

	// m_flMinLogExposure
	[SchemaMember("CPostProcessingVolume", "m_flMinLogExposure")]
	public ref float MinLogExposure => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flMinLogExposure");

	// m_flMaxLogExposure
	[SchemaMember("CPostProcessingVolume", "m_flMaxLogExposure")]
	public ref float MaxLogExposure => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flMaxLogExposure");

	// m_flMinExposure
	[SchemaMember("CPostProcessingVolume", "m_flMinExposure")]
	public ref float MinExposure => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flMinExposure");

	// m_flMaxExposure
	[SchemaMember("CPostProcessingVolume", "m_flMaxExposure")]
	public ref float MaxExposure => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flMaxExposure");

	// m_flExposureCompensation
	[SchemaMember("CPostProcessingVolume", "m_flExposureCompensation")]
	public ref float ExposureCompensation => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flExposureCompensation");

	// m_flExposureFadeSpeedUp
	[SchemaMember("CPostProcessingVolume", "m_flExposureFadeSpeedUp")]
	public ref float ExposureFadeSpeedUp => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flExposureFadeSpeedUp");

	// m_flExposureFadeSpeedDown
	[SchemaMember("CPostProcessingVolume", "m_flExposureFadeSpeedDown")]
	public ref float ExposureFadeSpeedDown => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flExposureFadeSpeedDown");

	// m_flTonemapEVSmoothingRange
	[SchemaMember("CPostProcessingVolume", "m_flTonemapEVSmoothingRange")]
	public ref float TonemapEVSmoothingRange => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flTonemapEVSmoothingRange");

	// m_bMaster
	[SchemaMember("CPostProcessingVolume", "m_bMaster")]
	public ref bool Master => ref Schema.GetRef<bool>(this.Handle, "CPostProcessingVolume", "m_bMaster");

	// m_bExposureControl
	[SchemaMember("CPostProcessingVolume", "m_bExposureControl")]
	public ref bool ExposureControl => ref Schema.GetRef<bool>(this.Handle, "CPostProcessingVolume", "m_bExposureControl");

	// m_flRate
	[SchemaMember("CPostProcessingVolume", "m_flRate")]
	public ref float Rate => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flRate");

	// m_flTonemapPercentTarget
	[SchemaMember("CPostProcessingVolume", "m_flTonemapPercentTarget")]
	public ref float TonemapPercentTarget => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flTonemapPercentTarget");

	// m_flTonemapPercentBrightPixels
	[SchemaMember("CPostProcessingVolume", "m_flTonemapPercentBrightPixels")]
	public ref float TonemapPercentBrightPixels => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flTonemapPercentBrightPixels");

	// m_flTonemapMinAvgLum
	[SchemaMember("CPostProcessingVolume", "m_flTonemapMinAvgLum")]
	public ref float TonemapMinAvgLum => ref Schema.GetRef<float>(this.Handle, "CPostProcessingVolume", "m_flTonemapMinAvgLum");

}
