// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CBreakableProp : CBaseProp
{
    public CBreakableProp (IntPtr pointer) : base(pointer) {}

	// m_CPropDataComponent
	[SchemaMember("CBreakableProp", "m_CPropDataComponent")]
	public CPropDataComponent CPropDataComponent => Schema.GetDeclaredClass<CPropDataComponent>(this.Handle, "CBreakableProp", "m_CPropDataComponent");

	// m_OnStartDeath
	[SchemaMember("CBreakableProp", "m_OnStartDeath")]
	public CEntityIOOutput OnStartDeath => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CBreakableProp", "m_OnStartDeath");

	// m_OnBreak
	[SchemaMember("CBreakableProp", "m_OnBreak")]
	public CEntityIOOutput OnBreak => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CBreakableProp", "m_OnBreak");

	// m_OnTakeDamage
	[SchemaMember("CBreakableProp", "m_OnTakeDamage")]
	public CEntityIOOutput OnTakeDamage => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CBreakableProp", "m_OnTakeDamage");

	// m_impactEnergyScale
	[SchemaMember("CBreakableProp", "m_impactEnergyScale")]
	public float ImpactEnergyScale
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_impactEnergyScale"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_impactEnergyScale", value); }
	}

	// m_iMinHealthDmg
	[SchemaMember("CBreakableProp", "m_iMinHealthDmg")]
	public Int32 MinHealthDmg
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CBreakableProp", "m_iMinHealthDmg"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CBreakableProp", "m_iMinHealthDmg", value); }
	}

	// m_preferredCarryAngles
	[SchemaMember("CBreakableProp", "m_preferredCarryAngles")]
	public QAngle PreferredCarryAngles
	{
		get { return Schema.GetValueType<QAngle>(this.Handle, "CBreakableProp", "m_preferredCarryAngles"); }
		set { Schema.SetValueType<QAngle>(this.Handle, "CBreakableProp", "m_preferredCarryAngles", value); }
	}

	// m_flPressureDelay
	[SchemaMember("CBreakableProp", "m_flPressureDelay")]
	public float PressureDelay
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_flPressureDelay"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_flPressureDelay", value); }
	}

	// m_flDefBurstScale
	[SchemaMember("CBreakableProp", "m_flDefBurstScale")]
	public float DefBurstScale
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_flDefBurstScale"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_flDefBurstScale", value); }
	}

	// m_vDefBurstOffset
	[SchemaMember("CBreakableProp", "m_vDefBurstOffset")]
	public Vector3 DefBurstOffset
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CBreakableProp", "m_vDefBurstOffset"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CBreakableProp", "m_vDefBurstOffset", value); }
	}

	// m_hBreaker
	[SchemaMember("CBreakableProp", "m_hBreaker")]
	public CHandle<CBaseEntity> Breaker => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CBreakableProp", "m_hBreaker");

	// m_PerformanceMode
	[SchemaMember("CBreakableProp", "m_PerformanceMode")]
	public PerformanceMode_t PerformanceMode
	{
		get { return Schema.GetValueType<PerformanceMode_t>(this.Handle, "CBreakableProp", "m_PerformanceMode"); }
		set { Schema.SetValueType<PerformanceMode_t>(this.Handle, "CBreakableProp", "m_PerformanceMode", value); }
	}

	// m_flPreventDamageBeforeTime
	[SchemaMember("CBreakableProp", "m_flPreventDamageBeforeTime")]
	public float PreventDamageBeforeTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_flPreventDamageBeforeTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_flPreventDamageBeforeTime", value); }
	}

	// m_BreakableContentsType
	[SchemaMember("CBreakableProp", "m_BreakableContentsType")]
	public BreakableContentsType_t BreakableContentsType
	{
		get { return Schema.GetValueType<BreakableContentsType_t>(this.Handle, "CBreakableProp", "m_BreakableContentsType"); }
		set { Schema.SetValueType<BreakableContentsType_t>(this.Handle, "CBreakableProp", "m_BreakableContentsType", value); }
	}

	// m_strBreakableContentsPropGroupOverride
	[SchemaMember("CBreakableProp", "m_strBreakableContentsPropGroupOverride")]
	public string StrBreakableContentsPropGroupOverride
	{
		get { return Schema.GetUtf8String(this.Handle, "CBreakableProp", "m_strBreakableContentsPropGroupOverride"); }
		set { Schema.SetString(this.Handle, "CBreakableProp", "m_strBreakableContentsPropGroupOverride", value); }
	}

	// m_strBreakableContentsParticleOverride
	[SchemaMember("CBreakableProp", "m_strBreakableContentsParticleOverride")]
	public string StrBreakableContentsParticleOverride
	{
		get { return Schema.GetUtf8String(this.Handle, "CBreakableProp", "m_strBreakableContentsParticleOverride"); }
		set { Schema.SetString(this.Handle, "CBreakableProp", "m_strBreakableContentsParticleOverride", value); }
	}

	// m_bHasBreakPiecesOrCommands
	[SchemaMember("CBreakableProp", "m_bHasBreakPiecesOrCommands")]
	public bool HasBreakPiecesOrCommands
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBreakableProp", "m_bHasBreakPiecesOrCommands"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBreakableProp", "m_bHasBreakPiecesOrCommands", value); }
	}

	// m_explodeDamage
	[SchemaMember("CBreakableProp", "m_explodeDamage")]
	public float ExplodeDamage
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_explodeDamage"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_explodeDamage", value); }
	}

	// m_explodeRadius
	[SchemaMember("CBreakableProp", "m_explodeRadius")]
	public float ExplodeRadius
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_explodeRadius"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_explodeRadius", value); }
	}

	// m_explosionDelay
	[SchemaMember("CBreakableProp", "m_explosionDelay")]
	public float ExplosionDelay
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_explosionDelay"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_explosionDelay", value); }
	}

	// m_explosionBuildupSound
	[SchemaMember("CBreakableProp", "m_explosionBuildupSound")]
	public string ExplosionBuildupSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CBreakableProp", "m_explosionBuildupSound"); }
		set { Schema.SetString(this.Handle, "CBreakableProp", "m_explosionBuildupSound", value); }
	}

	// m_explosionCustomEffect
	[SchemaMember("CBreakableProp", "m_explosionCustomEffect")]
	public string ExplosionCustomEffect
	{
		get { return Schema.GetUtf8String(this.Handle, "CBreakableProp", "m_explosionCustomEffect"); }
		set { Schema.SetString(this.Handle, "CBreakableProp", "m_explosionCustomEffect", value); }
	}

	// m_explosionCustomSound
	[SchemaMember("CBreakableProp", "m_explosionCustomSound")]
	public string ExplosionCustomSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CBreakableProp", "m_explosionCustomSound"); }
		set { Schema.SetString(this.Handle, "CBreakableProp", "m_explosionCustomSound", value); }
	}

	// m_explosionModifier
	[SchemaMember("CBreakableProp", "m_explosionModifier")]
	public string ExplosionModifier
	{
		get { return Schema.GetUtf8String(this.Handle, "CBreakableProp", "m_explosionModifier"); }
		set { Schema.SetString(this.Handle, "CBreakableProp", "m_explosionModifier", value); }
	}

	// m_hPhysicsAttacker
	[SchemaMember("CBreakableProp", "m_hPhysicsAttacker")]
	public CHandle<CBasePlayerPawn> PhysicsAttacker => Schema.GetDeclaredClass<CHandle<CBasePlayerPawn>>(this.Handle, "CBreakableProp", "m_hPhysicsAttacker");

	// m_flLastPhysicsInfluenceTime
	[SchemaMember("CBreakableProp", "m_flLastPhysicsInfluenceTime")]
	public float LastPhysicsInfluenceTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_flLastPhysicsInfluenceTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_flLastPhysicsInfluenceTime", value); }
	}

	// m_flDefaultFadeScale
	[SchemaMember("CBreakableProp", "m_flDefaultFadeScale")]
	public float DefaultFadeScale
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBreakableProp", "m_flDefaultFadeScale"); }
		set { Schema.SetValueType<float>(this.Handle, "CBreakableProp", "m_flDefaultFadeScale", value); }
	}

	// m_hLastAttacker
	[SchemaMember("CBreakableProp", "m_hLastAttacker")]
	public CHandle<CBaseEntity> LastAttacker => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CBreakableProp", "m_hLastAttacker");

	// m_iszPuntSound
	[SchemaMember("CBreakableProp", "m_iszPuntSound")]
	public string PuntSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CBreakableProp", "m_iszPuntSound"); }
		set { Schema.SetString(this.Handle, "CBreakableProp", "m_iszPuntSound", value); }
	}

	// m_bUsePuntSound
	[SchemaMember("CBreakableProp", "m_bUsePuntSound")]
	public bool UsePuntSound
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBreakableProp", "m_bUsePuntSound"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBreakableProp", "m_bUsePuntSound", value); }
	}

	// m_bOriginalBlockLOS
	[SchemaMember("CBreakableProp", "m_bOriginalBlockLOS")]
	public bool OriginalBlockLOS
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBreakableProp", "m_bOriginalBlockLOS"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBreakableProp", "m_bOriginalBlockLOS", value); }
	}

	public void CPropDataComponentPropertyChanged() => Utilities.SetStateChanged(this, "CBreakableProp", "m_CPropDataComponent");
}
