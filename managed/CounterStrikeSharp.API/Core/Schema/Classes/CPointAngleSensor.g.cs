// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPointAngleSensor : CPointEntity
{
    public CPointAngleSensor (IntPtr pointer) : base(pointer) {}

	// m_bDisabled
	[SchemaMember("CPointAngleSensor", "m_bDisabled")]
	public bool Disabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPointAngleSensor", "m_bDisabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPointAngleSensor", "m_bDisabled", value); }
	}

	// m_nLookAtName
	[SchemaMember("CPointAngleSensor", "m_nLookAtName")]
	public string LookAtName
	{
		get { return Schema.GetUtf8String(this.Handle, "CPointAngleSensor", "m_nLookAtName"); }
		set { Schema.SetString(this.Handle, "CPointAngleSensor", "m_nLookAtName", value); }
	}

	// m_hTargetEntity
	[SchemaMember("CPointAngleSensor", "m_hTargetEntity")]
	public CHandle<CBaseEntity> TargetEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPointAngleSensor", "m_hTargetEntity");

	// m_hLookAtEntity
	[SchemaMember("CPointAngleSensor", "m_hLookAtEntity")]
	public CHandle<CBaseEntity> LookAtEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPointAngleSensor", "m_hLookAtEntity");

	// m_flDuration
	[SchemaMember("CPointAngleSensor", "m_flDuration")]
	public float Duration
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPointAngleSensor", "m_flDuration"); }
		set { Schema.SetValueType<float>(this.Handle, "CPointAngleSensor", "m_flDuration", value); }
	}

	// m_flDotTolerance
	[SchemaMember("CPointAngleSensor", "m_flDotTolerance")]
	public float DotTolerance
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPointAngleSensor", "m_flDotTolerance"); }
		set { Schema.SetValueType<float>(this.Handle, "CPointAngleSensor", "m_flDotTolerance", value); }
	}

	// m_flFacingTime
	[SchemaMember("CPointAngleSensor", "m_flFacingTime")]
	public float FacingTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPointAngleSensor", "m_flFacingTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CPointAngleSensor", "m_flFacingTime", value); }
	}

	// m_bFired
	[SchemaMember("CPointAngleSensor", "m_bFired")]
	public bool Fired
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPointAngleSensor", "m_bFired"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPointAngleSensor", "m_bFired", value); }
	}

	// m_OnFacingLookat
	[SchemaMember("CPointAngleSensor", "m_OnFacingLookat")]
	public CEntityIOOutput OnFacingLookat => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPointAngleSensor", "m_OnFacingLookat");

	// m_OnNotFacingLookat
	[SchemaMember("CPointAngleSensor", "m_OnNotFacingLookat")]
	public CEntityIOOutput OnNotFacingLookat => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPointAngleSensor", "m_OnNotFacingLookat");

}
