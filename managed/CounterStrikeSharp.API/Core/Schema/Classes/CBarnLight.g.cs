// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CBarnLight : CBaseModelEntity
{
    public CBarnLight (IntPtr pointer) : base(pointer) {}

	// m_bEnabled
	[SchemaMember("CBarnLight", "m_bEnabled")]
	public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CBarnLight", "m_bEnabled");

	// m_nColorMode
	[SchemaMember("CBarnLight", "m_nColorMode")]
	public ref Int32 ColorMode => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nColorMode");

	// m_Color
	[SchemaMember("CBarnLight", "m_Color")]
	public Color Color
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CBarnLight", "m_Color"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CBarnLight", "m_Color", value); }
	}

	// m_flColorTemperature
	[SchemaMember("CBarnLight", "m_flColorTemperature")]
	public ref float ColorTemperature => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flColorTemperature");

	// m_flBrightness
	[SchemaMember("CBarnLight", "m_flBrightness")]
	public ref float Brightness => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flBrightness");

	// m_flBrightnessScale
	[SchemaMember("CBarnLight", "m_flBrightnessScale")]
	public ref float BrightnessScale => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flBrightnessScale");

	// m_nDirectLight
	[SchemaMember("CBarnLight", "m_nDirectLight")]
	public ref Int32 DirectLight => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nDirectLight");

	// m_nBakedShadowIndex
	[SchemaMember("CBarnLight", "m_nBakedShadowIndex")]
	public ref Int32 BakedShadowIndex => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nBakedShadowIndex");

	// m_nLuminaireShape
	[SchemaMember("CBarnLight", "m_nLuminaireShape")]
	public ref Int32 LuminaireShape => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nLuminaireShape");

	// m_flLuminaireSize
	[SchemaMember("CBarnLight", "m_flLuminaireSize")]
	public ref float LuminaireSize => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flLuminaireSize");

	// m_flLuminaireAnisotropy
	[SchemaMember("CBarnLight", "m_flLuminaireAnisotropy")]
	public ref float LuminaireAnisotropy => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flLuminaireAnisotropy");

	// m_LightStyleString
	[SchemaMember("CBarnLight", "m_LightStyleString")]
	public string LightStyleString
	{
		get { return Schema.GetUtf8String(this.Handle, "CBarnLight", "m_LightStyleString"); }
		set { Schema.SetString(this.Handle, "CBarnLight", "m_LightStyleString", value); }
	}

	// m_flLightStyleStartTime
	[SchemaMember("CBarnLight", "m_flLightStyleStartTime")]
	public ref float LightStyleStartTime => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flLightStyleStartTime");

	// m_QueuedLightStyleStrings
	[SchemaMember("CBarnLight", "m_QueuedLightStyleStrings")]
	public NetworkedVector<string> QueuedLightStyleStrings => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CBarnLight", "m_QueuedLightStyleStrings");

	// m_LightStyleEvents
	[SchemaMember("CBarnLight", "m_LightStyleEvents")]
	public NetworkedVector<string> LightStyleEvents => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CBarnLight", "m_LightStyleEvents");

	// m_LightStyleTargets
	[SchemaMember("CBarnLight", "m_LightStyleTargets")]
	public NetworkedVector<CHandle<CBaseModelEntity>> LightStyleTargets => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseModelEntity>>>(this.Handle, "CBarnLight", "m_LightStyleTargets");

	// m_StyleEvent
	[SchemaMember("CBarnLight", "m_StyleEvent")]
	public Span<CEntityIOOutput> StyleEvent => Schema.GetFixedArray<CEntityIOOutput>(this.Handle, "CBarnLight", "m_StyleEvent", 4);

	// m_hLightCookie
	[SchemaMember("CBarnLight", "m_hLightCookie")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> LightCookie => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CBarnLight", "m_hLightCookie");

	// m_flShape
	[SchemaMember("CBarnLight", "m_flShape")]
	public ref float Shape => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flShape");

	// m_flSoftX
	[SchemaMember("CBarnLight", "m_flSoftX")]
	public ref float SoftX => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flSoftX");

	// m_flSoftY
	[SchemaMember("CBarnLight", "m_flSoftY")]
	public ref float SoftY => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flSoftY");

	// m_flSkirt
	[SchemaMember("CBarnLight", "m_flSkirt")]
	public ref float Skirt => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flSkirt");

	// m_flSkirtNear
	[SchemaMember("CBarnLight", "m_flSkirtNear")]
	public ref float SkirtNear => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flSkirtNear");

	// m_vSizeParams
	[SchemaMember("CBarnLight", "m_vSizeParams")]
	public Vector SizeParams => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vSizeParams");

	// m_flRange
	[SchemaMember("CBarnLight", "m_flRange")]
	public ref float Range => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flRange");

	// m_vShear
	[SchemaMember("CBarnLight", "m_vShear")]
	public Vector Shear => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vShear");

	// m_nBakeSpecularToCubemaps
	[SchemaMember("CBarnLight", "m_nBakeSpecularToCubemaps")]
	public ref Int32 BakeSpecularToCubemaps => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nBakeSpecularToCubemaps");

	// m_vBakeSpecularToCubemapsSize
	[SchemaMember("CBarnLight", "m_vBakeSpecularToCubemapsSize")]
	public Vector BakeSpecularToCubemapsSize => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vBakeSpecularToCubemapsSize");

	// m_nCastShadows
	[SchemaMember("CBarnLight", "m_nCastShadows")]
	public ref Int32 CastShadows => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nCastShadows");

	// m_nShadowMapSize
	[SchemaMember("CBarnLight", "m_nShadowMapSize")]
	public ref Int32 ShadowMapSize => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nShadowMapSize");

	// m_nShadowPriority
	[SchemaMember("CBarnLight", "m_nShadowPriority")]
	public ref Int32 ShadowPriority => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nShadowPriority");

	// m_bContactShadow
	[SchemaMember("CBarnLight", "m_bContactShadow")]
	public ref bool ContactShadow => ref Schema.GetRef<bool>(this.Handle, "CBarnLight", "m_bContactShadow");

	// m_nBounceLight
	[SchemaMember("CBarnLight", "m_nBounceLight")]
	public ref Int32 BounceLight => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nBounceLight");

	// m_flBounceScale
	[SchemaMember("CBarnLight", "m_flBounceScale")]
	public ref float BounceScale => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flBounceScale");

	// m_flMinRoughness
	[SchemaMember("CBarnLight", "m_flMinRoughness")]
	public ref float MinRoughness => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flMinRoughness");

	// m_vAlternateColor
	[SchemaMember("CBarnLight", "m_vAlternateColor")]
	public Vector AlternateColor => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vAlternateColor");

	// m_fAlternateColorBrightness
	[SchemaMember("CBarnLight", "m_fAlternateColorBrightness")]
	public ref float AlternateColorBrightness => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_fAlternateColorBrightness");

	// m_nFog
	[SchemaMember("CBarnLight", "m_nFog")]
	public ref Int32 Fog => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nFog");

	// m_flFogStrength
	[SchemaMember("CBarnLight", "m_flFogStrength")]
	public ref float FogStrength => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flFogStrength");

	// m_nFogShadows
	[SchemaMember("CBarnLight", "m_nFogShadows")]
	public ref Int32 FogShadows => ref Schema.GetRef<Int32>(this.Handle, "CBarnLight", "m_nFogShadows");

	// m_flFogScale
	[SchemaMember("CBarnLight", "m_flFogScale")]
	public ref float FogScale => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flFogScale");

	// m_flFadeSizeStart
	[SchemaMember("CBarnLight", "m_flFadeSizeStart")]
	public ref float FadeSizeStart => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flFadeSizeStart");

	// m_flFadeSizeEnd
	[SchemaMember("CBarnLight", "m_flFadeSizeEnd")]
	public ref float FadeSizeEnd => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flFadeSizeEnd");

	// m_flShadowFadeSizeStart
	[SchemaMember("CBarnLight", "m_flShadowFadeSizeStart")]
	public ref float ShadowFadeSizeStart => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flShadowFadeSizeStart");

	// m_flShadowFadeSizeEnd
	[SchemaMember("CBarnLight", "m_flShadowFadeSizeEnd")]
	public ref float ShadowFadeSizeEnd => ref Schema.GetRef<float>(this.Handle, "CBarnLight", "m_flShadowFadeSizeEnd");

	// m_bPrecomputedFieldsValid
	[SchemaMember("CBarnLight", "m_bPrecomputedFieldsValid")]
	public ref bool PrecomputedFieldsValid => ref Schema.GetRef<bool>(this.Handle, "CBarnLight", "m_bPrecomputedFieldsValid");

	// m_vPrecomputedBoundsMins
	[SchemaMember("CBarnLight", "m_vPrecomputedBoundsMins")]
	public Vector PrecomputedBoundsMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vPrecomputedBoundsMins");

	// m_vPrecomputedBoundsMaxs
	[SchemaMember("CBarnLight", "m_vPrecomputedBoundsMaxs")]
	public Vector PrecomputedBoundsMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vPrecomputedBoundsMaxs");

	// m_vPrecomputedOBBOrigin
	[SchemaMember("CBarnLight", "m_vPrecomputedOBBOrigin")]
	public Vector PrecomputedOBBOrigin => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vPrecomputedOBBOrigin");

	// m_vPrecomputedOBBAngles
	[SchemaMember("CBarnLight", "m_vPrecomputedOBBAngles")]
	public QAngle PrecomputedOBBAngles => Schema.GetDeclaredClass<QAngle>(this.Handle, "CBarnLight", "m_vPrecomputedOBBAngles");

	// m_vPrecomputedOBBExtent
	[SchemaMember("CBarnLight", "m_vPrecomputedOBBExtent")]
	public Vector PrecomputedOBBExtent => Schema.GetDeclaredClass<Vector>(this.Handle, "CBarnLight", "m_vPrecomputedOBBExtent");

	// m_bPvsModifyEntity
	[SchemaMember("CBarnLight", "m_bPvsModifyEntity")]
	public ref bool PvsModifyEntity => ref Schema.GetRef<bool>(this.Handle, "CBarnLight", "m_bPvsModifyEntity");

}
