// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class audioparams_t : NativeObject
{
    public audioparams_t (IntPtr pointer) : base(pointer) {}

	// localSound
	[SchemaMember("audioparams_t", "localSound")]
	public Span<Vector3> LocalSound => Schema.GetFixedArray<Vector3>(this.Handle, "audioparams_t", "localSound", 8);

	// soundscapeIndex
	[SchemaMember("audioparams_t", "soundscapeIndex")]
	public Int32 SoundscapeIndex
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "audioparams_t", "soundscapeIndex"); }
		set { Schema.SetValueType<Int32>(this.Handle, "audioparams_t", "soundscapeIndex", value); }
	}

	// localBits
	[SchemaMember("audioparams_t", "localBits")]
	public byte LocalBits
	{
		get { return Schema.GetValueType<byte>(this.Handle, "audioparams_t", "localBits"); }
		set { Schema.SetValueType<byte>(this.Handle, "audioparams_t", "localBits", value); }
	}

	// soundscapeEntityListIndex
	[SchemaMember("audioparams_t", "soundscapeEntityListIndex")]
	public Int32 SoundscapeEntityListIndex
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "audioparams_t", "soundscapeEntityListIndex"); }
		set { Schema.SetValueType<Int32>(this.Handle, "audioparams_t", "soundscapeEntityListIndex", value); }
	}

	// soundEventHash
	[SchemaMember("audioparams_t", "soundEventHash")]
	public UInt32 SoundEventHash
	{
		get { return Schema.GetValueType<UInt32>(this.Handle, "audioparams_t", "soundEventHash"); }
		set { Schema.SetValueType<UInt32>(this.Handle, "audioparams_t", "soundEventHash", value); }
	}

	public void LocalSoundPropertyChanged() => Utilities.SetStateChanged(this, "audioparams_t", "localSound");
	public void SoundscapeIndexPropertyChanged() => Utilities.SetStateChanged(this, "audioparams_t", "soundscapeIndex");
	public void LocalBitsPropertyChanged() => Utilities.SetStateChanged(this, "audioparams_t", "localBits");
	public void SoundscapeEntityListIndexPropertyChanged() => Utilities.SetStateChanged(this, "audioparams_t", "soundscapeEntityListIndex");
	public void SoundEventHashPropertyChanged() => Utilities.SetStateChanged(this, "audioparams_t", "soundEventHash");
}
