// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPhysSlideConstraint : CPhysConstraint
{
    public CPhysSlideConstraint (IntPtr pointer) : base(pointer) {}

	// m_axisEnd
	[SchemaMember("CPhysSlideConstraint", "m_axisEnd")]
	public Vector3 AxisEnd
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CPhysSlideConstraint", "m_axisEnd"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CPhysSlideConstraint", "m_axisEnd", value); }
	}

	// m_slideFriction
	[SchemaMember("CPhysSlideConstraint", "m_slideFriction")]
	public float SlideFriction
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_slideFriction"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_slideFriction", value); }
	}

	// m_systemLoadScale
	[SchemaMember("CPhysSlideConstraint", "m_systemLoadScale")]
	public float SystemLoadScale
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_systemLoadScale"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_systemLoadScale", value); }
	}

	// m_initialOffset
	[SchemaMember("CPhysSlideConstraint", "m_initialOffset")]
	public float InitialOffset
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_initialOffset"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_initialOffset", value); }
	}

	// m_bEnableLinearConstraint
	[SchemaMember("CPhysSlideConstraint", "m_bEnableLinearConstraint")]
	public bool EnableLinearConstraint
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPhysSlideConstraint", "m_bEnableLinearConstraint"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPhysSlideConstraint", "m_bEnableLinearConstraint", value); }
	}

	// m_bEnableAngularConstraint
	[SchemaMember("CPhysSlideConstraint", "m_bEnableAngularConstraint")]
	public bool EnableAngularConstraint
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPhysSlideConstraint", "m_bEnableAngularConstraint"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPhysSlideConstraint", "m_bEnableAngularConstraint", value); }
	}

	// m_flMotorFrequency
	[SchemaMember("CPhysSlideConstraint", "m_flMotorFrequency")]
	public float MotorFrequency
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_flMotorFrequency"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_flMotorFrequency", value); }
	}

	// m_flMotorDampingRatio
	[SchemaMember("CPhysSlideConstraint", "m_flMotorDampingRatio")]
	public float MotorDampingRatio
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_flMotorDampingRatio"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysSlideConstraint", "m_flMotorDampingRatio", value); }
	}

	// m_bUseEntityPivot
	[SchemaMember("CPhysSlideConstraint", "m_bUseEntityPivot")]
	public bool UseEntityPivot
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPhysSlideConstraint", "m_bUseEntityPivot"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPhysSlideConstraint", "m_bUseEntityPivot", value); }
	}

	// m_soundInfo
	[SchemaMember("CPhysSlideConstraint", "m_soundInfo")]
	public ConstraintSoundInfo SoundInfo => Schema.GetDeclaredClass<ConstraintSoundInfo>(this.Handle, "CPhysSlideConstraint", "m_soundInfo");

}
