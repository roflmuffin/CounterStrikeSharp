// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CBaseCSGrenade : CCSWeaponBase
{
    public CBaseCSGrenade (IntPtr pointer) : base(pointer) {}

	// m_bRedraw
	[SchemaMember("CBaseCSGrenade", "m_bRedraw")]
	public bool Redraw
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bRedraw"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bRedraw", value); }
	}

	// m_bIsHeldByPlayer
	[SchemaMember("CBaseCSGrenade", "m_bIsHeldByPlayer")]
	public bool IsHeldByPlayer
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bIsHeldByPlayer"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bIsHeldByPlayer", value); }
	}

	// m_bPinPulled
	[SchemaMember("CBaseCSGrenade", "m_bPinPulled")]
	public bool PinPulled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bPinPulled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bPinPulled", value); }
	}

	// m_bJumpThrow
	[SchemaMember("CBaseCSGrenade", "m_bJumpThrow")]
	public bool JumpThrow
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bJumpThrow"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bJumpThrow", value); }
	}

	// m_bThrowAnimating
	[SchemaMember("CBaseCSGrenade", "m_bThrowAnimating")]
	public bool ThrowAnimating
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bThrowAnimating"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bThrowAnimating", value); }
	}

	// m_fThrowTime
	[SchemaMember("CBaseCSGrenade", "m_fThrowTime")]
	public float ThrowTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseCSGrenade", "m_fThrowTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseCSGrenade", "m_fThrowTime", value); }
	}

	// m_flThrowStrength
	[SchemaMember("CBaseCSGrenade", "m_flThrowStrength")]
	public float ThrowStrength
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseCSGrenade", "m_flThrowStrength"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseCSGrenade", "m_flThrowStrength", value); }
	}

	// m_fDropTime
	[SchemaMember("CBaseCSGrenade", "m_fDropTime")]
	public float DropTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseCSGrenade", "m_fDropTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseCSGrenade", "m_fDropTime", value); }
	}

	// m_fPinPullTime
	[SchemaMember("CBaseCSGrenade", "m_fPinPullTime")]
	public float PinPullTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseCSGrenade", "m_fPinPullTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseCSGrenade", "m_fPinPullTime", value); }
	}

	// m_bJustPulledPin
	[SchemaMember("CBaseCSGrenade", "m_bJustPulledPin")]
	public bool JustPulledPin
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bJustPulledPin"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseCSGrenade", "m_bJustPulledPin", value); }
	}

	// m_nNextHoldTick
	[SchemaMember("CBaseCSGrenade", "m_nNextHoldTick")]
	public Int32 NextHoldTick
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CBaseCSGrenade", "m_nNextHoldTick"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CBaseCSGrenade", "m_nNextHoldTick", value); }
	}

	// m_flNextHoldFrac
	[SchemaMember("CBaseCSGrenade", "m_flNextHoldFrac")]
	public float NextHoldFrac
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseCSGrenade", "m_flNextHoldFrac"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseCSGrenade", "m_flNextHoldFrac", value); }
	}

	// m_hSwitchToWeaponAfterThrow
	[SchemaMember("CBaseCSGrenade", "m_hSwitchToWeaponAfterThrow")]
	public CHandle<CCSWeaponBase> SwitchToWeaponAfterThrow => Schema.GetDeclaredClass<CHandle<CCSWeaponBase>>(this.Handle, "CBaseCSGrenade", "m_hSwitchToWeaponAfterThrow");

	public void RedrawPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_bRedraw");
	public void IsHeldByPlayerPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_bIsHeldByPlayer");
	public void PinPulledPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_bPinPulled");
	public void JumpThrowPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_bJumpThrow");
	public void ThrowAnimatingPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_bThrowAnimating");
	public void ThrowTimePropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_fThrowTime");
	public void ThrowStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_flThrowStrength");
	public void DropTimePropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_fDropTime");
	public void PinPullTimePropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_fPinPullTime");
	public void JustPulledPinPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_bJustPulledPin");
	public void NextHoldTickPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_nNextHoldTick");
	public void NextHoldFracPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_flNextHoldFrac");
	public void SwitchToWeaponAfterThrowPropertyChanged() => Utilities.SetStateChanged(this, "CBaseCSGrenade", "m_hSwitchToWeaponAfterThrow");
}
