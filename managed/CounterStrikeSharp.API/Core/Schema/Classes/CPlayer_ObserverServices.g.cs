// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPlayer_ObserverServices : CPlayerPawnComponent
{
    public CPlayer_ObserverServices (IntPtr pointer) : base(pointer) {}

	// m_iObserverMode
	[SchemaMember("CPlayer_ObserverServices", "m_iObserverMode")]
	public byte ObserverMode
	{
		get { return Schema.GetValueType<byte>(this.Handle, "CPlayer_ObserverServices", "m_iObserverMode"); }
		set { Schema.SetValueType<byte>(this.Handle, "CPlayer_ObserverServices", "m_iObserverMode", value); }
	}

	// m_hObserverTarget
	[SchemaMember("CPlayer_ObserverServices", "m_hObserverTarget")]
	public CHandle<CBaseEntity> ObserverTarget => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPlayer_ObserverServices", "m_hObserverTarget");

	// m_iObserverLastMode
	[SchemaMember("CPlayer_ObserverServices", "m_iObserverLastMode")]
	public ObserverMode_t ObserverLastMode
	{
		get { return Schema.GetValueType<ObserverMode_t>(this.Handle, "CPlayer_ObserverServices", "m_iObserverLastMode"); }
		set { Schema.SetValueType<ObserverMode_t>(this.Handle, "CPlayer_ObserverServices", "m_iObserverLastMode", value); }
	}

	// m_bForcedObserverMode
	[SchemaMember("CPlayer_ObserverServices", "m_bForcedObserverMode")]
	public bool ForcedObserverMode
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPlayer_ObserverServices", "m_bForcedObserverMode"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPlayer_ObserverServices", "m_bForcedObserverMode", value); }
	}

	public void ObserverModePropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_ObserverServices", "m_iObserverMode");
	public void ObserverTargetPropertyChanged() => Utilities.SetStateChanged(this, "CPlayer_ObserverServices", "m_hObserverTarget");
}
