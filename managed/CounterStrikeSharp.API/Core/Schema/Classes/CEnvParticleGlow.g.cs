// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CEnvParticleGlow : CParticleSystem
{
    public CEnvParticleGlow (IntPtr pointer) : base(pointer) {}

	// m_flAlphaScale
	[SchemaMember("CEnvParticleGlow", "m_flAlphaScale")]
	public float AlphaScale
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvParticleGlow", "m_flAlphaScale"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvParticleGlow", "m_flAlphaScale", value); }
	}

	// m_flRadiusScale
	[SchemaMember("CEnvParticleGlow", "m_flRadiusScale")]
	public float RadiusScale
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvParticleGlow", "m_flRadiusScale"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvParticleGlow", "m_flRadiusScale", value); }
	}

	// m_flSelfIllumScale
	[SchemaMember("CEnvParticleGlow", "m_flSelfIllumScale")]
	public float SelfIllumScale
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvParticleGlow", "m_flSelfIllumScale"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvParticleGlow", "m_flSelfIllumScale", value); }
	}

	// m_ColorTint
	[SchemaMember("CEnvParticleGlow", "m_ColorTint")]
	public Color ColorTint
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CEnvParticleGlow", "m_ColorTint"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CEnvParticleGlow", "m_ColorTint", value); }
	}

	// m_hTextureOverride
	[SchemaMember("CEnvParticleGlow", "m_hTextureOverride")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> TextureOverride => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvParticleGlow", "m_hTextureOverride");

	public void AlphaScalePropertyChanged() => Utilities.SetStateChanged(this, "CEnvParticleGlow", "m_flAlphaScale");
	public void RadiusScalePropertyChanged() => Utilities.SetStateChanged(this, "CEnvParticleGlow", "m_flRadiusScale");
	public void SelfIllumScalePropertyChanged() => Utilities.SetStateChanged(this, "CEnvParticleGlow", "m_flSelfIllumScale");
	public void ColorTintPropertyChanged() => Utilities.SetStateChanged(this, "CEnvParticleGlow", "m_ColorTint");
	public void TextureOverridePropertyChanged() => Utilities.SetStateChanged(this, "CEnvParticleGlow", "m_hTextureOverride");
}
