// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class lerpdata_t : NativeObject
{
    public lerpdata_t (IntPtr pointer) : base(pointer) {}

	// m_hEnt
	[SchemaMember("lerpdata_t", "m_hEnt")]
	public CHandle<CBaseEntity> Ent => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "lerpdata_t", "m_hEnt");

	// m_MoveType
	[SchemaMember("lerpdata_t", "m_MoveType")]
	public MoveType_t MoveType
	{
		get { return Schema.GetValueType<MoveType_t>(this.Handle, "lerpdata_t", "m_MoveType"); }
		set { Schema.SetValueType<MoveType_t>(this.Handle, "lerpdata_t", "m_MoveType", value); }
	}

	// m_flStartTime
	[SchemaMember("lerpdata_t", "m_flStartTime")]
	public float StartTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "lerpdata_t", "m_flStartTime"); }
		set { Schema.SetValueType<float>(this.Handle, "lerpdata_t", "m_flStartTime", value); }
	}

	// m_vecStartOrigin
	[SchemaMember("lerpdata_t", "m_vecStartOrigin")]
	public Vector3 StartOrigin
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "lerpdata_t", "m_vecStartOrigin"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "lerpdata_t", "m_vecStartOrigin", value); }
	}

	// m_qStartRot
	[SchemaMember("lerpdata_t", "m_qStartRot")]
	public Quaternion StartRot
	{
		get { return Schema.GetValueType<Quaternion>(this.Handle, "lerpdata_t", "m_qStartRot"); }
		set { Schema.SetValueType<Quaternion>(this.Handle, "lerpdata_t", "m_qStartRot", value); }
	}

	// m_nFXIndex
	[SchemaMember("lerpdata_t", "m_nFXIndex")]
	public ParticleIndex_t FXIndex => Schema.GetDeclaredClass<ParticleIndex_t>(this.Handle, "lerpdata_t", "m_nFXIndex");

}
