// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class DecalGroupOption_t : NativeObject
{
    public DecalGroupOption_t (IntPtr pointer) : base(pointer) {}

	// m_hMaterial
	[SchemaMember("DecalGroupOption_t", "m_hMaterial")]
	public CStrongHandleCopyable<InfoForResourceTypeIMaterial2> Material => Schema.GetDeclaredClass<CStrongHandleCopyable<InfoForResourceTypeIMaterial2>>(this.Handle, "DecalGroupOption_t", "m_hMaterial");

	// m_sSequenceName
	[SchemaMember("DecalGroupOption_t", "m_sSequenceName")]
	public string SequenceName
	{
		get { return Schema.GetUtf8String(this.Handle, "DecalGroupOption_t", "m_sSequenceName"); }
		set { Schema.SetString(this.Handle, "DecalGroupOption_t", "m_sSequenceName", value); }
	}

	// m_flProbability
	[SchemaMember("DecalGroupOption_t", "m_flProbability")]
	public float Probability
	{
		get { return Schema.GetValueType<float>(this.Handle, "DecalGroupOption_t", "m_flProbability"); }
		set { Schema.SetValueType<float>(this.Handle, "DecalGroupOption_t", "m_flProbability", value); }
	}

	// m_bEnableAngleBetweenNormalAndGravityRange
	[SchemaMember("DecalGroupOption_t", "m_bEnableAngleBetweenNormalAndGravityRange")]
	public bool EnableAngleBetweenNormalAndGravityRange
	{
		get { return Schema.GetValueType<bool>(this.Handle, "DecalGroupOption_t", "m_bEnableAngleBetweenNormalAndGravityRange"); }
		set { Schema.SetValueType<bool>(this.Handle, "DecalGroupOption_t", "m_bEnableAngleBetweenNormalAndGravityRange", value); }
	}

	// m_flMinAngleBetweenNormalAndGravity
	[SchemaMember("DecalGroupOption_t", "m_flMinAngleBetweenNormalAndGravity")]
	public float MinAngleBetweenNormalAndGravity
	{
		get { return Schema.GetValueType<float>(this.Handle, "DecalGroupOption_t", "m_flMinAngleBetweenNormalAndGravity"); }
		set { Schema.SetValueType<float>(this.Handle, "DecalGroupOption_t", "m_flMinAngleBetweenNormalAndGravity", value); }
	}

	// m_flMaxAngleBetweenNormalAndGravity
	[SchemaMember("DecalGroupOption_t", "m_flMaxAngleBetweenNormalAndGravity")]
	public float MaxAngleBetweenNormalAndGravity
	{
		get { return Schema.GetValueType<float>(this.Handle, "DecalGroupOption_t", "m_flMaxAngleBetweenNormalAndGravity"); }
		set { Schema.SetValueType<float>(this.Handle, "DecalGroupOption_t", "m_flMaxAngleBetweenNormalAndGravity", value); }
	}

}
