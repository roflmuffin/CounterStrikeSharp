// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPointAngularVelocitySensor : CPointEntity
{
    public CPointAngularVelocitySensor (IntPtr pointer) : base(pointer) {}

	// m_hTargetEntity
	[SchemaMember("CPointAngularVelocitySensor", "m_hTargetEntity")]
	public CHandle<CBaseEntity> TargetEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPointAngularVelocitySensor", "m_hTargetEntity");

	// m_flThreshold
	[SchemaMember("CPointAngularVelocitySensor", "m_flThreshold")]
	public float Threshold
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPointAngularVelocitySensor", "m_flThreshold"); }
		set { Schema.SetValueType<float>(this.Handle, "CPointAngularVelocitySensor", "m_flThreshold", value); }
	}

	// m_nLastCompareResult
	[SchemaMember("CPointAngularVelocitySensor", "m_nLastCompareResult")]
	public Int32 LastCompareResult
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CPointAngularVelocitySensor", "m_nLastCompareResult"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CPointAngularVelocitySensor", "m_nLastCompareResult", value); }
	}

	// m_nLastFireResult
	[SchemaMember("CPointAngularVelocitySensor", "m_nLastFireResult")]
	public Int32 LastFireResult
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CPointAngularVelocitySensor", "m_nLastFireResult"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CPointAngularVelocitySensor", "m_nLastFireResult", value); }
	}

	// m_flFireTime
	[SchemaMember("CPointAngularVelocitySensor", "m_flFireTime")]
	public float FireTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPointAngularVelocitySensor", "m_flFireTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CPointAngularVelocitySensor", "m_flFireTime", value); }
	}

	// m_flFireInterval
	[SchemaMember("CPointAngularVelocitySensor", "m_flFireInterval")]
	public float FireInterval
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPointAngularVelocitySensor", "m_flFireInterval"); }
		set { Schema.SetValueType<float>(this.Handle, "CPointAngularVelocitySensor", "m_flFireInterval", value); }
	}

	// m_flLastAngVelocity
	[SchemaMember("CPointAngularVelocitySensor", "m_flLastAngVelocity")]
	public float LastAngVelocity
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPointAngularVelocitySensor", "m_flLastAngVelocity"); }
		set { Schema.SetValueType<float>(this.Handle, "CPointAngularVelocitySensor", "m_flLastAngVelocity", value); }
	}

	// m_lastOrientation
	[SchemaMember("CPointAngularVelocitySensor", "m_lastOrientation")]
	public QAngle LastOrientation
	{
		get { return Schema.GetValueType<QAngle>(this.Handle, "CPointAngularVelocitySensor", "m_lastOrientation"); }
		set { Schema.SetValueType<QAngle>(this.Handle, "CPointAngularVelocitySensor", "m_lastOrientation", value); }
	}

	// m_vecAxis
	[SchemaMember("CPointAngularVelocitySensor", "m_vecAxis")]
	public Vector3 Axis
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CPointAngularVelocitySensor", "m_vecAxis"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CPointAngularVelocitySensor", "m_vecAxis", value); }
	}

	// m_bUseHelper
	[SchemaMember("CPointAngularVelocitySensor", "m_bUseHelper")]
	public bool UseHelper
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPointAngularVelocitySensor", "m_bUseHelper"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPointAngularVelocitySensor", "m_bUseHelper", value); }
	}

	// m_OnLessThan
	[SchemaMember("CPointAngularVelocitySensor", "m_OnLessThan")]
	public CEntityIOOutput OnLessThan => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPointAngularVelocitySensor", "m_OnLessThan");

	// m_OnLessThanOrEqualTo
	[SchemaMember("CPointAngularVelocitySensor", "m_OnLessThanOrEqualTo")]
	public CEntityIOOutput OnLessThanOrEqualTo => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPointAngularVelocitySensor", "m_OnLessThanOrEqualTo");

	// m_OnGreaterThan
	[SchemaMember("CPointAngularVelocitySensor", "m_OnGreaterThan")]
	public CEntityIOOutput OnGreaterThan => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPointAngularVelocitySensor", "m_OnGreaterThan");

	// m_OnGreaterThanOrEqualTo
	[SchemaMember("CPointAngularVelocitySensor", "m_OnGreaterThanOrEqualTo")]
	public CEntityIOOutput OnGreaterThanOrEqualTo => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPointAngularVelocitySensor", "m_OnGreaterThanOrEqualTo");

	// m_OnEqualTo
	[SchemaMember("CPointAngularVelocitySensor", "m_OnEqualTo")]
	public CEntityIOOutput OnEqualTo => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPointAngularVelocitySensor", "m_OnEqualTo");

}
