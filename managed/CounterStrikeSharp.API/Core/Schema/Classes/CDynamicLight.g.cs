// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CDynamicLight : CBaseModelEntity
{
    public CDynamicLight (IntPtr pointer) : base(pointer) {}

	// m_ActualFlags
	[SchemaMember("CDynamicLight", "m_ActualFlags")]
	public byte ActualFlags
	{
		get { return Schema.GetValueType<byte>(this.Handle, "CDynamicLight", "m_ActualFlags"); }
		set { Schema.SetValueType<byte>(this.Handle, "CDynamicLight", "m_ActualFlags", value); }
	}

	// m_Flags
	[SchemaMember("CDynamicLight", "m_Flags")]
	public byte DynamicLightFlags
	{
		get { return Schema.GetValueType<byte>(this.Handle, "CDynamicLight", "m_Flags"); }
		set { Schema.SetValueType<byte>(this.Handle, "CDynamicLight", "m_Flags", value); }
	}

	// m_LightStyle
	[SchemaMember("CDynamicLight", "m_LightStyle")]
	public byte LightStyle
	{
		get { return Schema.GetValueType<byte>(this.Handle, "CDynamicLight", "m_LightStyle"); }
		set { Schema.SetValueType<byte>(this.Handle, "CDynamicLight", "m_LightStyle", value); }
	}

	// m_On
	[SchemaMember("CDynamicLight", "m_On")]
	public bool On
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CDynamicLight", "m_On"); }
		set { Schema.SetValueType<bool>(this.Handle, "CDynamicLight", "m_On", value); }
	}

	// m_Radius
	[SchemaMember("CDynamicLight", "m_Radius")]
	public float Radius
	{
		get { return Schema.GetValueType<float>(this.Handle, "CDynamicLight", "m_Radius"); }
		set { Schema.SetValueType<float>(this.Handle, "CDynamicLight", "m_Radius", value); }
	}

	// m_Exponent
	[SchemaMember("CDynamicLight", "m_Exponent")]
	public Int32 Exponent
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CDynamicLight", "m_Exponent"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CDynamicLight", "m_Exponent", value); }
	}

	// m_InnerAngle
	[SchemaMember("CDynamicLight", "m_InnerAngle")]
	public float InnerAngle
	{
		get { return Schema.GetValueType<float>(this.Handle, "CDynamicLight", "m_InnerAngle"); }
		set { Schema.SetValueType<float>(this.Handle, "CDynamicLight", "m_InnerAngle", value); }
	}

	// m_OuterAngle
	[SchemaMember("CDynamicLight", "m_OuterAngle")]
	public float OuterAngle
	{
		get { return Schema.GetValueType<float>(this.Handle, "CDynamicLight", "m_OuterAngle"); }
		set { Schema.SetValueType<float>(this.Handle, "CDynamicLight", "m_OuterAngle", value); }
	}

	// m_SpotRadius
	[SchemaMember("CDynamicLight", "m_SpotRadius")]
	public float SpotRadius
	{
		get { return Schema.GetValueType<float>(this.Handle, "CDynamicLight", "m_SpotRadius"); }
		set { Schema.SetValueType<float>(this.Handle, "CDynamicLight", "m_SpotRadius", value); }
	}

	public void DynamicLightFlagsPropertyChanged() => Utilities.SetStateChanged(this, "CDynamicLight", "m_Flags");
	public void LightStylePropertyChanged() => Utilities.SetStateChanged(this, "CDynamicLight", "m_LightStyle");
	public void RadiusPropertyChanged() => Utilities.SetStateChanged(this, "CDynamicLight", "m_Radius");
	public void ExponentPropertyChanged() => Utilities.SetStateChanged(this, "CDynamicLight", "m_Exponent");
	public void InnerAnglePropertyChanged() => Utilities.SetStateChanged(this, "CDynamicLight", "m_InnerAngle");
	public void OuterAnglePropertyChanged() => Utilities.SetStateChanged(this, "CDynamicLight", "m_OuterAngle");
	public void SpotRadiusPropertyChanged() => Utilities.SetStateChanged(this, "CDynamicLight", "m_SpotRadius");
}
