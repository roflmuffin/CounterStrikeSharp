// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CFuncRotator : CBaseModelEntity
{
    public CFuncRotator (IntPtr pointer) : base(pointer) {}

	// m_hRotatorTarget
	[SchemaMember("CFuncRotator", "m_hRotatorTarget")]
	public CHandle<CBaseEntity> RotatorTarget => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CFuncRotator", "m_hRotatorTarget");

	// m_bIsRotating
	[SchemaMember("CFuncRotator", "m_bIsRotating")]
	public bool IsRotating
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncRotator", "m_bIsRotating"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncRotator", "m_bIsRotating", value); }
	}

	// m_bIsReversing
	[SchemaMember("CFuncRotator", "m_bIsReversing")]
	public bool IsReversing
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncRotator", "m_bIsReversing"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncRotator", "m_bIsReversing", value); }
	}

	// m_flTimeToReachMaxSpeed
	[SchemaMember("CFuncRotator", "m_flTimeToReachMaxSpeed")]
	public float TimeToReachMaxSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncRotator", "m_flTimeToReachMaxSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncRotator", "m_flTimeToReachMaxSpeed", value); }
	}

	// m_flTimeToReachZeroSpeed
	[SchemaMember("CFuncRotator", "m_flTimeToReachZeroSpeed")]
	public float TimeToReachZeroSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncRotator", "m_flTimeToReachZeroSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncRotator", "m_flTimeToReachZeroSpeed", value); }
	}

	// m_flDistanceAlongArcTraveled
	[SchemaMember("CFuncRotator", "m_flDistanceAlongArcTraveled")]
	public float DistanceAlongArcTraveled
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncRotator", "m_flDistanceAlongArcTraveled"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncRotator", "m_flDistanceAlongArcTraveled", value); }
	}

	// m_flTimeToWaitOscillate
	[SchemaMember("CFuncRotator", "m_flTimeToWaitOscillate")]
	public float TimeToWaitOscillate
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncRotator", "m_flTimeToWaitOscillate"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncRotator", "m_flTimeToWaitOscillate", value); }
	}

	// m_flTimeRotationStart
	[SchemaMember("CFuncRotator", "m_flTimeRotationStart")]
	public float TimeRotationStart
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncRotator", "m_flTimeRotationStart"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncRotator", "m_flTimeRotationStart", value); }
	}

	// m_qLSPrevChange
	[SchemaMember("CFuncRotator", "m_qLSPrevChange")]
	public Quaternion LSPrevChange
	{
		get { return Schema.GetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qLSPrevChange"); }
		set { Schema.SetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qLSPrevChange", value); }
	}

	// m_qWSPrev
	[SchemaMember("CFuncRotator", "m_qWSPrev")]
	public Quaternion WSPrev
	{
		get { return Schema.GetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qWSPrev"); }
		set { Schema.SetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qWSPrev", value); }
	}

	// m_qWSInit
	[SchemaMember("CFuncRotator", "m_qWSInit")]
	public Quaternion WSInit
	{
		get { return Schema.GetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qWSInit"); }
		set { Schema.SetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qWSInit", value); }
	}

	// m_qLSInit
	[SchemaMember("CFuncRotator", "m_qLSInit")]
	public Quaternion LSInit
	{
		get { return Schema.GetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qLSInit"); }
		set { Schema.SetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qLSInit", value); }
	}

	// m_qLSOrientation
	[SchemaMember("CFuncRotator", "m_qLSOrientation")]
	public Quaternion LSOrientation
	{
		get { return Schema.GetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qLSOrientation"); }
		set { Schema.SetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qLSOrientation", value); }
	}

	// m_OnRotationStarted
	[SchemaMember("CFuncRotator", "m_OnRotationStarted")]
	public CEntityIOOutput OnRotationStarted => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncRotator", "m_OnRotationStarted");

	// m_OnRotationCompleted
	[SchemaMember("CFuncRotator", "m_OnRotationCompleted")]
	public CEntityIOOutput OnRotationCompleted => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncRotator", "m_OnRotationCompleted");

	// m_OnOscillate
	[SchemaMember("CFuncRotator", "m_OnOscillate")]
	public CEntityIOOutput OnOscillate => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncRotator", "m_OnOscillate");

	// m_OnOscillateStartArrive
	[SchemaMember("CFuncRotator", "m_OnOscillateStartArrive")]
	public CEntityIOOutput OnOscillateStartArrive => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncRotator", "m_OnOscillateStartArrive");

	// m_OnOscillateStartDepart
	[SchemaMember("CFuncRotator", "m_OnOscillateStartDepart")]
	public CEntityIOOutput OnOscillateStartDepart => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncRotator", "m_OnOscillateStartDepart");

	// m_OnOscillateEndArrive
	[SchemaMember("CFuncRotator", "m_OnOscillateEndArrive")]
	public CEntityIOOutput OnOscillateEndArrive => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncRotator", "m_OnOscillateEndArrive");

	// m_OnOscillateEndDepart
	[SchemaMember("CFuncRotator", "m_OnOscillateEndDepart")]
	public CEntityIOOutput OnOscillateEndDepart => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncRotator", "m_OnOscillateEndDepart");

	// m_bOscillateDepart
	[SchemaMember("CFuncRotator", "m_bOscillateDepart")]
	public bool OscillateDepart
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncRotator", "m_bOscillateDepart"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncRotator", "m_bOscillateDepart", value); }
	}

	// m_nOscillateCount
	[SchemaMember("CFuncRotator", "m_nOscillateCount")]
	public Int32 OscillateCount
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CFuncRotator", "m_nOscillateCount"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CFuncRotator", "m_nOscillateCount", value); }
	}

	// m_eRotateType
	[SchemaMember("CFuncRotator", "m_eRotateType")]
	public CFuncRotatorRotate_t RotateType
	{
		get { return Schema.GetValueType<CFuncRotatorRotate_t>(this.Handle, "CFuncRotator", "m_eRotateType"); }
		set { Schema.SetValueType<CFuncRotatorRotate_t>(this.Handle, "CFuncRotator", "m_eRotateType", value); }
	}

	// m_ePrevRotateType
	[SchemaMember("CFuncRotator", "m_ePrevRotateType")]
	public CFuncRotatorRotate_t PrevRotateType
	{
		get { return Schema.GetValueType<CFuncRotatorRotate_t>(this.Handle, "CFuncRotator", "m_ePrevRotateType"); }
		set { Schema.SetValueType<CFuncRotatorRotate_t>(this.Handle, "CFuncRotator", "m_ePrevRotateType", value); }
	}

	// m_bHasTargetOverride
	[SchemaMember("CFuncRotator", "m_bHasTargetOverride")]
	public bool HasTargetOverride
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncRotator", "m_bHasTargetOverride"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncRotator", "m_bHasTargetOverride", value); }
	}

	// m_qOrientationOverride
	[SchemaMember("CFuncRotator", "m_qOrientationOverride")]
	public Quaternion OrientationOverride
	{
		get { return Schema.GetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qOrientationOverride"); }
		set { Schema.SetValueType<Quaternion>(this.Handle, "CFuncRotator", "m_qOrientationOverride", value); }
	}

	// m_eSpaceOverride
	[SchemaMember("CFuncRotator", "m_eSpaceOverride")]
	public RotatorTargetSpace_t SpaceOverride
	{
		get { return Schema.GetValueType<RotatorTargetSpace_t>(this.Handle, "CFuncRotator", "m_eSpaceOverride"); }
		set { Schema.SetValueType<RotatorTargetSpace_t>(this.Handle, "CFuncRotator", "m_eSpaceOverride", value); }
	}

	// m_qAngularVelocity
	[SchemaMember("CFuncRotator", "m_qAngularVelocity")]
	public QAngle AngularVelocity
	{
		get { return Schema.GetValueType<QAngle>(this.Handle, "CFuncRotator", "m_qAngularVelocity"); }
		set { Schema.SetValueType<QAngle>(this.Handle, "CFuncRotator", "m_qAngularVelocity", value); }
	}

	// m_vLookAtForcedUp
	[SchemaMember("CFuncRotator", "m_vLookAtForcedUp")]
	public Vector3 LookAtForcedUp
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CFuncRotator", "m_vLookAtForcedUp"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CFuncRotator", "m_vLookAtForcedUp", value); }
	}

	// m_strRotatorTarget
	[SchemaMember("CFuncRotator", "m_strRotatorTarget")]
	public string StrRotatorTarget
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncRotator", "m_strRotatorTarget"); }
		set { Schema.SetString(this.Handle, "CFuncRotator", "m_strRotatorTarget", value); }
	}

	// m_bRecordHistory
	[SchemaMember("CFuncRotator", "m_bRecordHistory")]
	public bool RecordHistory
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncRotator", "m_bRecordHistory"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncRotator", "m_bRecordHistory", value); }
	}

	// m_vecRotatorHistory
	[SchemaMember("CFuncRotator", "m_vecRotatorHistory")]
	public NetworkedVector<RotatorHistoryEntry_t> RotatorHistory => Schema.GetDeclaredClass<NetworkedVector<RotatorHistoryEntry_t>>(this.Handle, "CFuncRotator", "m_vecRotatorHistory");

	// m_bReturningToPreviousOrientation
	[SchemaMember("CFuncRotator", "m_bReturningToPreviousOrientation")]
	public bool ReturningToPreviousOrientation
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncRotator", "m_bReturningToPreviousOrientation"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncRotator", "m_bReturningToPreviousOrientation", value); }
	}

	// m_vecRotatorQueue
	[SchemaMember("CFuncRotator", "m_vecRotatorQueue")]
	public NetworkedVector<RotatorQueueEntry_t> RotatorQueue => Schema.GetDeclaredClass<NetworkedVector<RotatorQueueEntry_t>>(this.Handle, "CFuncRotator", "m_vecRotatorQueue");

	// m_vecRotatorQueueHistory
	[SchemaMember("CFuncRotator", "m_vecRotatorQueueHistory")]
	public NetworkedVector<RotatorHistoryEntry_t> RotatorQueueHistory => Schema.GetDeclaredClass<NetworkedVector<RotatorHistoryEntry_t>>(this.Handle, "CFuncRotator", "m_vecRotatorQueueHistory");

}
