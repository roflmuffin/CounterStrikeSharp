// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPhysBox : CBreakable
{
    public CPhysBox (IntPtr pointer) : base(pointer) {}

	// m_damageType
	[SchemaMember("CPhysBox", "m_damageType")]
	public Int32 DamageType
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CPhysBox", "m_damageType"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CPhysBox", "m_damageType", value); }
	}

	// m_damageToEnableMotion
	[SchemaMember("CPhysBox", "m_damageToEnableMotion")]
	public Int32 DamageToEnableMotion
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CPhysBox", "m_damageToEnableMotion"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CPhysBox", "m_damageToEnableMotion", value); }
	}

	// m_flForceToEnableMotion
	[SchemaMember("CPhysBox", "m_flForceToEnableMotion")]
	public float ForceToEnableMotion
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysBox", "m_flForceToEnableMotion"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysBox", "m_flForceToEnableMotion", value); }
	}

	// m_vHoverPosePosition
	[SchemaMember("CPhysBox", "m_vHoverPosePosition")]
	public Vector3 HoverPosePosition
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CPhysBox", "m_vHoverPosePosition"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CPhysBox", "m_vHoverPosePosition", value); }
	}

	// m_angHoverPoseAngles
	[SchemaMember("CPhysBox", "m_angHoverPoseAngles")]
	public QAngle HoverPoseAngles
	{
		get { return Schema.GetValueType<QAngle>(this.Handle, "CPhysBox", "m_angHoverPoseAngles"); }
		set { Schema.SetValueType<QAngle>(this.Handle, "CPhysBox", "m_angHoverPoseAngles", value); }
	}

	// m_bNotSolidToWorld
	[SchemaMember("CPhysBox", "m_bNotSolidToWorld")]
	public bool NotSolidToWorld
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPhysBox", "m_bNotSolidToWorld"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPhysBox", "m_bNotSolidToWorld", value); }
	}

	// m_bEnableUseOutput
	[SchemaMember("CPhysBox", "m_bEnableUseOutput")]
	public bool EnableUseOutput
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPhysBox", "m_bEnableUseOutput"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPhysBox", "m_bEnableUseOutput", value); }
	}

	// m_nHoverPoseFlags
	[SchemaMember("CPhysBox", "m_nHoverPoseFlags")]
	public HoverPoseFlags_t HoverPoseFlags
	{
		get { return Schema.GetValueType<HoverPoseFlags_t>(this.Handle, "CPhysBox", "m_nHoverPoseFlags"); }
		set { Schema.SetValueType<HoverPoseFlags_t>(this.Handle, "CPhysBox", "m_nHoverPoseFlags", value); }
	}

	// m_flTouchOutputPerEntityDelay
	[SchemaMember("CPhysBox", "m_flTouchOutputPerEntityDelay")]
	public float TouchOutputPerEntityDelay
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysBox", "m_flTouchOutputPerEntityDelay"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysBox", "m_flTouchOutputPerEntityDelay", value); }
	}

	// m_OnDamaged
	[SchemaMember("CPhysBox", "m_OnDamaged")]
	public CEntityIOOutput OnDamaged => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPhysBox", "m_OnDamaged");

	// m_OnAwakened
	[SchemaMember("CPhysBox", "m_OnAwakened")]
	public CEntityIOOutput OnAwakened => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPhysBox", "m_OnAwakened");

	// m_OnMotionEnabled
	[SchemaMember("CPhysBox", "m_OnMotionEnabled")]
	public CEntityIOOutput OnMotionEnabled => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPhysBox", "m_OnMotionEnabled");

	// m_OnPlayerUse
	[SchemaMember("CPhysBox", "m_OnPlayerUse")]
	public CEntityIOOutput OnPlayerUse => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPhysBox", "m_OnPlayerUse");

	// m_OnStartTouch
	[SchemaMember("CPhysBox", "m_OnStartTouch")]
	public CEntityIOOutput OnStartTouch => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPhysBox", "m_OnStartTouch");

	// m_hCarryingPlayer
	[SchemaMember("CPhysBox", "m_hCarryingPlayer")]
	public CHandle<CBasePlayerPawn> CarryingPlayer => Schema.GetDeclaredClass<CHandle<CBasePlayerPawn>>(this.Handle, "CPhysBox", "m_hCarryingPlayer");

}
