// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CFish : CBaseAnimGraph
{
    public CFish (IntPtr pointer) : base(pointer) {}

	// m_pool
	[SchemaMember("CFish", "m_pool")]
	public CHandle<CFishPool> Pool => Schema.GetDeclaredClass<CHandle<CFishPool>>(this.Handle, "CFish", "m_pool");

	// m_id
	[SchemaMember("CFish", "m_id")]
	public UInt32 Id
	{
		get { return Schema.GetValueType<UInt32>(this.Handle, "CFish", "m_id"); }
		set { Schema.SetValueType<UInt32>(this.Handle, "CFish", "m_id", value); }
	}

	// m_x
	[SchemaMember("CFish", "m_x")]
	public float X
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_x"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_x", value); }
	}

	// m_y
	[SchemaMember("CFish", "m_y")]
	public float Y
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_y"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_y", value); }
	}

	// m_z
	[SchemaMember("CFish", "m_z")]
	public float Z
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_z"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_z", value); }
	}

	// m_angle
	[SchemaMember("CFish", "m_angle")]
	public float Angle
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_angle"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_angle", value); }
	}

	// m_angleChange
	[SchemaMember("CFish", "m_angleChange")]
	public float AngleChange
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_angleChange"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_angleChange", value); }
	}

	// m_forward
	[SchemaMember("CFish", "m_forward")]
	public Vector3 Forward
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CFish", "m_forward"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CFish", "m_forward", value); }
	}

	// m_perp
	[SchemaMember("CFish", "m_perp")]
	public Vector3 Perp
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CFish", "m_perp"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CFish", "m_perp", value); }
	}

	// m_poolOrigin
	[SchemaMember("CFish", "m_poolOrigin")]
	public Vector3 PoolOrigin
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CFish", "m_poolOrigin"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CFish", "m_poolOrigin", value); }
	}

	// m_waterLevel
	[SchemaMember("CFish", "m_waterLevel")]
	public float FishWaterLevel
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_waterLevel"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_waterLevel", value); }
	}

	// m_speed
	[SchemaMember("CFish", "m_speed")]
	public new float Speed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_speed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_speed", value); }
	}

	// m_desiredSpeed
	[SchemaMember("CFish", "m_desiredSpeed")]
	public float DesiredSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_desiredSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_desiredSpeed", value); }
	}

	// m_calmSpeed
	[SchemaMember("CFish", "m_calmSpeed")]
	public float CalmSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_calmSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_calmSpeed", value); }
	}

	// m_panicSpeed
	[SchemaMember("CFish", "m_panicSpeed")]
	public float PanicSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_panicSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_panicSpeed", value); }
	}

	// m_avoidRange
	[SchemaMember("CFish", "m_avoidRange")]
	public float AvoidRange
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFish", "m_avoidRange"); }
		set { Schema.SetValueType<float>(this.Handle, "CFish", "m_avoidRange", value); }
	}

	// m_turnTimer
	[SchemaMember("CFish", "m_turnTimer")]
	public CountdownTimer TurnTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CFish", "m_turnTimer");

	// m_turnClockwise
	[SchemaMember("CFish", "m_turnClockwise")]
	public bool TurnClockwise
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFish", "m_turnClockwise"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFish", "m_turnClockwise", value); }
	}

	// m_goTimer
	[SchemaMember("CFish", "m_goTimer")]
	public CountdownTimer GoTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CFish", "m_goTimer");

	// m_moveTimer
	[SchemaMember("CFish", "m_moveTimer")]
	public CountdownTimer MoveTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CFish", "m_moveTimer");

	// m_panicTimer
	[SchemaMember("CFish", "m_panicTimer")]
	public CountdownTimer PanicTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CFish", "m_panicTimer");

	// m_disperseTimer
	[SchemaMember("CFish", "m_disperseTimer")]
	public CountdownTimer DisperseTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CFish", "m_disperseTimer");

	// m_proximityTimer
	[SchemaMember("CFish", "m_proximityTimer")]
	public CountdownTimer ProximityTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CFish", "m_proximityTimer");

	// m_visible
	[SchemaMember("CFish", "m_visible")]
	public NetworkedVector<CFish?> Visible => Schema.GetDeclaredClass<NetworkedVector<CFish?>>(this.Handle, "CFish", "m_visible");

	public void XPropertyChanged() => Utilities.SetStateChanged(this, "CFish", "m_x");
	public void YPropertyChanged() => Utilities.SetStateChanged(this, "CFish", "m_y");
	public void ZPropertyChanged() => Utilities.SetStateChanged(this, "CFish", "m_z");
	public void AnglePropertyChanged() => Utilities.SetStateChanged(this, "CFish", "m_angle");
	public void PoolOriginPropertyChanged() => Utilities.SetStateChanged(this, "CFish", "m_poolOrigin");
	public void FishWaterLevelPropertyChanged() => Utilities.SetStateChanged(this, "CFish", "m_waterLevel");
}
