// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CBaseAnimGraphController : CSkeletonAnimationController
{
    public CBaseAnimGraphController (IntPtr pointer) : base(pointer) {}

	// m_animGraphNetworkedVars
	[SchemaMember("CBaseAnimGraphController", "m_animGraphNetworkedVars")]
	public CAnimGraphNetworkedVariables AnimGraphNetworkedVars => Schema.GetDeclaredClass<CAnimGraphNetworkedVariables>(this.Handle, "CBaseAnimGraphController", "m_animGraphNetworkedVars");

	// m_bSequenceFinished
	[SchemaMember("CBaseAnimGraphController", "m_bSequenceFinished")]
	public bool SequenceFinished
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bSequenceFinished"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bSequenceFinished", value); }
	}

	// m_flSoundSyncTime
	[SchemaMember("CBaseAnimGraphController", "m_flSoundSyncTime")]
	public float SoundSyncTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flSoundSyncTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flSoundSyncTime", value); }
	}

	// m_nActiveIKChainMask
	[SchemaMember("CBaseAnimGraphController", "m_nActiveIKChainMask")]
	public UInt32 ActiveIKChainMask
	{
		get { return Schema.GetValueType<UInt32>(this.Handle, "CBaseAnimGraphController", "m_nActiveIKChainMask"); }
		set { Schema.SetValueType<UInt32>(this.Handle, "CBaseAnimGraphController", "m_nActiveIKChainMask", value); }
	}

	// m_hSequence
	[SchemaMember("CBaseAnimGraphController", "m_hSequence")]
	public Int32 Sequence
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_hSequence"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_hSequence", value); }
	}

	// m_flSeqStartTime
	[SchemaMember("CBaseAnimGraphController", "m_flSeqStartTime")]
	public float SeqStartTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flSeqStartTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flSeqStartTime", value); }
	}

	// m_flSeqFixedCycle
	[SchemaMember("CBaseAnimGraphController", "m_flSeqFixedCycle")]
	public float SeqFixedCycle
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flSeqFixedCycle"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flSeqFixedCycle", value); }
	}

	// m_nAnimLoopMode
	[SchemaMember("CBaseAnimGraphController", "m_nAnimLoopMode")]
	public AnimLoopMode_t AnimLoopMode
	{
		get { return Schema.GetValueType<AnimLoopMode_t>(this.Handle, "CBaseAnimGraphController", "m_nAnimLoopMode"); }
		set { Schema.SetValueType<AnimLoopMode_t>(this.Handle, "CBaseAnimGraphController", "m_nAnimLoopMode", value); }
	}

	// m_flPlaybackRate
	[SchemaMember("CBaseAnimGraphController", "m_flPlaybackRate")]
	public float PlaybackRate
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flPlaybackRate"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flPlaybackRate", value); }
	}

	// m_nNotifyState
	[SchemaMember("CBaseAnimGraphController", "m_nNotifyState")]
	public SequenceFinishNotifyState_t NotifyState
	{
		get { return Schema.GetValueType<SequenceFinishNotifyState_t>(this.Handle, "CBaseAnimGraphController", "m_nNotifyState"); }
		set { Schema.SetValueType<SequenceFinishNotifyState_t>(this.Handle, "CBaseAnimGraphController", "m_nNotifyState", value); }
	}

	// m_bNetworkedAnimationInputsChanged
	[SchemaMember("CBaseAnimGraphController", "m_bNetworkedAnimationInputsChanged")]
	public bool NetworkedAnimationInputsChanged
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bNetworkedAnimationInputsChanged"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bNetworkedAnimationInputsChanged", value); }
	}

	// m_bNetworkedSequenceChanged
	[SchemaMember("CBaseAnimGraphController", "m_bNetworkedSequenceChanged")]
	public bool NetworkedSequenceChanged
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bNetworkedSequenceChanged"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bNetworkedSequenceChanged", value); }
	}

	// m_bLastUpdateSkipped
	[SchemaMember("CBaseAnimGraphController", "m_bLastUpdateSkipped")]
	public bool LastUpdateSkipped
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bLastUpdateSkipped"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bLastUpdateSkipped", value); }
	}

	// m_flPrevAnimUpdateTime
	[SchemaMember("CBaseAnimGraphController", "m_flPrevAnimUpdateTime")]
	public float PrevAnimUpdateTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flPrevAnimUpdateTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CBaseAnimGraphController", "m_flPrevAnimUpdateTime", value); }
	}

	// m_hGraphDefinitionAG2
	[SchemaMember("CBaseAnimGraphController", "m_hGraphDefinitionAG2")]
	public CStrongHandle<InfoForResourceTypeCNmGraphDefinition> GraphDefinitionAG2 => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCNmGraphDefinition>>(this.Handle, "CBaseAnimGraphController", "m_hGraphDefinitionAG2");

	// m_bIsUsingAG2
	[SchemaMember("CBaseAnimGraphController", "m_bIsUsingAG2")]
	public bool IsUsingAG2
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bIsUsingAG2"); }
		set { Schema.SetValueType<bool>(this.Handle, "CBaseAnimGraphController", "m_bIsUsingAG2", value); }
	}

	// m_serializedPoseRecipeAG2
	[SchemaMember("CBaseAnimGraphController", "m_serializedPoseRecipeAG2")]
	public NetworkedVector<byte> SerializedPoseRecipeAG2 => Schema.GetDeclaredClass<NetworkedVector<byte>>(this.Handle, "CBaseAnimGraphController", "m_serializedPoseRecipeAG2");

	// m_nSerializePoseRecipeSizeAG2
	[SchemaMember("CBaseAnimGraphController", "m_nSerializePoseRecipeSizeAG2")]
	public Int32 SerializePoseRecipeSizeAG2
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_nSerializePoseRecipeSizeAG2"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_nSerializePoseRecipeSizeAG2", value); }
	}

	// m_nSerializePoseRecipeVersionAG2
	[SchemaMember("CBaseAnimGraphController", "m_nSerializePoseRecipeVersionAG2")]
	public Int32 SerializePoseRecipeVersionAG2
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_nSerializePoseRecipeVersionAG2"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_nSerializePoseRecipeVersionAG2", value); }
	}

	// m_nGraphCreationFlagsAG2
	[SchemaMember("CBaseAnimGraphController", "m_nGraphCreationFlagsAG2")]
	public byte GraphCreationFlagsAG2
	{
		get { return Schema.GetValueType<byte>(this.Handle, "CBaseAnimGraphController", "m_nGraphCreationFlagsAG2"); }
		set { Schema.SetValueType<byte>(this.Handle, "CBaseAnimGraphController", "m_nGraphCreationFlagsAG2", value); }
	}

	// m_nServerGraphDefReloadCountAG2
	[SchemaMember("CBaseAnimGraphController", "m_nServerGraphDefReloadCountAG2")]
	public Int32 ServerGraphDefReloadCountAG2
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_nServerGraphDefReloadCountAG2"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_nServerGraphDefReloadCountAG2", value); }
	}

	// m_nServerSerializationContextIteration
	[SchemaMember("CBaseAnimGraphController", "m_nServerSerializationContextIteration")]
	public Int32 ServerSerializationContextIteration
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_nServerSerializationContextIteration"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CBaseAnimGraphController", "m_nServerSerializationContextIteration", value); }
	}

	public void AnimGraphNetworkedVarsPropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_animGraphNetworkedVars");
	public void SequencePropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_hSequence");
	public void SeqStartTimePropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_flSeqStartTime");
	public void SeqFixedCyclePropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_flSeqFixedCycle");
	public void AnimLoopModePropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_nAnimLoopMode");
	public void PlaybackRatePropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_flPlaybackRate");
	public void GraphDefinitionAG2PropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_hGraphDefinitionAG2");
	public void IsUsingAG2PropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_bIsUsingAG2");
	public void SerializedPoseRecipeAG2PropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_serializedPoseRecipeAG2");
	public void SerializePoseRecipeSizeAG2PropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_nSerializePoseRecipeSizeAG2");
	public void SerializePoseRecipeVersionAG2PropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_nSerializePoseRecipeVersionAG2");
	public void GraphCreationFlagsAG2PropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_nGraphCreationFlagsAG2");
	public void ServerGraphDefReloadCountAG2PropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_nServerGraphDefReloadCountAG2");
	public void ServerSerializationContextIterationPropertyChanged() => Utilities.SetStateChanged(this, "CBaseAnimGraphController", "m_nServerSerializationContextIteration");
}
