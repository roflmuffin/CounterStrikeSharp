// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CTextureBasedAnimatable : CBaseModelEntity
{
    public CTextureBasedAnimatable (IntPtr pointer) : base(pointer) {}

	// m_bLoop
	[SchemaMember("CTextureBasedAnimatable", "m_bLoop")]
	public bool Loop
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CTextureBasedAnimatable", "m_bLoop"); }
		set { Schema.SetValueType<bool>(this.Handle, "CTextureBasedAnimatable", "m_bLoop", value); }
	}

	// m_flFPS
	[SchemaMember("CTextureBasedAnimatable", "m_flFPS")]
	public float FPS
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTextureBasedAnimatable", "m_flFPS"); }
		set { Schema.SetValueType<float>(this.Handle, "CTextureBasedAnimatable", "m_flFPS", value); }
	}

	// m_hPositionKeys
	[SchemaMember("CTextureBasedAnimatable", "m_hPositionKeys")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> PositionKeys => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CTextureBasedAnimatable", "m_hPositionKeys");

	// m_hRotationKeys
	[SchemaMember("CTextureBasedAnimatable", "m_hRotationKeys")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> RotationKeys => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CTextureBasedAnimatable", "m_hRotationKeys");

	// m_vAnimationBoundsMin
	[SchemaMember("CTextureBasedAnimatable", "m_vAnimationBoundsMin")]
	public Vector3 AnimationBoundsMin
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CTextureBasedAnimatable", "m_vAnimationBoundsMin"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CTextureBasedAnimatable", "m_vAnimationBoundsMin", value); }
	}

	// m_vAnimationBoundsMax
	[SchemaMember("CTextureBasedAnimatable", "m_vAnimationBoundsMax")]
	public Vector3 AnimationBoundsMax
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CTextureBasedAnimatable", "m_vAnimationBoundsMax"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CTextureBasedAnimatable", "m_vAnimationBoundsMax", value); }
	}

	// m_flStartTime
	[SchemaMember("CTextureBasedAnimatable", "m_flStartTime")]
	public float StartTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTextureBasedAnimatable", "m_flStartTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CTextureBasedAnimatable", "m_flStartTime", value); }
	}

	// m_flStartFrame
	[SchemaMember("CTextureBasedAnimatable", "m_flStartFrame")]
	public float StartFrame
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTextureBasedAnimatable", "m_flStartFrame"); }
		set { Schema.SetValueType<float>(this.Handle, "CTextureBasedAnimatable", "m_flStartFrame", value); }
	}

	public void LoopPropertyChanged() => Utilities.SetStateChanged(this, "CTextureBasedAnimatable", "m_bLoop");
	public void FPSPropertyChanged() => Utilities.SetStateChanged(this, "CTextureBasedAnimatable", "m_flFPS");
	public void PositionKeysPropertyChanged() => Utilities.SetStateChanged(this, "CTextureBasedAnimatable", "m_hPositionKeys");
	public void RotationKeysPropertyChanged() => Utilities.SetStateChanged(this, "CTextureBasedAnimatable", "m_hRotationKeys");
	public void AnimationBoundsMinPropertyChanged() => Utilities.SetStateChanged(this, "CTextureBasedAnimatable", "m_vAnimationBoundsMin");
	public void AnimationBoundsMaxPropertyChanged() => Utilities.SetStateChanged(this, "CTextureBasedAnimatable", "m_vAnimationBoundsMax");
	public void StartTimePropertyChanged() => Utilities.SetStateChanged(this, "CTextureBasedAnimatable", "m_flStartTime");
	public void StartFramePropertyChanged() => Utilities.SetStateChanged(this, "CTextureBasedAnimatable", "m_flStartFrame");
}
