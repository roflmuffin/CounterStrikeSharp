// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPhysConstraint : CLogicalEntity
{
    public CPhysConstraint (IntPtr pointer) : base(pointer) {}

	// m_nameAttach1
	[SchemaMember("CPhysConstraint", "m_nameAttach1")]
	public string NameAttach1
	{
		get { return Schema.GetUtf8String(this.Handle, "CPhysConstraint", "m_nameAttach1"); }
		set { Schema.SetString(this.Handle, "CPhysConstraint", "m_nameAttach1", value); }
	}

	// m_nameAttach2
	[SchemaMember("CPhysConstraint", "m_nameAttach2")]
	public string NameAttach2
	{
		get { return Schema.GetUtf8String(this.Handle, "CPhysConstraint", "m_nameAttach2"); }
		set { Schema.SetString(this.Handle, "CPhysConstraint", "m_nameAttach2", value); }
	}

	// m_hAttach1
	[SchemaMember("CPhysConstraint", "m_hAttach1")]
	public CHandle<CBaseEntity> Attach1 => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPhysConstraint", "m_hAttach1");

	// m_hAttach2
	[SchemaMember("CPhysConstraint", "m_hAttach2")]
	public CHandle<CBaseEntity> Attach2 => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CPhysConstraint", "m_hAttach2");

	// m_nameAttachment1
	[SchemaMember("CPhysConstraint", "m_nameAttachment1")]
	public string NameAttachment1
	{
		get { return Schema.GetUtf8String(this.Handle, "CPhysConstraint", "m_nameAttachment1"); }
		set { Schema.SetString(this.Handle, "CPhysConstraint", "m_nameAttachment1", value); }
	}

	// m_nameAttachment2
	[SchemaMember("CPhysConstraint", "m_nameAttachment2")]
	public string NameAttachment2
	{
		get { return Schema.GetUtf8String(this.Handle, "CPhysConstraint", "m_nameAttachment2"); }
		set { Schema.SetString(this.Handle, "CPhysConstraint", "m_nameAttachment2", value); }
	}

	// m_breakSound
	[SchemaMember("CPhysConstraint", "m_breakSound")]
	public string BreakSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CPhysConstraint", "m_breakSound"); }
		set { Schema.SetString(this.Handle, "CPhysConstraint", "m_breakSound", value); }
	}

	// m_forceLimit
	[SchemaMember("CPhysConstraint", "m_forceLimit")]
	public float ForceLimit
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysConstraint", "m_forceLimit"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysConstraint", "m_forceLimit", value); }
	}

	// m_torqueLimit
	[SchemaMember("CPhysConstraint", "m_torqueLimit")]
	public float TorqueLimit
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysConstraint", "m_torqueLimit"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysConstraint", "m_torqueLimit", value); }
	}

	// m_minTeleportDistance
	[SchemaMember("CPhysConstraint", "m_minTeleportDistance")]
	public float MinTeleportDistance
	{
		get { return Schema.GetValueType<float>(this.Handle, "CPhysConstraint", "m_minTeleportDistance"); }
		set { Schema.SetValueType<float>(this.Handle, "CPhysConstraint", "m_minTeleportDistance", value); }
	}

	// m_bSnapObjectPositions
	[SchemaMember("CPhysConstraint", "m_bSnapObjectPositions")]
	public bool SnapObjectPositions
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPhysConstraint", "m_bSnapObjectPositions"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPhysConstraint", "m_bSnapObjectPositions", value); }
	}

	// m_bTreatEntity1AsInfiniteMass
	[SchemaMember("CPhysConstraint", "m_bTreatEntity1AsInfiniteMass")]
	public bool TreatEntity1AsInfiniteMass
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CPhysConstraint", "m_bTreatEntity1AsInfiniteMass"); }
		set { Schema.SetValueType<bool>(this.Handle, "CPhysConstraint", "m_bTreatEntity1AsInfiniteMass", value); }
	}

	// m_OnBreak
	[SchemaMember("CPhysConstraint", "m_OnBreak")]
	public CEntityIOOutput OnBreak => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CPhysConstraint", "m_OnBreak");

}
