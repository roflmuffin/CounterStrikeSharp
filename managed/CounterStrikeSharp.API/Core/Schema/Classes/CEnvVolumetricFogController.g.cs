// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CEnvVolumetricFogController : CBaseEntity
{
    public CEnvVolumetricFogController (IntPtr pointer) : base(pointer) {}

	// m_flScattering
	[SchemaMember("CEnvVolumetricFogController", "m_flScattering")]
	public float Scattering
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flScattering"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flScattering", value); }
	}

	// m_TintColor
	[SchemaMember("CEnvVolumetricFogController", "m_TintColor")]
	public Color TintColor
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CEnvVolumetricFogController", "m_TintColor"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CEnvVolumetricFogController", "m_TintColor", value); }
	}

	// m_flAnisotropy
	[SchemaMember("CEnvVolumetricFogController", "m_flAnisotropy")]
	public float Anisotropy
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flAnisotropy"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flAnisotropy", value); }
	}

	// m_flFadeSpeed
	[SchemaMember("CEnvVolumetricFogController", "m_flFadeSpeed")]
	public float FadeSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeSpeed", value); }
	}

	// m_flDrawDistance
	[SchemaMember("CEnvVolumetricFogController", "m_flDrawDistance")]
	public float DrawDistance
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flDrawDistance"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flDrawDistance", value); }
	}

	// m_flFadeInStart
	[SchemaMember("CEnvVolumetricFogController", "m_flFadeInStart")]
	public float FadeInStart
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeInStart"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeInStart", value); }
	}

	// m_flFadeInEnd
	[SchemaMember("CEnvVolumetricFogController", "m_flFadeInEnd")]
	public float FadeInEnd
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeInEnd"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flFadeInEnd", value); }
	}

	// m_flIndirectStrength
	[SchemaMember("CEnvVolumetricFogController", "m_flIndirectStrength")]
	public float IndirectStrength
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flIndirectStrength"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flIndirectStrength", value); }
	}

	// m_nVolumeDepth
	[SchemaMember("CEnvVolumetricFogController", "m_nVolumeDepth")]
	public Int32 VolumeDepth
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nVolumeDepth"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nVolumeDepth", value); }
	}

	// m_fFirstVolumeSliceThickness
	[SchemaMember("CEnvVolumetricFogController", "m_fFirstVolumeSliceThickness")]
	public float FirstVolumeSliceThickness
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_fFirstVolumeSliceThickness"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_fFirstVolumeSliceThickness", value); }
	}

	// m_nIndirectTextureDimX
	[SchemaMember("CEnvVolumetricFogController", "m_nIndirectTextureDimX")]
	public Int32 IndirectTextureDimX
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimX"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimX", value); }
	}

	// m_nIndirectTextureDimY
	[SchemaMember("CEnvVolumetricFogController", "m_nIndirectTextureDimY")]
	public Int32 IndirectTextureDimY
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimY"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimY", value); }
	}

	// m_nIndirectTextureDimZ
	[SchemaMember("CEnvVolumetricFogController", "m_nIndirectTextureDimZ")]
	public Int32 IndirectTextureDimZ
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimZ"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nIndirectTextureDimZ", value); }
	}

	// m_vBoxMins
	[SchemaMember("CEnvVolumetricFogController", "m_vBoxMins")]
	public Vector3 BoxMins
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CEnvVolumetricFogController", "m_vBoxMins"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CEnvVolumetricFogController", "m_vBoxMins", value); }
	}

	// m_vBoxMaxs
	[SchemaMember("CEnvVolumetricFogController", "m_vBoxMaxs")]
	public Vector3 BoxMaxs
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CEnvVolumetricFogController", "m_vBoxMaxs"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CEnvVolumetricFogController", "m_vBoxMaxs", value); }
	}

	// m_bActive
	[SchemaMember("CEnvVolumetricFogController", "m_bActive")]
	public bool Active
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bActive"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bActive", value); }
	}

	// m_flStartAnisoTime
	[SchemaMember("CEnvVolumetricFogController", "m_flStartAnisoTime")]
	public float StartAnisoTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartAnisoTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartAnisoTime", value); }
	}

	// m_flStartScatterTime
	[SchemaMember("CEnvVolumetricFogController", "m_flStartScatterTime")]
	public float StartScatterTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartScatterTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartScatterTime", value); }
	}

	// m_flStartDrawDistanceTime
	[SchemaMember("CEnvVolumetricFogController", "m_flStartDrawDistanceTime")]
	public float StartDrawDistanceTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartDrawDistanceTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartDrawDistanceTime", value); }
	}

	// m_flStartAnisotropy
	[SchemaMember("CEnvVolumetricFogController", "m_flStartAnisotropy")]
	public float StartAnisotropy
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartAnisotropy"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartAnisotropy", value); }
	}

	// m_flStartScattering
	[SchemaMember("CEnvVolumetricFogController", "m_flStartScattering")]
	public float StartScattering
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartScattering"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartScattering", value); }
	}

	// m_flStartDrawDistance
	[SchemaMember("CEnvVolumetricFogController", "m_flStartDrawDistance")]
	public float StartDrawDistance
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartDrawDistance"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flStartDrawDistance", value); }
	}

	// m_flDefaultAnisotropy
	[SchemaMember("CEnvVolumetricFogController", "m_flDefaultAnisotropy")]
	public float DefaultAnisotropy
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultAnisotropy"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultAnisotropy", value); }
	}

	// m_flDefaultScattering
	[SchemaMember("CEnvVolumetricFogController", "m_flDefaultScattering")]
	public float DefaultScattering
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultScattering"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultScattering", value); }
	}

	// m_flDefaultDrawDistance
	[SchemaMember("CEnvVolumetricFogController", "m_flDefaultDrawDistance")]
	public float DefaultDrawDistance
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultDrawDistance"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_flDefaultDrawDistance", value); }
	}

	// m_bStartDisabled
	[SchemaMember("CEnvVolumetricFogController", "m_bStartDisabled")]
	public bool StartDisabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bStartDisabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bStartDisabled", value); }
	}

	// m_bEnableIndirect
	[SchemaMember("CEnvVolumetricFogController", "m_bEnableIndirect")]
	public bool EnableIndirect
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bEnableIndirect"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bEnableIndirect", value); }
	}

	// m_bIsMaster
	[SchemaMember("CEnvVolumetricFogController", "m_bIsMaster")]
	public bool IsMaster
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bIsMaster"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bIsMaster", value); }
	}

	// m_hFogIndirectTexture
	[SchemaMember("CEnvVolumetricFogController", "m_hFogIndirectTexture")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> FogIndirectTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvVolumetricFogController", "m_hFogIndirectTexture");

	// m_nForceRefreshCount
	[SchemaMember("CEnvVolumetricFogController", "m_nForceRefreshCount")]
	public Int32 ForceRefreshCount
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nForceRefreshCount"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CEnvVolumetricFogController", "m_nForceRefreshCount", value); }
	}

	// m_fNoiseSpeed
	[SchemaMember("CEnvVolumetricFogController", "m_fNoiseSpeed")]
	public float NoiseSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_fNoiseSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_fNoiseSpeed", value); }
	}

	// m_fNoiseStrength
	[SchemaMember("CEnvVolumetricFogController", "m_fNoiseStrength")]
	public float NoiseStrength
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_fNoiseStrength"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_fNoiseStrength", value); }
	}

	// m_vNoiseScale
	[SchemaMember("CEnvVolumetricFogController", "m_vNoiseScale")]
	public Vector3 NoiseScale
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CEnvVolumetricFogController", "m_vNoiseScale"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CEnvVolumetricFogController", "m_vNoiseScale", value); }
	}

	// m_fWindSpeed
	[SchemaMember("CEnvVolumetricFogController", "m_fWindSpeed")]
	public float WindSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_fWindSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogController", "m_fWindSpeed", value); }
	}

	// m_vWindDirection
	[SchemaMember("CEnvVolumetricFogController", "m_vWindDirection")]
	public Vector3 WindDirection
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CEnvVolumetricFogController", "m_vWindDirection"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CEnvVolumetricFogController", "m_vWindDirection", value); }
	}

	// m_bFirstTime
	[SchemaMember("CEnvVolumetricFogController", "m_bFirstTime")]
	public bool FirstTime
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bFirstTime"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogController", "m_bFirstTime", value); }
	}

	public void ScatteringPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flScattering");
	public void TintColorPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_TintColor");
	public void AnisotropyPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flAnisotropy");
	public void FadeSpeedPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flFadeSpeed");
	public void DrawDistancePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flDrawDistance");
	public void FadeInStartPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flFadeInStart");
	public void FadeInEndPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flFadeInEnd");
	public void IndirectStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flIndirectStrength");
	public void VolumeDepthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_nVolumeDepth");
	public void FirstVolumeSliceThicknessPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_fFirstVolumeSliceThickness");
	public void IndirectTextureDimXPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_nIndirectTextureDimX");
	public void IndirectTextureDimYPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_nIndirectTextureDimY");
	public void IndirectTextureDimZPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_nIndirectTextureDimZ");
	public void BoxMinsPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_vBoxMins");
	public void BoxMaxsPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_vBoxMaxs");
	public void ActivePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_bActive");
	public void StartAnisoTimePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flStartAnisoTime");
	public void StartScatterTimePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flStartScatterTime");
	public void StartDrawDistanceTimePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flStartDrawDistanceTime");
	public void StartAnisotropyPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flStartAnisotropy");
	public void StartScatteringPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flStartScattering");
	public void StartDrawDistancePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flStartDrawDistance");
	public void DefaultAnisotropyPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flDefaultAnisotropy");
	public void DefaultScatteringPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flDefaultScattering");
	public void DefaultDrawDistancePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_flDefaultDrawDistance");
	public void StartDisabledPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_bStartDisabled");
	public void EnableIndirectPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_bEnableIndirect");
	public void IsMasterPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_bIsMaster");
	public void FogIndirectTexturePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_hFogIndirectTexture");
	public void ForceRefreshCountPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_nForceRefreshCount");
	public void NoiseSpeedPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_fNoiseSpeed");
	public void NoiseStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_fNoiseStrength");
	public void NoiseScalePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_vNoiseScale");
	public void WindSpeedPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_fWindSpeed");
	public void WindDirectionPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogController", "m_vWindDirection");
}
