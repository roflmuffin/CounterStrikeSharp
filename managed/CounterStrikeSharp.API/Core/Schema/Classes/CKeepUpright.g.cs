// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CKeepUpright : CPointEntity
{
    public CKeepUpright (IntPtr pointer) : base(pointer) {}

	// m_worldGoalAxis
	[SchemaMember("CKeepUpright", "m_worldGoalAxis")]
	public Vector3 WorldGoalAxis
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CKeepUpright", "m_worldGoalAxis"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CKeepUpright", "m_worldGoalAxis", value); }
	}

	// m_localTestAxis
	[SchemaMember("CKeepUpright", "m_localTestAxis")]
	public Vector3 LocalTestAxis
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CKeepUpright", "m_localTestAxis"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CKeepUpright", "m_localTestAxis", value); }
	}

	// m_nameAttach
	[SchemaMember("CKeepUpright", "m_nameAttach")]
	public string NameAttach
	{
		get { return Schema.GetUtf8String(this.Handle, "CKeepUpright", "m_nameAttach"); }
		set { Schema.SetString(this.Handle, "CKeepUpright", "m_nameAttach", value); }
	}

	// m_attachedObject
	[SchemaMember("CKeepUpright", "m_attachedObject")]
	public CHandle<CBaseEntity> AttachedObject => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CKeepUpright", "m_attachedObject");

	// m_angularLimit
	[SchemaMember("CKeepUpright", "m_angularLimit")]
	public float AngularLimit
	{
		get { return Schema.GetValueType<float>(this.Handle, "CKeepUpright", "m_angularLimit"); }
		set { Schema.SetValueType<float>(this.Handle, "CKeepUpright", "m_angularLimit", value); }
	}

	// m_bActive
	[SchemaMember("CKeepUpright", "m_bActive")]
	public bool Active
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CKeepUpright", "m_bActive"); }
		set { Schema.SetValueType<bool>(this.Handle, "CKeepUpright", "m_bActive", value); }
	}

	// m_bDampAllRotation
	[SchemaMember("CKeepUpright", "m_bDampAllRotation")]
	public bool DampAllRotation
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CKeepUpright", "m_bDampAllRotation"); }
		set { Schema.SetValueType<bool>(this.Handle, "CKeepUpright", "m_bDampAllRotation", value); }
	}

}
