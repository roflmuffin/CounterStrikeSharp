// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CInfoOffscreenPanoramaTexture : CPointEntity
{
    public CInfoOffscreenPanoramaTexture (IntPtr pointer) : base(pointer) {}

	// m_bDisabled
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_bDisabled")]
	public bool Disabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_bDisabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_bDisabled", value); }
	}

	// m_nResolutionX
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_nResolutionX")]
	public Int32 ResolutionX
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nResolutionX"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nResolutionX", value); }
	}

	// m_nResolutionY
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_nResolutionY")]
	public Int32 ResolutionY
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nResolutionY"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nResolutionY", value); }
	}

	// m_szLayoutFileName
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_szLayoutFileName")]
	public string LayoutFileName
	{
		get { return Schema.GetUtf8String(this.Handle, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName"); }
		set { Schema.SetString(this.Handle, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName", value); }
	}

	// m_RenderAttrName
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_RenderAttrName")]
	public string RenderAttrName
	{
		get { return Schema.GetUtf8String(this.Handle, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName"); }
		set { Schema.SetString(this.Handle, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName", value); }
	}

	// m_TargetEntities
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_TargetEntities")]
	public NetworkedVector<CHandle<CBaseModelEntity>> TargetEntities => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseModelEntity>>>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_TargetEntities");

	// m_nTargetChangeCount
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount")]
	public Int32 TargetChangeCount
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount", value); }
	}

	// m_vecCSSClasses
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_vecCSSClasses")]
	public NetworkedVector<string> CSSClasses => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_vecCSSClasses");

	// m_szTargetsName
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_szTargetsName")]
	public string TargetsName
	{
		get { return Schema.GetUtf8String(this.Handle, "CInfoOffscreenPanoramaTexture", "m_szTargetsName"); }
		set { Schema.SetString(this.Handle, "CInfoOffscreenPanoramaTexture", "m_szTargetsName", value); }
	}

	// m_AdditionalTargetEntities
	[SchemaMember("CInfoOffscreenPanoramaTexture", "m_AdditionalTargetEntities")]
	public NetworkedVector<CHandle<CBaseModelEntity>> AdditionalTargetEntities => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseModelEntity>>>(this.Handle, "CInfoOffscreenPanoramaTexture", "m_AdditionalTargetEntities");

	public void DisabledPropertyChanged() => Utilities.SetStateChanged(this, "CInfoOffscreenPanoramaTexture", "m_bDisabled");
	public void ResolutionXPropertyChanged() => Utilities.SetStateChanged(this, "CInfoOffscreenPanoramaTexture", "m_nResolutionX");
	public void ResolutionYPropertyChanged() => Utilities.SetStateChanged(this, "CInfoOffscreenPanoramaTexture", "m_nResolutionY");
	public void LayoutFileNamePropertyChanged() => Utilities.SetStateChanged(this, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName");
	public void RenderAttrNamePropertyChanged() => Utilities.SetStateChanged(this, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName");
	public void TargetEntitiesPropertyChanged() => Utilities.SetStateChanged(this, "CInfoOffscreenPanoramaTexture", "m_TargetEntities");
	public void TargetChangeCountPropertyChanged() => Utilities.SetStateChanged(this, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount");
	public void CSSClassesPropertyChanged() => Utilities.SetStateChanged(this, "CInfoOffscreenPanoramaTexture", "m_vecCSSClasses");
}
