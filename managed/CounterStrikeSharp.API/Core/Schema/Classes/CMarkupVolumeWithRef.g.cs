// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CMarkupVolumeWithRef : CMarkupVolumeTagged
{
    public CMarkupVolumeWithRef (IntPtr pointer) : base(pointer) {}

	// m_bUseRef
	[SchemaMember("CMarkupVolumeWithRef", "m_bUseRef")]
	public bool UseRef
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CMarkupVolumeWithRef", "m_bUseRef"); }
		set { Schema.SetValueType<bool>(this.Handle, "CMarkupVolumeWithRef", "m_bUseRef", value); }
	}

	// m_vRefPosEntitySpace
	[SchemaMember("CMarkupVolumeWithRef", "m_vRefPosEntitySpace")]
	public Vector3 RefPosEntitySpace
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CMarkupVolumeWithRef", "m_vRefPosEntitySpace"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CMarkupVolumeWithRef", "m_vRefPosEntitySpace", value); }
	}

	// m_vRefPosWorldSpace
	[SchemaMember("CMarkupVolumeWithRef", "m_vRefPosWorldSpace")]
	public Vector3 RefPosWorldSpace
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CMarkupVolumeWithRef", "m_vRefPosWorldSpace"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CMarkupVolumeWithRef", "m_vRefPosWorldSpace", value); }
	}

	// m_flRefDot
	[SchemaMember("CMarkupVolumeWithRef", "m_flRefDot")]
	public float RefDot
	{
		get { return Schema.GetValueType<float>(this.Handle, "CMarkupVolumeWithRef", "m_flRefDot"); }
		set { Schema.SetValueType<float>(this.Handle, "CMarkupVolumeWithRef", "m_flRefDot", value); }
	}

}
