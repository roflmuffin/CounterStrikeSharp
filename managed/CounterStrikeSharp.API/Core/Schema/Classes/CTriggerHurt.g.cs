// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CTriggerHurt : CBaseTrigger
{
    public CTriggerHurt (IntPtr pointer) : base(pointer) {}

	// m_flOriginalDamage
	[SchemaMember("CTriggerHurt", "m_flOriginalDamage")]
	public float OriginalDamage
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTriggerHurt", "m_flOriginalDamage"); }
		set { Schema.SetValueType<float>(this.Handle, "CTriggerHurt", "m_flOriginalDamage", value); }
	}

	// m_flDamage
	[SchemaMember("CTriggerHurt", "m_flDamage")]
	public float Damage
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTriggerHurt", "m_flDamage"); }
		set { Schema.SetValueType<float>(this.Handle, "CTriggerHurt", "m_flDamage", value); }
	}

	// m_flDamageCap
	[SchemaMember("CTriggerHurt", "m_flDamageCap")]
	public float DamageCap
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTriggerHurt", "m_flDamageCap"); }
		set { Schema.SetValueType<float>(this.Handle, "CTriggerHurt", "m_flDamageCap", value); }
	}

	// m_flLastDmgTime
	[SchemaMember("CTriggerHurt", "m_flLastDmgTime")]
	public float LastDmgTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTriggerHurt", "m_flLastDmgTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CTriggerHurt", "m_flLastDmgTime", value); }
	}

	// m_flForgivenessDelay
	[SchemaMember("CTriggerHurt", "m_flForgivenessDelay")]
	public float ForgivenessDelay
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTriggerHurt", "m_flForgivenessDelay"); }
		set { Schema.SetValueType<float>(this.Handle, "CTriggerHurt", "m_flForgivenessDelay", value); }
	}

	// m_bitsDamageInflict
	[SchemaMember("CTriggerHurt", "m_bitsDamageInflict")]
	public DamageTypes_t BitsDamageInflict
	{
		get { return Schema.GetValueType<DamageTypes_t>(this.Handle, "CTriggerHurt", "m_bitsDamageInflict"); }
		set { Schema.SetValueType<DamageTypes_t>(this.Handle, "CTriggerHurt", "m_bitsDamageInflict", value); }
	}

	// m_damageModel
	[SchemaMember("CTriggerHurt", "m_damageModel")]
	public Int32 DamageModel
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CTriggerHurt", "m_damageModel"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CTriggerHurt", "m_damageModel", value); }
	}

	// m_bNoDmgForce
	[SchemaMember("CTriggerHurt", "m_bNoDmgForce")]
	public bool NoDmgForce
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CTriggerHurt", "m_bNoDmgForce"); }
		set { Schema.SetValueType<bool>(this.Handle, "CTriggerHurt", "m_bNoDmgForce", value); }
	}

	// m_vDamageForce
	[SchemaMember("CTriggerHurt", "m_vDamageForce")]
	public Vector3 DamageForce
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CTriggerHurt", "m_vDamageForce"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CTriggerHurt", "m_vDamageForce", value); }
	}

	// m_thinkAlways
	[SchemaMember("CTriggerHurt", "m_thinkAlways")]
	public bool ThinkAlways
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CTriggerHurt", "m_thinkAlways"); }
		set { Schema.SetValueType<bool>(this.Handle, "CTriggerHurt", "m_thinkAlways", value); }
	}

	// m_hurtThinkPeriod
	[SchemaMember("CTriggerHurt", "m_hurtThinkPeriod")]
	public float HurtThinkPeriod
	{
		get { return Schema.GetValueType<float>(this.Handle, "CTriggerHurt", "m_hurtThinkPeriod"); }
		set { Schema.SetValueType<float>(this.Handle, "CTriggerHurt", "m_hurtThinkPeriod", value); }
	}

	// m_OnHurt
	[SchemaMember("CTriggerHurt", "m_OnHurt")]
	public CEntityIOOutput OnHurt => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CTriggerHurt", "m_OnHurt");

	// m_OnHurtPlayer
	[SchemaMember("CTriggerHurt", "m_OnHurtPlayer")]
	public CEntityIOOutput OnHurtPlayer => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CTriggerHurt", "m_OnHurtPlayer");

	// m_hurtEntities
	[SchemaMember("CTriggerHurt", "m_hurtEntities")]
	public NetworkedVector<CHandle<CBaseEntity>> HurtEntities => Schema.GetDeclaredClass<NetworkedVector<CHandle<CBaseEntity>>>(this.Handle, "CTriggerHurt", "m_hurtEntities");

}
