// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CFuncMonitor : CFuncBrush
{
    public CFuncMonitor (IntPtr pointer) : base(pointer) {}

	// m_targetCamera
	[SchemaMember("CFuncMonitor", "m_targetCamera")]
	public string TargetCamera
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMonitor", "m_targetCamera"); }
		set { Schema.SetString(this.Handle, "CFuncMonitor", "m_targetCamera", value); }
	}

	// m_nResolutionEnum
	[SchemaMember("CFuncMonitor", "m_nResolutionEnum")]
	public Int32 ResolutionEnum
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CFuncMonitor", "m_nResolutionEnum"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CFuncMonitor", "m_nResolutionEnum", value); }
	}

	// m_bRenderShadows
	[SchemaMember("CFuncMonitor", "m_bRenderShadows")]
	public bool RenderShadows
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMonitor", "m_bRenderShadows"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMonitor", "m_bRenderShadows", value); }
	}

	// m_bUseUniqueColorTarget
	[SchemaMember("CFuncMonitor", "m_bUseUniqueColorTarget")]
	public bool UseUniqueColorTarget
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMonitor", "m_bUseUniqueColorTarget"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMonitor", "m_bUseUniqueColorTarget", value); }
	}

	// m_brushModelName
	[SchemaMember("CFuncMonitor", "m_brushModelName")]
	public string BrushModelName
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMonitor", "m_brushModelName"); }
		set { Schema.SetString(this.Handle, "CFuncMonitor", "m_brushModelName", value); }
	}

	// m_hTargetCamera
	[SchemaMember("CFuncMonitor", "m_hTargetCamera")]
	public CHandle<CBaseEntity> HTargetCamera => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CFuncMonitor", "m_hTargetCamera");

	// m_bEnabled
	[SchemaMember("CFuncMonitor", "m_bEnabled")]
	public bool Enabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMonitor", "m_bEnabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMonitor", "m_bEnabled", value); }
	}

	// m_bDraw3DSkybox
	[SchemaMember("CFuncMonitor", "m_bDraw3DSkybox")]
	public bool Draw3DSkybox
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMonitor", "m_bDraw3DSkybox"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMonitor", "m_bDraw3DSkybox", value); }
	}

	// m_bStartEnabled
	[SchemaMember("CFuncMonitor", "m_bStartEnabled")]
	public bool StartEnabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMonitor", "m_bStartEnabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMonitor", "m_bStartEnabled", value); }
	}

	public void TargetCameraPropertyChanged() => Utilities.SetStateChanged(this, "CFuncMonitor", "m_targetCamera");
	public void ResolutionEnumPropertyChanged() => Utilities.SetStateChanged(this, "CFuncMonitor", "m_nResolutionEnum");
	public void RenderShadowsPropertyChanged() => Utilities.SetStateChanged(this, "CFuncMonitor", "m_bRenderShadows");
	public void UseUniqueColorTargetPropertyChanged() => Utilities.SetStateChanged(this, "CFuncMonitor", "m_bUseUniqueColorTarget");
	public void BrushModelNamePropertyChanged() => Utilities.SetStateChanged(this, "CFuncMonitor", "m_brushModelName");
	public void HTargetCameraPropertyChanged() => Utilities.SetStateChanged(this, "CFuncMonitor", "m_hTargetCamera");
	public void EnabledPropertyChanged() => Utilities.SetStateChanged(this, "CFuncMonitor", "m_bEnabled");
	public void Draw3DSkyboxPropertyChanged() => Utilities.SetStateChanged(this, "CFuncMonitor", "m_bDraw3DSkybox");
}
