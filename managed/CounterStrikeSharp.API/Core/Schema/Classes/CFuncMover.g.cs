// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CFuncMover : CBaseModelEntity
{
    public CFuncMover (IntPtr pointer) : base(pointer) {}

	// m_iszPathName
	[SchemaMember("CFuncMover", "m_iszPathName")]
	public string PathName
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszPathName"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszPathName", value); }
	}

	// m_hPathMover
	[SchemaMember("CFuncMover", "m_hPathMover")]
	public CHandle<CPathMover> PathMover => Schema.GetDeclaredClass<CHandle<CPathMover>>(this.Handle, "CFuncMover", "m_hPathMover");

	// m_hPrevPathMover
	[SchemaMember("CFuncMover", "m_hPrevPathMover")]
	public CHandle<CPathMover> PrevPathMover => Schema.GetDeclaredClass<CHandle<CPathMover>>(this.Handle, "CFuncMover", "m_hPrevPathMover");

	// m_iszPathNodeStart
	[SchemaMember("CFuncMover", "m_iszPathNodeStart")]
	public string PathNodeStart
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszPathNodeStart"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszPathNodeStart", value); }
	}

	// m_iszPathNodeEnd
	[SchemaMember("CFuncMover", "m_iszPathNodeEnd")]
	public string PathNodeEnd
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszPathNodeEnd"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszPathNodeEnd", value); }
	}

	// m_eMoveType
	[SchemaMember("CFuncMover", "m_eMoveType")]
	public new CFuncMoverMove_t MoveType
	{
		get { return Schema.GetValueType<CFuncMoverMove_t>(this.Handle, "CFuncMover", "m_eMoveType"); }
		set { Schema.SetValueType<CFuncMoverMove_t>(this.Handle, "CFuncMover", "m_eMoveType", value); }
	}

	// m_bIsReversing
	[SchemaMember("CFuncMover", "m_bIsReversing")]
	public bool IsReversing
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bIsReversing"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bIsReversing", value); }
	}

	// m_vTarget
	[SchemaMember("CFuncMover", "m_vTarget")]
	public new Vector3 Target
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CFuncMover", "m_vTarget"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CFuncMover", "m_vTarget", value); }
	}

	// m_flStartSpeed
	[SchemaMember("CFuncMover", "m_flStartSpeed")]
	public float StartSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flStartSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flStartSpeed", value); }
	}

	// m_flPathLocation
	[SchemaMember("CFuncMover", "m_flPathLocation")]
	public float PathLocation
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flPathLocation"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flPathLocation", value); }
	}

	// m_flT
	[SchemaMember("CFuncMover", "m_flT")]
	public float T
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flT"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flT", value); }
	}

	// m_nCurrentNodeIndex
	[SchemaMember("CFuncMover", "m_nCurrentNodeIndex")]
	public Int32 CurrentNodeIndex
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CFuncMover", "m_nCurrentNodeIndex"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CFuncMover", "m_nCurrentNodeIndex", value); }
	}

	// m_nPreviousNodeIndex
	[SchemaMember("CFuncMover", "m_nPreviousNodeIndex")]
	public Int32 PreviousNodeIndex
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CFuncMover", "m_nPreviousNodeIndex"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CFuncMover", "m_nPreviousNodeIndex", value); }
	}

	// m_eSolidType
	[SchemaMember("CFuncMover", "m_eSolidType")]
	public SolidType_t SolidType
	{
		get { return Schema.GetValueType<SolidType_t>(this.Handle, "CFuncMover", "m_eSolidType"); }
		set { Schema.SetValueType<SolidType_t>(this.Handle, "CFuncMover", "m_eSolidType", value); }
	}

	// m_bIsMoving
	[SchemaMember("CFuncMover", "m_bIsMoving")]
	public bool IsMoving
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bIsMoving"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bIsMoving", value); }
	}

	// m_flTimeToReachMaxSpeed
	[SchemaMember("CFuncMover", "m_flTimeToReachMaxSpeed")]
	public float TimeToReachMaxSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flTimeToReachMaxSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flTimeToReachMaxSpeed", value); }
	}

	// m_flDistanceToReachMaxSpeed
	[SchemaMember("CFuncMover", "m_flDistanceToReachMaxSpeed")]
	public float DistanceToReachMaxSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flDistanceToReachMaxSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flDistanceToReachMaxSpeed", value); }
	}

	// m_flTimeToReachZeroSpeed
	[SchemaMember("CFuncMover", "m_flTimeToReachZeroSpeed")]
	public float TimeToReachZeroSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flTimeToReachZeroSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flTimeToReachZeroSpeed", value); }
	}

	// m_flDistanceToReachZeroSpeed
	[SchemaMember("CFuncMover", "m_flDistanceToReachZeroSpeed")]
	public float DistanceToReachZeroSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flDistanceToReachZeroSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flDistanceToReachZeroSpeed", value); }
	}

	// m_flTimeMovementStart
	[SchemaMember("CFuncMover", "m_flTimeMovementStart")]
	public float TimeMovementStart
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flTimeMovementStart"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flTimeMovementStart", value); }
	}

	// m_flTimeMovementStop
	[SchemaMember("CFuncMover", "m_flTimeMovementStop")]
	public float TimeMovementStop
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flTimeMovementStop"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flTimeMovementStop", value); }
	}

	// m_hStopAtNode
	[SchemaMember("CFuncMover", "m_hStopAtNode")]
	public CHandle<CMoverPathNode> StopAtNode => Schema.GetDeclaredClass<CHandle<CMoverPathNode>>(this.Handle, "CFuncMover", "m_hStopAtNode");

	// m_flPathLocationToBeginStop
	[SchemaMember("CFuncMover", "m_flPathLocationToBeginStop")]
	public float PathLocationToBeginStop
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flPathLocationToBeginStop"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flPathLocationToBeginStop", value); }
	}

	// m_iszStartForwardSound
	[SchemaMember("CFuncMover", "m_iszStartForwardSound")]
	public string StartForwardSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszStartForwardSound"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszStartForwardSound", value); }
	}

	// m_iszLoopForwardSound
	[SchemaMember("CFuncMover", "m_iszLoopForwardSound")]
	public string LoopForwardSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszLoopForwardSound"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszLoopForwardSound", value); }
	}

	// m_iszStopForwardSound
	[SchemaMember("CFuncMover", "m_iszStopForwardSound")]
	public string StopForwardSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszStopForwardSound"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszStopForwardSound", value); }
	}

	// m_iszStartReverseSound
	[SchemaMember("CFuncMover", "m_iszStartReverseSound")]
	public string StartReverseSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszStartReverseSound"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszStartReverseSound", value); }
	}

	// m_iszLoopReverseSound
	[SchemaMember("CFuncMover", "m_iszLoopReverseSound")]
	public string LoopReverseSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszLoopReverseSound"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszLoopReverseSound", value); }
	}

	// m_iszStopReverseSound
	[SchemaMember("CFuncMover", "m_iszStopReverseSound")]
	public string StopReverseSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszStopReverseSound"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszStopReverseSound", value); }
	}

	// m_iszArriveAtDestinationSound
	[SchemaMember("CFuncMover", "m_iszArriveAtDestinationSound")]
	public string ArriveAtDestinationSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszArriveAtDestinationSound"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszArriveAtDestinationSound", value); }
	}

	// m_OnMovementEnd
	[SchemaMember("CFuncMover", "m_OnMovementEnd")]
	public CEntityIOOutput OnMovementEnd => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMover", "m_OnMovementEnd");

	// m_bStartAtClosestPoint
	[SchemaMember("CFuncMover", "m_bStartAtClosestPoint")]
	public bool StartAtClosestPoint
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bStartAtClosestPoint"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bStartAtClosestPoint", value); }
	}

	// m_bStartAtEnd
	[SchemaMember("CFuncMover", "m_bStartAtEnd")]
	public bool StartAtEnd
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bStartAtEnd"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bStartAtEnd", value); }
	}

	// m_eOrientationUpdate
	[SchemaMember("CFuncMover", "m_eOrientationUpdate")]
	public CFuncMoverOrientationUpdate_t OrientationUpdate
	{
		get { return Schema.GetValueType<CFuncMoverOrientationUpdate_t>(this.Handle, "CFuncMover", "m_eOrientationUpdate"); }
		set { Schema.SetValueType<CFuncMoverOrientationUpdate_t>(this.Handle, "CFuncMover", "m_eOrientationUpdate", value); }
	}

	// m_flTimeStartOrientationChange
	[SchemaMember("CFuncMover", "m_flTimeStartOrientationChange")]
	public float TimeStartOrientationChange
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flTimeStartOrientationChange"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flTimeStartOrientationChange", value); }
	}

	// m_flTimeToBlendToNewOrientation
	[SchemaMember("CFuncMover", "m_flTimeToBlendToNewOrientation")]
	public float TimeToBlendToNewOrientation
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flTimeToBlendToNewOrientation"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flTimeToBlendToNewOrientation", value); }
	}

	// m_flDurationBlendToNewOrientationRan
	[SchemaMember("CFuncMover", "m_flDurationBlendToNewOrientationRan")]
	public float DurationBlendToNewOrientationRan
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flDurationBlendToNewOrientationRan"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flDurationBlendToNewOrientationRan", value); }
	}

	// m_nOriginalOrientationIndex
	[SchemaMember("CFuncMover", "m_nOriginalOrientationIndex")]
	public Int32 OriginalOrientationIndex
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CFuncMover", "m_nOriginalOrientationIndex"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CFuncMover", "m_nOriginalOrientationIndex", value); }
	}

	// m_bCreateMovableNavMesh
	[SchemaMember("CFuncMover", "m_bCreateMovableNavMesh")]
	public bool CreateMovableNavMesh
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bCreateMovableNavMesh"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bCreateMovableNavMesh", value); }
	}

	// m_bAllowMovableNavMeshDockingOnEntireEntity
	[SchemaMember("CFuncMover", "m_bAllowMovableNavMeshDockingOnEntireEntity")]
	public bool AllowMovableNavMeshDockingOnEntireEntity
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bAllowMovableNavMeshDockingOnEntireEntity"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bAllowMovableNavMeshDockingOnEntireEntity", value); }
	}

	// m_OnNodePassed
	[SchemaMember("CFuncMover", "m_OnNodePassed")]
	public CEntityIOOutput OnNodePassed => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMover", "m_OnNodePassed");

	// m_iszOrientationMatchEntityName
	[SchemaMember("CFuncMover", "m_iszOrientationMatchEntityName")]
	public string OrientationMatchEntityName
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_iszOrientationMatchEntityName"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_iszOrientationMatchEntityName", value); }
	}

	// m_hOrientationMatchEntity
	[SchemaMember("CFuncMover", "m_hOrientationMatchEntity")]
	public CHandle<CBaseEntity> OrientationMatchEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CFuncMover", "m_hOrientationMatchEntity");

	// m_flTimeToTraverseToNextNode
	[SchemaMember("CFuncMover", "m_flTimeToTraverseToNextNode")]
	public float TimeToTraverseToNextNode
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flTimeToTraverseToNextNode"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flTimeToTraverseToNextNode", value); }
	}

	// m_vLerpToNewPosStartInPathEntitySpace
	[SchemaMember("CFuncMover", "m_vLerpToNewPosStartInPathEntitySpace")]
	public Vector3 LerpToNewPosStartInPathEntitySpace
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CFuncMover", "m_vLerpToNewPosStartInPathEntitySpace"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CFuncMover", "m_vLerpToNewPosStartInPathEntitySpace", value); }
	}

	// m_vLerpToNewPosEndInPathEntitySpace
	[SchemaMember("CFuncMover", "m_vLerpToNewPosEndInPathEntitySpace")]
	public Vector3 LerpToNewPosEndInPathEntitySpace
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CFuncMover", "m_vLerpToNewPosEndInPathEntitySpace"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CFuncMover", "m_vLerpToNewPosEndInPathEntitySpace", value); }
	}

	// m_flLerpToPositionT
	[SchemaMember("CFuncMover", "m_flLerpToPositionT")]
	public float LerpToPositionT
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flLerpToPositionT"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flLerpToPositionT", value); }
	}

	// m_flLerpToPositionDeltaT
	[SchemaMember("CFuncMover", "m_flLerpToPositionDeltaT")]
	public float LerpToPositionDeltaT
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flLerpToPositionDeltaT"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flLerpToPositionDeltaT", value); }
	}

	// m_OnLerpToPositionComplete
	[SchemaMember("CFuncMover", "m_OnLerpToPositionComplete")]
	public CEntityIOOutput OnLerpToPositionComplete => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMover", "m_OnLerpToPositionComplete");

	// m_bIsPaused
	[SchemaMember("CFuncMover", "m_bIsPaused")]
	public bool IsPaused
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bIsPaused"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bIsPaused", value); }
	}

	// m_eTransitionedToPathNodeAction
	[SchemaMember("CFuncMover", "m_eTransitionedToPathNodeAction")]
	public CFuncMoverTransitionToPathNodeAction_t TransitionedToPathNodeAction
	{
		get { return Schema.GetValueType<CFuncMoverTransitionToPathNodeAction_t>(this.Handle, "CFuncMover", "m_eTransitionedToPathNodeAction"); }
		set { Schema.SetValueType<CFuncMoverTransitionToPathNodeAction_t>(this.Handle, "CFuncMover", "m_eTransitionedToPathNodeAction", value); }
	}

	// m_nDelayedTeleportToNode
	[SchemaMember("CFuncMover", "m_nDelayedTeleportToNode")]
	public Int32 DelayedTeleportToNode
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CFuncMover", "m_nDelayedTeleportToNode"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CFuncMover", "m_nDelayedTeleportToNode", value); }
	}

	// m_bIsVerboseLogging
	[SchemaMember("CFuncMover", "m_bIsVerboseLogging")]
	public bool IsVerboseLogging
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bIsVerboseLogging"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bIsVerboseLogging", value); }
	}

	// m_hFollowEntity
	[SchemaMember("CFuncMover", "m_hFollowEntity")]
	public CHandle<CBaseEntity> FollowEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CFuncMover", "m_hFollowEntity");

	// m_flFollowDistance
	[SchemaMember("CFuncMover", "m_flFollowDistance")]
	public float FollowDistance
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flFollowDistance"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flFollowDistance", value); }
	}

	// m_flFollowMinimumSpeed
	[SchemaMember("CFuncMover", "m_flFollowMinimumSpeed")]
	public float FollowMinimumSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flFollowMinimumSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flFollowMinimumSpeed", value); }
	}

	// m_flCurFollowEntityT
	[SchemaMember("CFuncMover", "m_flCurFollowEntityT")]
	public float CurFollowEntityT
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flCurFollowEntityT"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flCurFollowEntityT", value); }
	}

	// m_flCurFollowSpeed
	[SchemaMember("CFuncMover", "m_flCurFollowSpeed")]
	public float CurFollowSpeed
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMover", "m_flCurFollowSpeed"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMover", "m_flCurFollowSpeed", value); }
	}

	// m_strOrientationFaceEntityName
	[SchemaMember("CFuncMover", "m_strOrientationFaceEntityName")]
	public string StrOrientationFaceEntityName
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMover", "m_strOrientationFaceEntityName"); }
		set { Schema.SetString(this.Handle, "CFuncMover", "m_strOrientationFaceEntityName", value); }
	}

	// m_hOrientationFaceEntity
	[SchemaMember("CFuncMover", "m_hOrientationFaceEntity")]
	public CHandle<CBaseEntity> OrientationFaceEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CFuncMover", "m_hOrientationFaceEntity");

	// m_OnStart
	[SchemaMember("CFuncMover", "m_OnStart")]
	public CEntityIOOutput OnStart => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMover", "m_OnStart");

	// m_OnStartForward
	[SchemaMember("CFuncMover", "m_OnStartForward")]
	public CEntityIOOutput OnStartForward => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMover", "m_OnStartForward");

	// m_OnStartReverse
	[SchemaMember("CFuncMover", "m_OnStartReverse")]
	public CEntityIOOutput OnStartReverse => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMover", "m_OnStartReverse");

	// m_OnStop
	[SchemaMember("CFuncMover", "m_OnStop")]
	public CEntityIOOutput OnStop => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMover", "m_OnStop");

	// m_OnStopped
	[SchemaMember("CFuncMover", "m_OnStopped")]
	public CEntityIOOutput OnStopped => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMover", "m_OnStopped");

	// m_bNextNodeReturnsCurrent
	[SchemaMember("CFuncMover", "m_bNextNodeReturnsCurrent")]
	public bool NextNodeReturnsCurrent
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bNextNodeReturnsCurrent"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bNextNodeReturnsCurrent", value); }
	}

	// m_bStartedMoving
	[SchemaMember("CFuncMover", "m_bStartedMoving")]
	public bool StartedMoving
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMover", "m_bStartedMoving"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMover", "m_bStartedMoving", value); }
	}

	// m_eFollowEntityDirection
	[SchemaMember("CFuncMover", "m_eFollowEntityDirection")]
	public CFuncMoverFollowEntityDirection_t FollowEntityDirection
	{
		get { return Schema.GetValueType<CFuncMoverFollowEntityDirection_t>(this.Handle, "CFuncMover", "m_eFollowEntityDirection"); }
		set { Schema.SetValueType<CFuncMoverFollowEntityDirection_t>(this.Handle, "CFuncMover", "m_eFollowEntityDirection", value); }
	}

}
