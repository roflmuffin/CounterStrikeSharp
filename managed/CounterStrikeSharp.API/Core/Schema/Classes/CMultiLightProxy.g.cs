// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CMultiLightProxy : CLogicalEntity
{
    public CMultiLightProxy (IntPtr pointer) : base(pointer) {}

	// m_iszLightNameFilter
	[SchemaMember("CMultiLightProxy", "m_iszLightNameFilter")]
	public string LightNameFilter
	{
		get { return Schema.GetUtf8String(this.Handle, "CMultiLightProxy", "m_iszLightNameFilter"); }
		set { Schema.SetString(this.Handle, "CMultiLightProxy", "m_iszLightNameFilter", value); }
	}

	// m_iszLightClassFilter
	[SchemaMember("CMultiLightProxy", "m_iszLightClassFilter")]
	public string LightClassFilter
	{
		get { return Schema.GetUtf8String(this.Handle, "CMultiLightProxy", "m_iszLightClassFilter"); }
		set { Schema.SetString(this.Handle, "CMultiLightProxy", "m_iszLightClassFilter", value); }
	}

	// m_flLightRadiusFilter
	[SchemaMember("CMultiLightProxy", "m_flLightRadiusFilter")]
	public float LightRadiusFilter
	{
		get { return Schema.GetValueType<float>(this.Handle, "CMultiLightProxy", "m_flLightRadiusFilter"); }
		set { Schema.SetValueType<float>(this.Handle, "CMultiLightProxy", "m_flLightRadiusFilter", value); }
	}

	// m_flBrightnessDelta
	[SchemaMember("CMultiLightProxy", "m_flBrightnessDelta")]
	public float BrightnessDelta
	{
		get { return Schema.GetValueType<float>(this.Handle, "CMultiLightProxy", "m_flBrightnessDelta"); }
		set { Schema.SetValueType<float>(this.Handle, "CMultiLightProxy", "m_flBrightnessDelta", value); }
	}

	// m_bPerformScreenFade
	[SchemaMember("CMultiLightProxy", "m_bPerformScreenFade")]
	public bool PerformScreenFade
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CMultiLightProxy", "m_bPerformScreenFade"); }
		set { Schema.SetValueType<bool>(this.Handle, "CMultiLightProxy", "m_bPerformScreenFade", value); }
	}

	// m_flTargetBrightnessMultiplier
	[SchemaMember("CMultiLightProxy", "m_flTargetBrightnessMultiplier")]
	public float TargetBrightnessMultiplier
	{
		get { return Schema.GetValueType<float>(this.Handle, "CMultiLightProxy", "m_flTargetBrightnessMultiplier"); }
		set { Schema.SetValueType<float>(this.Handle, "CMultiLightProxy", "m_flTargetBrightnessMultiplier", value); }
	}

	// m_flCurrentBrightnessMultiplier
	[SchemaMember("CMultiLightProxy", "m_flCurrentBrightnessMultiplier")]
	public float CurrentBrightnessMultiplier
	{
		get { return Schema.GetValueType<float>(this.Handle, "CMultiLightProxy", "m_flCurrentBrightnessMultiplier"); }
		set { Schema.SetValueType<float>(this.Handle, "CMultiLightProxy", "m_flCurrentBrightnessMultiplier", value); }
	}

	// m_vecLights
	[SchemaMember("CMultiLightProxy", "m_vecLights")]
	public NetworkedVector<CHandle<CLightEntity>> Lights => Schema.GetDeclaredClass<NetworkedVector<CHandle<CLightEntity>>>(this.Handle, "CMultiLightProxy", "m_vecLights");

}
