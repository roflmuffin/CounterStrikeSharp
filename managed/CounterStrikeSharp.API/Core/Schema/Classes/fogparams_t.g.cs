// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class fogparams_t : NativeObject
{
    public fogparams_t (IntPtr pointer) : base(pointer) {}

	// dirPrimary
	[SchemaMember("fogparams_t", "dirPrimary")]
	public Vector DirPrimary => Schema.GetDeclaredClass<Vector>(this.Handle, "fogparams_t", "dirPrimary");

	// colorPrimary
	[SchemaMember("fogparams_t", "colorPrimary")]
	public Color ColorPrimary
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "fogparams_t", "colorPrimary"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "fogparams_t", "colorPrimary", value); }
	}

	// colorSecondary
	[SchemaMember("fogparams_t", "colorSecondary")]
	public Color ColorSecondary
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "fogparams_t", "colorSecondary"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "fogparams_t", "colorSecondary", value); }
	}

	// colorPrimaryLerpTo
	[SchemaMember("fogparams_t", "colorPrimaryLerpTo")]
	public Color ColorPrimaryLerpTo
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "fogparams_t", "colorPrimaryLerpTo"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "fogparams_t", "colorPrimaryLerpTo", value); }
	}

	// colorSecondaryLerpTo
	[SchemaMember("fogparams_t", "colorSecondaryLerpTo")]
	public Color ColorSecondaryLerpTo
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "fogparams_t", "colorSecondaryLerpTo"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "fogparams_t", "colorSecondaryLerpTo", value); }
	}

	// start
	[SchemaMember("fogparams_t", "start")]
	public ref float Start => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "start");

	// end
	[SchemaMember("fogparams_t", "end")]
	public ref float End => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "end");

	// farz
	[SchemaMember("fogparams_t", "farz")]
	public ref float Farz => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "farz");

	// maxdensity
	[SchemaMember("fogparams_t", "maxdensity")]
	public ref float Maxdensity => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "maxdensity");

	// exponent
	[SchemaMember("fogparams_t", "exponent")]
	public ref float Exponent => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "exponent");

	// HDRColorScale
	[SchemaMember("fogparams_t", "HDRColorScale")]
	public ref float HDRColorScale => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "HDRColorScale");

	// skyboxFogFactor
	[SchemaMember("fogparams_t", "skyboxFogFactor")]
	public ref float SkyboxFogFactor => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "skyboxFogFactor");

	// skyboxFogFactorLerpTo
	[SchemaMember("fogparams_t", "skyboxFogFactorLerpTo")]
	public ref float SkyboxFogFactorLerpTo => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "skyboxFogFactorLerpTo");

	// startLerpTo
	[SchemaMember("fogparams_t", "startLerpTo")]
	public ref float StartLerpTo => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "startLerpTo");

	// endLerpTo
	[SchemaMember("fogparams_t", "endLerpTo")]
	public ref float EndLerpTo => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "endLerpTo");

	// maxdensityLerpTo
	[SchemaMember("fogparams_t", "maxdensityLerpTo")]
	public ref float MaxdensityLerpTo => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "maxdensityLerpTo");

	// lerptime
	[SchemaMember("fogparams_t", "lerptime")]
	public ref float Lerptime => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "lerptime");

	// duration
	[SchemaMember("fogparams_t", "duration")]
	public ref float Duration => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "duration");

	// blendtobackground
	[SchemaMember("fogparams_t", "blendtobackground")]
	public ref float Blendtobackground => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "blendtobackground");

	// scattering
	[SchemaMember("fogparams_t", "scattering")]
	public ref float Scattering => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "scattering");

	// locallightscale
	[SchemaMember("fogparams_t", "locallightscale")]
	public ref float Locallightscale => ref Schema.GetRef<float>(this.Handle, "fogparams_t", "locallightscale");

	// enable
	[SchemaMember("fogparams_t", "enable")]
	public ref bool Enable => ref Schema.GetRef<bool>(this.Handle, "fogparams_t", "enable");

	// blend
	[SchemaMember("fogparams_t", "blend")]
	public ref bool Blend => ref Schema.GetRef<bool>(this.Handle, "fogparams_t", "blend");

	// m_bNoReflectionFog
	[SchemaMember("fogparams_t", "m_bNoReflectionFog")]
	public ref bool NoReflectionFog => ref Schema.GetRef<bool>(this.Handle, "fogparams_t", "m_bNoReflectionFog");

	// m_bPadding
	[SchemaMember("fogparams_t", "m_bPadding")]
	public ref bool Padding => ref Schema.GetRef<bool>(this.Handle, "fogparams_t", "m_bPadding");

}
