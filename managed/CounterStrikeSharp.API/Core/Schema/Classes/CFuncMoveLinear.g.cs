// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CFuncMoveLinear : CBaseToggle
{
    public CFuncMoveLinear (IntPtr pointer) : base(pointer) {}

	// m_authoredPosition
	[SchemaMember("CFuncMoveLinear", "m_authoredPosition")]
	public MoveLinearAuthoredPos_t AuthoredPosition
	{
		get { return Schema.GetValueType<MoveLinearAuthoredPos_t>(this.Handle, "CFuncMoveLinear", "m_authoredPosition"); }
		set { Schema.SetValueType<MoveLinearAuthoredPos_t>(this.Handle, "CFuncMoveLinear", "m_authoredPosition", value); }
	}

	// m_angMoveEntitySpace
	[SchemaMember("CFuncMoveLinear", "m_angMoveEntitySpace")]
	public QAngle MoveEntitySpace
	{
		get { return Schema.GetValueType<QAngle>(this.Handle, "CFuncMoveLinear", "m_angMoveEntitySpace"); }
		set { Schema.SetValueType<QAngle>(this.Handle, "CFuncMoveLinear", "m_angMoveEntitySpace", value); }
	}

	// m_vecMoveDirParentSpace
	[SchemaMember("CFuncMoveLinear", "m_vecMoveDirParentSpace")]
	public Vector3 MoveDirParentSpace
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CFuncMoveLinear", "m_vecMoveDirParentSpace"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CFuncMoveLinear", "m_vecMoveDirParentSpace", value); }
	}

	// m_soundStart
	[SchemaMember("CFuncMoveLinear", "m_soundStart")]
	public string SoundStart
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMoveLinear", "m_soundStart"); }
		set { Schema.SetString(this.Handle, "CFuncMoveLinear", "m_soundStart", value); }
	}

	// m_soundStop
	[SchemaMember("CFuncMoveLinear", "m_soundStop")]
	public string SoundStop
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMoveLinear", "m_soundStop"); }
		set { Schema.SetString(this.Handle, "CFuncMoveLinear", "m_soundStop", value); }
	}

	// m_currentSound
	[SchemaMember("CFuncMoveLinear", "m_currentSound")]
	public string CurrentSound
	{
		get { return Schema.GetUtf8String(this.Handle, "CFuncMoveLinear", "m_currentSound"); }
		set { Schema.SetString(this.Handle, "CFuncMoveLinear", "m_currentSound", value); }
	}

	// m_flBlockDamage
	[SchemaMember("CFuncMoveLinear", "m_flBlockDamage")]
	public float BlockDamage
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMoveLinear", "m_flBlockDamage"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMoveLinear", "m_flBlockDamage", value); }
	}

	// m_flStartPosition
	[SchemaMember("CFuncMoveLinear", "m_flStartPosition")]
	public float StartPosition
	{
		get { return Schema.GetValueType<float>(this.Handle, "CFuncMoveLinear", "m_flStartPosition"); }
		set { Schema.SetValueType<float>(this.Handle, "CFuncMoveLinear", "m_flStartPosition", value); }
	}

	// m_OnFullyOpen
	[SchemaMember("CFuncMoveLinear", "m_OnFullyOpen")]
	public CEntityIOOutput OnFullyOpen => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMoveLinear", "m_OnFullyOpen");

	// m_OnFullyClosed
	[SchemaMember("CFuncMoveLinear", "m_OnFullyClosed")]
	public CEntityIOOutput OnFullyClosed => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CFuncMoveLinear", "m_OnFullyClosed");

	// m_bCreateMovableNavMesh
	[SchemaMember("CFuncMoveLinear", "m_bCreateMovableNavMesh")]
	public bool CreateMovableNavMesh
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMoveLinear", "m_bCreateMovableNavMesh"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMoveLinear", "m_bCreateMovableNavMesh", value); }
	}

	// m_bAllowMovableNavMeshDockingOnEntireEntity
	[SchemaMember("CFuncMoveLinear", "m_bAllowMovableNavMeshDockingOnEntireEntity")]
	public bool AllowMovableNavMeshDockingOnEntireEntity
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMoveLinear", "m_bAllowMovableNavMeshDockingOnEntireEntity"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMoveLinear", "m_bAllowMovableNavMeshDockingOnEntireEntity", value); }
	}

	// m_bCreateNavObstacle
	[SchemaMember("CFuncMoveLinear", "m_bCreateNavObstacle")]
	public bool CreateNavObstacle
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CFuncMoveLinear", "m_bCreateNavObstacle"); }
		set { Schema.SetValueType<bool>(this.Handle, "CFuncMoveLinear", "m_bCreateNavObstacle", value); }
	}

}
