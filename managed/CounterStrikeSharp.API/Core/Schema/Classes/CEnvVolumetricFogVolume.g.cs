// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CEnvVolumetricFogVolume : CBaseEntity
{
    public CEnvVolumetricFogVolume (IntPtr pointer) : base(pointer) {}

	// m_bActive
	[SchemaMember("CEnvVolumetricFogVolume", "m_bActive")]
	public bool Active
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bActive"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bActive", value); }
	}

	// m_vBoxMins
	[SchemaMember("CEnvVolumetricFogVolume", "m_vBoxMins")]
	public Vector3 BoxMins
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CEnvVolumetricFogVolume", "m_vBoxMins"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CEnvVolumetricFogVolume", "m_vBoxMins", value); }
	}

	// m_vBoxMaxs
	[SchemaMember("CEnvVolumetricFogVolume", "m_vBoxMaxs")]
	public Vector3 BoxMaxs
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CEnvVolumetricFogVolume", "m_vBoxMaxs"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CEnvVolumetricFogVolume", "m_vBoxMaxs", value); }
	}

	// m_bStartDisabled
	[SchemaMember("CEnvVolumetricFogVolume", "m_bStartDisabled")]
	public bool StartDisabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bStartDisabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bStartDisabled", value); }
	}

	// m_bIndirectUseLPVs
	[SchemaMember("CEnvVolumetricFogVolume", "m_bIndirectUseLPVs")]
	public bool IndirectUseLPVs
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bIndirectUseLPVs"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bIndirectUseLPVs", value); }
	}

	// m_flStrength
	[SchemaMember("CEnvVolumetricFogVolume", "m_flStrength")]
	public float Strength
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_flStrength"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_flStrength", value); }
	}

	// m_nFalloffShape
	[SchemaMember("CEnvVolumetricFogVolume", "m_nFalloffShape")]
	public Int32 FalloffShape
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CEnvVolumetricFogVolume", "m_nFalloffShape"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CEnvVolumetricFogVolume", "m_nFalloffShape", value); }
	}

	// m_flFalloffExponent
	[SchemaMember("CEnvVolumetricFogVolume", "m_flFalloffExponent")]
	public float FalloffExponent
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_flFalloffExponent"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_flFalloffExponent", value); }
	}

	// m_flHeightFogDepth
	[SchemaMember("CEnvVolumetricFogVolume", "m_flHeightFogDepth")]
	public float HeightFogDepth
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_flHeightFogDepth"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_flHeightFogDepth", value); }
	}

	// m_fHeightFogEdgeWidth
	[SchemaMember("CEnvVolumetricFogVolume", "m_fHeightFogEdgeWidth")]
	public float HeightFogEdgeWidth
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_fHeightFogEdgeWidth"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_fHeightFogEdgeWidth", value); }
	}

	// m_fIndirectLightStrength
	[SchemaMember("CEnvVolumetricFogVolume", "m_fIndirectLightStrength")]
	public float IndirectLightStrength
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_fIndirectLightStrength"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_fIndirectLightStrength", value); }
	}

	// m_fSunLightStrength
	[SchemaMember("CEnvVolumetricFogVolume", "m_fSunLightStrength")]
	public float SunLightStrength
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_fSunLightStrength"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_fSunLightStrength", value); }
	}

	// m_fNoiseStrength
	[SchemaMember("CEnvVolumetricFogVolume", "m_fNoiseStrength")]
	public float NoiseStrength
	{
		get { return Schema.GetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_fNoiseStrength"); }
		set { Schema.SetValueType<float>(this.Handle, "CEnvVolumetricFogVolume", "m_fNoiseStrength", value); }
	}

	// m_TintColor
	[SchemaMember("CEnvVolumetricFogVolume", "m_TintColor")]
	public Color TintColor
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CEnvVolumetricFogVolume", "m_TintColor"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CEnvVolumetricFogVolume", "m_TintColor", value); }
	}

	// m_bOverrideTintColor
	[SchemaMember("CEnvVolumetricFogVolume", "m_bOverrideTintColor")]
	public bool OverrideTintColor
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bOverrideTintColor"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bOverrideTintColor", value); }
	}

	// m_bOverrideIndirectLightStrength
	[SchemaMember("CEnvVolumetricFogVolume", "m_bOverrideIndirectLightStrength")]
	public bool OverrideIndirectLightStrength
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bOverrideIndirectLightStrength"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bOverrideIndirectLightStrength", value); }
	}

	// m_bOverrideSunLightStrength
	[SchemaMember("CEnvVolumetricFogVolume", "m_bOverrideSunLightStrength")]
	public bool OverrideSunLightStrength
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bOverrideSunLightStrength"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bOverrideSunLightStrength", value); }
	}

	// m_bOverrideNoiseStrength
	[SchemaMember("CEnvVolumetricFogVolume", "m_bOverrideNoiseStrength")]
	public bool OverrideNoiseStrength
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bOverrideNoiseStrength"); }
		set { Schema.SetValueType<bool>(this.Handle, "CEnvVolumetricFogVolume", "m_bOverrideNoiseStrength", value); }
	}

	public void ActivePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_bActive");
	public void BoxMinsPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_vBoxMins");
	public void BoxMaxsPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_vBoxMaxs");
	public void StartDisabledPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_bStartDisabled");
	public void IndirectUseLPVsPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_bIndirectUseLPVs");
	public void StrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_flStrength");
	public void FalloffShapePropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_nFalloffShape");
	public void FalloffExponentPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_flFalloffExponent");
	public void HeightFogDepthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_flHeightFogDepth");
	public void HeightFogEdgeWidthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_fHeightFogEdgeWidth");
	public void IndirectLightStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_fIndirectLightStrength");
	public void SunLightStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_fSunLightStrength");
	public void NoiseStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_fNoiseStrength");
	public void TintColorPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_TintColor");
	public void OverrideTintColorPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_bOverrideTintColor");
	public void OverrideIndirectLightStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_bOverrideIndirectLightStrength");
	public void OverrideSunLightStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_bOverrideSunLightStrength");
	public void OverrideNoiseStrengthPropertyChanged() => Utilities.SetStateChanged(this, "CEnvVolumetricFogVolume", "m_bOverrideNoiseStrength");
}
