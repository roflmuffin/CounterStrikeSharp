// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CBaseToggle : CBaseModelEntity
{
    public CBaseToggle (IntPtr pointer) : base(pointer) {}

	// m_toggle_state
	[SchemaMember("CBaseToggle", "m_toggle_state")]
	public ref TOGGLE_STATE Toggle_state => ref Schema.GetRef<TOGGLE_STATE>(this.Handle, "CBaseToggle", "m_toggle_state");

	// m_flMoveDistance
	[SchemaMember("CBaseToggle", "m_flMoveDistance")]
	public ref float MoveDistance => ref Schema.GetRef<float>(this.Handle, "CBaseToggle", "m_flMoveDistance");

	// m_flWait
	[SchemaMember("CBaseToggle", "m_flWait")]
	public ref float Wait => ref Schema.GetRef<float>(this.Handle, "CBaseToggle", "m_flWait");

	// m_flLip
	[SchemaMember("CBaseToggle", "m_flLip")]
	public ref float Lip => ref Schema.GetRef<float>(this.Handle, "CBaseToggle", "m_flLip");

	// m_bAlwaysFireBlockedOutputs
	[SchemaMember("CBaseToggle", "m_bAlwaysFireBlockedOutputs")]
	public ref bool AlwaysFireBlockedOutputs => ref Schema.GetRef<bool>(this.Handle, "CBaseToggle", "m_bAlwaysFireBlockedOutputs");

	// m_vecPosition1
	[SchemaMember("CBaseToggle", "m_vecPosition1")]
	public Vector Position1 => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseToggle", "m_vecPosition1");

	// m_vecPosition2
	[SchemaMember("CBaseToggle", "m_vecPosition2")]
	public Vector Position2 => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseToggle", "m_vecPosition2");

	// m_vecMoveAng
	[SchemaMember("CBaseToggle", "m_vecMoveAng")]
	public QAngle MoveAng => Schema.GetDeclaredClass<QAngle>(this.Handle, "CBaseToggle", "m_vecMoveAng");

	// m_vecAngle1
	[SchemaMember("CBaseToggle", "m_vecAngle1")]
	public QAngle Angle1 => Schema.GetDeclaredClass<QAngle>(this.Handle, "CBaseToggle", "m_vecAngle1");

	// m_vecAngle2
	[SchemaMember("CBaseToggle", "m_vecAngle2")]
	public QAngle Angle2 => Schema.GetDeclaredClass<QAngle>(this.Handle, "CBaseToggle", "m_vecAngle2");

	// m_flHeight
	[SchemaMember("CBaseToggle", "m_flHeight")]
	public ref float Height => ref Schema.GetRef<float>(this.Handle, "CBaseToggle", "m_flHeight");

	// m_hActivator
	[SchemaMember("CBaseToggle", "m_hActivator")]
	public CHandle<CBaseEntity> Activator => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CBaseToggle", "m_hActivator");

	// m_vecFinalDest
	[SchemaMember("CBaseToggle", "m_vecFinalDest")]
	public Vector FinalDest => Schema.GetDeclaredClass<Vector>(this.Handle, "CBaseToggle", "m_vecFinalDest");

	// m_vecFinalAngle
	[SchemaMember("CBaseToggle", "m_vecFinalAngle")]
	public QAngle FinalAngle => Schema.GetDeclaredClass<QAngle>(this.Handle, "CBaseToggle", "m_vecFinalAngle");

	// m_movementType
	[SchemaMember("CBaseToggle", "m_movementType")]
	public ref Int32 MovementType => ref Schema.GetRef<Int32>(this.Handle, "CBaseToggle", "m_movementType");

	// m_sMaster
	[SchemaMember("CBaseToggle", "m_sMaster")]
	public string Master
	{
		get { return Schema.GetUtf8String(this.Handle, "CBaseToggle", "m_sMaster"); }
		set { Schema.SetString(this.Handle, "CBaseToggle", "m_sMaster", value); }
	}

}
