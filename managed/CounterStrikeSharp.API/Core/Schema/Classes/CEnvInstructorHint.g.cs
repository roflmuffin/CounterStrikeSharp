// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CEnvInstructorHint : CPointEntity
{
    public CEnvInstructorHint (IntPtr pointer) : base(pointer) {}

	// m_iszName
	[SchemaMember("CEnvInstructorHint", "m_iszName")]
	public string Name
	{
		get { return Schema.GetUtf8String(this.Handle, "CEnvInstructorHint", "m_iszName"); }
		set { Schema.SetString(this.Handle, "CEnvInstructorHint", "m_iszName", value); }
	}

	// m_iszReplace_Key
	[SchemaMember("CEnvInstructorHint", "m_iszReplace_Key")]
	public string Replace_Key
	{
		get { return Schema.GetUtf8String(this.Handle, "CEnvInstructorHint", "m_iszReplace_Key"); }
		set { Schema.SetString(this.Handle, "CEnvInstructorHint", "m_iszReplace_Key", value); }
	}

	// m_iszHintTargetEntity
	[SchemaMember("CEnvInstructorHint", "m_iszHintTargetEntity")]
	public string HintTargetEntity
	{
		get { return Schema.GetUtf8String(this.Handle, "CEnvInstructorHint", "m_iszHintTargetEntity"); }
		set { Schema.SetString(this.Handle, "CEnvInstructorHint", "m_iszHintTargetEntity", value); }
	}

	// m_iTimeout
	[SchemaMember("CEnvInstructorHint", "m_iTimeout")]
	public ref Int32 Timeout => ref Schema.GetRef<Int32>(this.Handle, "CEnvInstructorHint", "m_iTimeout");

	// m_iDisplayLimit
	[SchemaMember("CEnvInstructorHint", "m_iDisplayLimit")]
	public ref Int32 DisplayLimit => ref Schema.GetRef<Int32>(this.Handle, "CEnvInstructorHint", "m_iDisplayLimit");

	// m_iszIcon_Onscreen
	[SchemaMember("CEnvInstructorHint", "m_iszIcon_Onscreen")]
	public string Icon_Onscreen
	{
		get { return Schema.GetUtf8String(this.Handle, "CEnvInstructorHint", "m_iszIcon_Onscreen"); }
		set { Schema.SetString(this.Handle, "CEnvInstructorHint", "m_iszIcon_Onscreen", value); }
	}

	// m_iszIcon_Offscreen
	[SchemaMember("CEnvInstructorHint", "m_iszIcon_Offscreen")]
	public string Icon_Offscreen
	{
		get { return Schema.GetUtf8String(this.Handle, "CEnvInstructorHint", "m_iszIcon_Offscreen"); }
		set { Schema.SetString(this.Handle, "CEnvInstructorHint", "m_iszIcon_Offscreen", value); }
	}

	// m_iszCaption
	[SchemaMember("CEnvInstructorHint", "m_iszCaption")]
	public string Caption
	{
		get { return Schema.GetUtf8String(this.Handle, "CEnvInstructorHint", "m_iszCaption"); }
		set { Schema.SetString(this.Handle, "CEnvInstructorHint", "m_iszCaption", value); }
	}

	// m_iszActivatorCaption
	[SchemaMember("CEnvInstructorHint", "m_iszActivatorCaption")]
	public string ActivatorCaption
	{
		get { return Schema.GetUtf8String(this.Handle, "CEnvInstructorHint", "m_iszActivatorCaption"); }
		set { Schema.SetString(this.Handle, "CEnvInstructorHint", "m_iszActivatorCaption", value); }
	}

	// m_Color
	[SchemaMember("CEnvInstructorHint", "m_Color")]
	public Color Color
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CEnvInstructorHint", "m_Color"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CEnvInstructorHint", "m_Color", value); }
	}

	// m_fIconOffset
	[SchemaMember("CEnvInstructorHint", "m_fIconOffset")]
	public ref float IconOffset => ref Schema.GetRef<float>(this.Handle, "CEnvInstructorHint", "m_fIconOffset");

	// m_fRange
	[SchemaMember("CEnvInstructorHint", "m_fRange")]
	public ref float Range => ref Schema.GetRef<float>(this.Handle, "CEnvInstructorHint", "m_fRange");

	// m_iPulseOption
	[SchemaMember("CEnvInstructorHint", "m_iPulseOption")]
	public ref byte PulseOption => ref Schema.GetRef<byte>(this.Handle, "CEnvInstructorHint", "m_iPulseOption");

	// m_iAlphaOption
	[SchemaMember("CEnvInstructorHint", "m_iAlphaOption")]
	public ref byte AlphaOption => ref Schema.GetRef<byte>(this.Handle, "CEnvInstructorHint", "m_iAlphaOption");

	// m_iShakeOption
	[SchemaMember("CEnvInstructorHint", "m_iShakeOption")]
	public ref byte ShakeOption => ref Schema.GetRef<byte>(this.Handle, "CEnvInstructorHint", "m_iShakeOption");

	// m_bStatic
	[SchemaMember("CEnvInstructorHint", "m_bStatic")]
	public ref bool Static => ref Schema.GetRef<bool>(this.Handle, "CEnvInstructorHint", "m_bStatic");

	// m_bNoOffscreen
	[SchemaMember("CEnvInstructorHint", "m_bNoOffscreen")]
	public ref bool NoOffscreen => ref Schema.GetRef<bool>(this.Handle, "CEnvInstructorHint", "m_bNoOffscreen");

	// m_bForceCaption
	[SchemaMember("CEnvInstructorHint", "m_bForceCaption")]
	public ref bool ForceCaption => ref Schema.GetRef<bool>(this.Handle, "CEnvInstructorHint", "m_bForceCaption");

	// m_iInstanceType
	[SchemaMember("CEnvInstructorHint", "m_iInstanceType")]
	public ref Int32 InstanceType => ref Schema.GetRef<Int32>(this.Handle, "CEnvInstructorHint", "m_iInstanceType");

	// m_bSuppressRest
	[SchemaMember("CEnvInstructorHint", "m_bSuppressRest")]
	public ref bool SuppressRest => ref Schema.GetRef<bool>(this.Handle, "CEnvInstructorHint", "m_bSuppressRest");

	// m_iszBinding
	[SchemaMember("CEnvInstructorHint", "m_iszBinding")]
	public string Binding
	{
		get { return Schema.GetUtf8String(this.Handle, "CEnvInstructorHint", "m_iszBinding"); }
		set { Schema.SetString(this.Handle, "CEnvInstructorHint", "m_iszBinding", value); }
	}

	// m_bAllowNoDrawTarget
	[SchemaMember("CEnvInstructorHint", "m_bAllowNoDrawTarget")]
	public ref bool AllowNoDrawTarget => ref Schema.GetRef<bool>(this.Handle, "CEnvInstructorHint", "m_bAllowNoDrawTarget");

	// m_bAutoStart
	[SchemaMember("CEnvInstructorHint", "m_bAutoStart")]
	public ref bool AutoStart => ref Schema.GetRef<bool>(this.Handle, "CEnvInstructorHint", "m_bAutoStart");

	// m_bLocalPlayerOnly
	[SchemaMember("CEnvInstructorHint", "m_bLocalPlayerOnly")]
	public ref bool LocalPlayerOnly => ref Schema.GetRef<bool>(this.Handle, "CEnvInstructorHint", "m_bLocalPlayerOnly");

}
