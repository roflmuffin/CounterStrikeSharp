// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CScriptedSequence : CBaseEntity
{
    public CScriptedSequence (IntPtr pointer) : base(pointer) {}

	// m_iszEntry
	[SchemaMember("CScriptedSequence", "m_iszEntry")]
	public string Entry
	{
		get { return Schema.GetUtf8String(this.Handle, "CScriptedSequence", "m_iszEntry"); }
		set { Schema.SetString(this.Handle, "CScriptedSequence", "m_iszEntry", value); }
	}

	// m_iszPreIdle
	[SchemaMember("CScriptedSequence", "m_iszPreIdle")]
	public string PreIdle
	{
		get { return Schema.GetUtf8String(this.Handle, "CScriptedSequence", "m_iszPreIdle"); }
		set { Schema.SetString(this.Handle, "CScriptedSequence", "m_iszPreIdle", value); }
	}

	// m_iszPlay
	[SchemaMember("CScriptedSequence", "m_iszPlay")]
	public string Play
	{
		get { return Schema.GetUtf8String(this.Handle, "CScriptedSequence", "m_iszPlay"); }
		set { Schema.SetString(this.Handle, "CScriptedSequence", "m_iszPlay", value); }
	}

	// m_iszPostIdle
	[SchemaMember("CScriptedSequence", "m_iszPostIdle")]
	public string PostIdle
	{
		get { return Schema.GetUtf8String(this.Handle, "CScriptedSequence", "m_iszPostIdle"); }
		set { Schema.SetString(this.Handle, "CScriptedSequence", "m_iszPostIdle", value); }
	}

	// m_iszModifierToAddOnPlay
	[SchemaMember("CScriptedSequence", "m_iszModifierToAddOnPlay")]
	public string ModifierToAddOnPlay
	{
		get { return Schema.GetUtf8String(this.Handle, "CScriptedSequence", "m_iszModifierToAddOnPlay"); }
		set { Schema.SetString(this.Handle, "CScriptedSequence", "m_iszModifierToAddOnPlay", value); }
	}

	// m_iszNextScript
	[SchemaMember("CScriptedSequence", "m_iszNextScript")]
	public string NextScript
	{
		get { return Schema.GetUtf8String(this.Handle, "CScriptedSequence", "m_iszNextScript"); }
		set { Schema.SetString(this.Handle, "CScriptedSequence", "m_iszNextScript", value); }
	}

	// m_iszEntity
	[SchemaMember("CScriptedSequence", "m_iszEntity")]
	public string Entity
	{
		get { return Schema.GetUtf8String(this.Handle, "CScriptedSequence", "m_iszEntity"); }
		set { Schema.SetString(this.Handle, "CScriptedSequence", "m_iszEntity", value); }
	}

	// m_iszSyncGroup
	[SchemaMember("CScriptedSequence", "m_iszSyncGroup")]
	public string SyncGroup
	{
		get { return Schema.GetUtf8String(this.Handle, "CScriptedSequence", "m_iszSyncGroup"); }
		set { Schema.SetString(this.Handle, "CScriptedSequence", "m_iszSyncGroup", value); }
	}

	// m_nMoveTo
	[SchemaMember("CScriptedSequence", "m_nMoveTo")]
	public ref ScriptedMoveTo_t MoveTo => ref Schema.GetRef<ScriptedMoveTo_t>(this.Handle, "CScriptedSequence", "m_nMoveTo");

	// m_bIsPlayingPreIdle
	[SchemaMember("CScriptedSequence", "m_bIsPlayingPreIdle")]
	public ref bool IsPlayingPreIdle => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bIsPlayingPreIdle");

	// m_bIsPlayingEntry
	[SchemaMember("CScriptedSequence", "m_bIsPlayingEntry")]
	public ref bool IsPlayingEntry => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bIsPlayingEntry");

	// m_bIsPlayingAction
	[SchemaMember("CScriptedSequence", "m_bIsPlayingAction")]
	public ref bool IsPlayingAction => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bIsPlayingAction");

	// m_bIsPlayingPostIdle
	[SchemaMember("CScriptedSequence", "m_bIsPlayingPostIdle")]
	public ref bool IsPlayingPostIdle => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bIsPlayingPostIdle");

	// m_bLoopPreIdleSequence
	[SchemaMember("CScriptedSequence", "m_bLoopPreIdleSequence")]
	public ref bool LoopPreIdleSequence => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bLoopPreIdleSequence");

	// m_bLoopActionSequence
	[SchemaMember("CScriptedSequence", "m_bLoopActionSequence")]
	public ref bool LoopActionSequence => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bLoopActionSequence");

	// m_bLoopPostIdleSequence
	[SchemaMember("CScriptedSequence", "m_bLoopPostIdleSequence")]
	public ref bool LoopPostIdleSequence => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bLoopPostIdleSequence");

	// m_bSynchPostIdles
	[SchemaMember("CScriptedSequence", "m_bSynchPostIdles")]
	public ref bool SynchPostIdles => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bSynchPostIdles");

	// m_bIgnoreLookAt
	[SchemaMember("CScriptedSequence", "m_bIgnoreLookAt")]
	public ref bool IgnoreLookAt => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bIgnoreLookAt");

	// m_bIgnoreGravity
	[SchemaMember("CScriptedSequence", "m_bIgnoreGravity")]
	public ref bool IgnoreGravity => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bIgnoreGravity");

	// m_bDisableNPCCollisions
	[SchemaMember("CScriptedSequence", "m_bDisableNPCCollisions")]
	public ref bool DisableNPCCollisions => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bDisableNPCCollisions");

	// m_bKeepAnimgraphLockedPost
	[SchemaMember("CScriptedSequence", "m_bKeepAnimgraphLockedPost")]
	public ref bool KeepAnimgraphLockedPost => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bKeepAnimgraphLockedPost");

	// m_bDontAddModifiers
	[SchemaMember("CScriptedSequence", "m_bDontAddModifiers")]
	public ref bool DontAddModifiers => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bDontAddModifiers");

	// m_flRadius
	[SchemaMember("CScriptedSequence", "m_flRadius")]
	public ref float Radius => ref Schema.GetRef<float>(this.Handle, "CScriptedSequence", "m_flRadius");

	// m_flRepeat
	[SchemaMember("CScriptedSequence", "m_flRepeat")]
	public ref float Repeat => ref Schema.GetRef<float>(this.Handle, "CScriptedSequence", "m_flRepeat");

	// m_flPlayAnimFadeInTime
	[SchemaMember("CScriptedSequence", "m_flPlayAnimFadeInTime")]
	public ref float PlayAnimFadeInTime => ref Schema.GetRef<float>(this.Handle, "CScriptedSequence", "m_flPlayAnimFadeInTime");

	// m_flMoveInterpTime
	[SchemaMember("CScriptedSequence", "m_flMoveInterpTime")]
	public ref float MoveInterpTime => ref Schema.GetRef<float>(this.Handle, "CScriptedSequence", "m_flMoveInterpTime");

	// m_flAngRate
	[SchemaMember("CScriptedSequence", "m_flAngRate")]
	public ref float AngRate => ref Schema.GetRef<float>(this.Handle, "CScriptedSequence", "m_flAngRate");

	// m_nNotReadySequenceCount
	[SchemaMember("CScriptedSequence", "m_nNotReadySequenceCount")]
	public ref Int32 NotReadySequenceCount => ref Schema.GetRef<Int32>(this.Handle, "CScriptedSequence", "m_nNotReadySequenceCount");

	// m_startTime
	[SchemaMember("CScriptedSequence", "m_startTime")]
	public ref float StartTime => ref Schema.GetRef<float>(this.Handle, "CScriptedSequence", "m_startTime");

	// m_bWaitForBeginSequence
	[SchemaMember("CScriptedSequence", "m_bWaitForBeginSequence")]
	public ref bool WaitForBeginSequence => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bWaitForBeginSequence");

	// m_saved_effects
	[SchemaMember("CScriptedSequence", "m_saved_effects")]
	public ref Int32 Saved_effects => ref Schema.GetRef<Int32>(this.Handle, "CScriptedSequence", "m_saved_effects");

	// m_savedFlags
	[SchemaMember("CScriptedSequence", "m_savedFlags")]
	public ref Int32 SavedFlags => ref Schema.GetRef<Int32>(this.Handle, "CScriptedSequence", "m_savedFlags");

	// m_savedCollisionGroup
	[SchemaMember("CScriptedSequence", "m_savedCollisionGroup")]
	public ref Int32 SavedCollisionGroup => ref Schema.GetRef<Int32>(this.Handle, "CScriptedSequence", "m_savedCollisionGroup");

	// m_interruptable
	[SchemaMember("CScriptedSequence", "m_interruptable")]
	public ref bool Interruptable => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_interruptable");

	// m_sequenceStarted
	[SchemaMember("CScriptedSequence", "m_sequenceStarted")]
	public ref bool SequenceStarted => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_sequenceStarted");

	// m_bPositionRelativeToOtherEntity
	[SchemaMember("CScriptedSequence", "m_bPositionRelativeToOtherEntity")]
	public ref bool PositionRelativeToOtherEntity => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bPositionRelativeToOtherEntity");

	// m_hTargetEnt
	[SchemaMember("CScriptedSequence", "m_hTargetEnt")]
	public CHandle<CBaseEntity> TargetEnt => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CScriptedSequence", "m_hTargetEnt");

	// m_hNextCine
	[SchemaMember("CScriptedSequence", "m_hNextCine")]
	public CHandle<CScriptedSequence> NextCine => Schema.GetDeclaredClass<CHandle<CScriptedSequence>>(this.Handle, "CScriptedSequence", "m_hNextCine");

	// m_bThinking
	[SchemaMember("CScriptedSequence", "m_bThinking")]
	public ref bool Thinking => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bThinking");

	// m_bInitiatedSelfDelete
	[SchemaMember("CScriptedSequence", "m_bInitiatedSelfDelete")]
	public ref bool InitiatedSelfDelete => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bInitiatedSelfDelete");

	// m_bIsTeleportingDueToMoveTo
	[SchemaMember("CScriptedSequence", "m_bIsTeleportingDueToMoveTo")]
	public ref bool IsTeleportingDueToMoveTo => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bIsTeleportingDueToMoveTo");

	// m_bAllowCustomInterruptConditions
	[SchemaMember("CScriptedSequence", "m_bAllowCustomInterruptConditions")]
	public ref bool AllowCustomInterruptConditions => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bAllowCustomInterruptConditions");

	// m_hLastFoundEntity
	[SchemaMember("CScriptedSequence", "m_hLastFoundEntity")]
	public CHandle<CBaseEntity> LastFoundEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CScriptedSequence", "m_hLastFoundEntity");

	// m_hForcedTarget
	[SchemaMember("CScriptedSequence", "m_hForcedTarget")]
	public CHandle<CBaseAnimGraph> ForcedTarget => Schema.GetDeclaredClass<CHandle<CBaseAnimGraph>>(this.Handle, "CScriptedSequence", "m_hForcedTarget");

	// m_bDontCancelOtherSequences
	[SchemaMember("CScriptedSequence", "m_bDontCancelOtherSequences")]
	public ref bool DontCancelOtherSequences => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bDontCancelOtherSequences");

	// m_bForceSynch
	[SchemaMember("CScriptedSequence", "m_bForceSynch")]
	public ref bool ForceSynch => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bForceSynch");

	// m_bPreventUpdateYawOnFinish
	[SchemaMember("CScriptedSequence", "m_bPreventUpdateYawOnFinish")]
	public ref bool PreventUpdateYawOnFinish => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bPreventUpdateYawOnFinish");

	// m_bEnsureOnNavmeshOnFinish
	[SchemaMember("CScriptedSequence", "m_bEnsureOnNavmeshOnFinish")]
	public ref bool EnsureOnNavmeshOnFinish => ref Schema.GetRef<bool>(this.Handle, "CScriptedSequence", "m_bEnsureOnNavmeshOnFinish");

	// m_onDeathBehavior
	[SchemaMember("CScriptedSequence", "m_onDeathBehavior")]
	public ref ScriptedOnDeath_t OnDeathBehavior => ref Schema.GetRef<ScriptedOnDeath_t>(this.Handle, "CScriptedSequence", "m_onDeathBehavior");

	// m_ConflictResponse
	[SchemaMember("CScriptedSequence", "m_ConflictResponse")]
	public ref ScriptedConflictResponse_t ConflictResponse => ref Schema.GetRef<ScriptedConflictResponse_t>(this.Handle, "CScriptedSequence", "m_ConflictResponse");

	// m_OnBeginSequence
	[SchemaMember("CScriptedSequence", "m_OnBeginSequence")]
	public CEntityIOOutput OnBeginSequence => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CScriptedSequence", "m_OnBeginSequence");

	// m_OnActionStartOrLoop
	[SchemaMember("CScriptedSequence", "m_OnActionStartOrLoop")]
	public CEntityIOOutput OnActionStartOrLoop => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CScriptedSequence", "m_OnActionStartOrLoop");

	// m_OnEndSequence
	[SchemaMember("CScriptedSequence", "m_OnEndSequence")]
	public CEntityIOOutput OnEndSequence => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CScriptedSequence", "m_OnEndSequence");

	// m_OnPostIdleEndSequence
	[SchemaMember("CScriptedSequence", "m_OnPostIdleEndSequence")]
	public CEntityIOOutput OnPostIdleEndSequence => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CScriptedSequence", "m_OnPostIdleEndSequence");

	// m_OnCancelSequence
	[SchemaMember("CScriptedSequence", "m_OnCancelSequence")]
	public CEntityIOOutput OnCancelSequence => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CScriptedSequence", "m_OnCancelSequence");

	// m_OnCancelFailedSequence
	[SchemaMember("CScriptedSequence", "m_OnCancelFailedSequence")]
	public CEntityIOOutput OnCancelFailedSequence => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CScriptedSequence", "m_OnCancelFailedSequence");

	// m_OnScriptEvent
	[SchemaMember("CScriptedSequence", "m_OnScriptEvent")]
	public Span<CEntityIOOutput> OnScriptEvent => Schema.GetFixedArray<CEntityIOOutput>(this.Handle, "CScriptedSequence", "m_OnScriptEvent", 8);

	// m_matOtherToMain
	[SchemaMember("CScriptedSequence", "m_matOtherToMain")]
	public CTransform MatOtherToMain => Schema.GetDeclaredClass<CTransform>(this.Handle, "CScriptedSequence", "m_matOtherToMain");

	// m_hInteractionMainEntity
	[SchemaMember("CScriptedSequence", "m_hInteractionMainEntity")]
	public CHandle<CBaseEntity> InteractionMainEntity => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CScriptedSequence", "m_hInteractionMainEntity");

	// m_iPlayerDeathBehavior
	[SchemaMember("CScriptedSequence", "m_iPlayerDeathBehavior")]
	public ref Int32 PlayerDeathBehavior => ref Schema.GetRef<Int32>(this.Handle, "CScriptedSequence", "m_iPlayerDeathBehavior");

}
