// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPointClientUIWorldPanel : CBaseClientUIEntity
{
    public CPointClientUIWorldPanel (IntPtr pointer) : base(pointer) {}

	// m_bIgnoreInput
	[SchemaMember("CPointClientUIWorldPanel", "m_bIgnoreInput")]
	public ref bool IgnoreInput => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bIgnoreInput");

	// m_bLit
	[SchemaMember("CPointClientUIWorldPanel", "m_bLit")]
	public ref bool Lit => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bLit");

	// m_bFollowPlayerAcrossTeleport
	[SchemaMember("CPointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport")]
	public ref bool FollowPlayerAcrossTeleport => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport");

	// m_flWidth
	[SchemaMember("CPointClientUIWorldPanel", "m_flWidth")]
	public ref float Width => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flWidth");

	// m_flHeight
	[SchemaMember("CPointClientUIWorldPanel", "m_flHeight")]
	public ref float Height => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flHeight");

	// m_flDPI
	[SchemaMember("CPointClientUIWorldPanel", "m_flDPI")]
	public ref float DPI => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flDPI");

	// m_flInteractDistance
	[SchemaMember("CPointClientUIWorldPanel", "m_flInteractDistance")]
	public ref float InteractDistance => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flInteractDistance");

	// m_flDepthOffset
	[SchemaMember("CPointClientUIWorldPanel", "m_flDepthOffset")]
	public ref float DepthOffset => ref Schema.GetRef<float>(this.Handle, "CPointClientUIWorldPanel", "m_flDepthOffset");

	// m_unOwnerContext
	[SchemaMember("CPointClientUIWorldPanel", "m_unOwnerContext")]
	public ref UInt32 OwnerContext => ref Schema.GetRef<UInt32>(this.Handle, "CPointClientUIWorldPanel", "m_unOwnerContext");

	// m_unHorizontalAlign
	[SchemaMember("CPointClientUIWorldPanel", "m_unHorizontalAlign")]
	public ref UInt32 HorizontalAlign => ref Schema.GetRef<UInt32>(this.Handle, "CPointClientUIWorldPanel", "m_unHorizontalAlign");

	// m_unVerticalAlign
	[SchemaMember("CPointClientUIWorldPanel", "m_unVerticalAlign")]
	public ref UInt32 VerticalAlign => ref Schema.GetRef<UInt32>(this.Handle, "CPointClientUIWorldPanel", "m_unVerticalAlign");

	// m_unOrientation
	[SchemaMember("CPointClientUIWorldPanel", "m_unOrientation")]
	public ref UInt32 Orientation => ref Schema.GetRef<UInt32>(this.Handle, "CPointClientUIWorldPanel", "m_unOrientation");

	// m_bAllowInteractionFromAllSceneWorlds
	[SchemaMember("CPointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds")]
	public ref bool AllowInteractionFromAllSceneWorlds => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds");

	// m_vecCSSClasses
	[SchemaMember("CPointClientUIWorldPanel", "m_vecCSSClasses")]
	public NetworkedVector<string> CSSClasses => Schema.GetDeclaredClass<NetworkedVector<string>>(this.Handle, "CPointClientUIWorldPanel", "m_vecCSSClasses");

	// m_bOpaque
	[SchemaMember("CPointClientUIWorldPanel", "m_bOpaque")]
	public ref bool Opaque => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bOpaque");

	// m_bNoDepth
	[SchemaMember("CPointClientUIWorldPanel", "m_bNoDepth")]
	public ref bool NoDepth => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bNoDepth");

	// m_bRenderBackface
	[SchemaMember("CPointClientUIWorldPanel", "m_bRenderBackface")]
	public ref bool RenderBackface => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bRenderBackface");

	// m_bUseOffScreenIndicator
	[SchemaMember("CPointClientUIWorldPanel", "m_bUseOffScreenIndicator")]
	public ref bool UseOffScreenIndicator => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bUseOffScreenIndicator");

	// m_bExcludeFromSaveGames
	[SchemaMember("CPointClientUIWorldPanel", "m_bExcludeFromSaveGames")]
	public ref bool ExcludeFromSaveGames => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bExcludeFromSaveGames");

	// m_bGrabbable
	[SchemaMember("CPointClientUIWorldPanel", "m_bGrabbable")]
	public ref bool Grabbable => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bGrabbable");

	// m_bOnlyRenderToTexture
	[SchemaMember("CPointClientUIWorldPanel", "m_bOnlyRenderToTexture")]
	public ref bool OnlyRenderToTexture => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bOnlyRenderToTexture");

	// m_bDisableMipGen
	[SchemaMember("CPointClientUIWorldPanel", "m_bDisableMipGen")]
	public ref bool DisableMipGen => ref Schema.GetRef<bool>(this.Handle, "CPointClientUIWorldPanel", "m_bDisableMipGen");

	// m_nExplicitImageLayout
	[SchemaMember("CPointClientUIWorldPanel", "m_nExplicitImageLayout")]
	public ref Int32 ExplicitImageLayout => ref Schema.GetRef<Int32>(this.Handle, "CPointClientUIWorldPanel", "m_nExplicitImageLayout");

}
