// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CPointWorldText : CModelPointEntity
{
    public CPointWorldText (IntPtr pointer) : base(pointer) {}

	// m_messageText
	[SchemaMember("CPointWorldText", "m_messageText")]
	public string MessageText
	{
		get { return Schema.GetString(this.Handle, "CPointWorldText", "m_messageText"); }
		set { Schema.SetStringBytes(this.Handle, "CPointWorldText", "m_messageText", value, 512); }
	}

	// m_FontName
	[SchemaMember("CPointWorldText", "m_FontName")]
	public string FontName
	{
		get { return Schema.GetString(this.Handle, "CPointWorldText", "m_FontName"); }
		set { Schema.SetStringBytes(this.Handle, "CPointWorldText", "m_FontName", value, 64); }
	}

	// m_bEnabled
	[SchemaMember("CPointWorldText", "m_bEnabled")]
	public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CPointWorldText", "m_bEnabled");

	// m_bFullbright
	[SchemaMember("CPointWorldText", "m_bFullbright")]
	public ref bool Fullbright => ref Schema.GetRef<bool>(this.Handle, "CPointWorldText", "m_bFullbright");

	// m_flWorldUnitsPerPx
	[SchemaMember("CPointWorldText", "m_flWorldUnitsPerPx")]
	public ref float WorldUnitsPerPx => ref Schema.GetRef<float>(this.Handle, "CPointWorldText", "m_flWorldUnitsPerPx");

	// m_flFontSize
	[SchemaMember("CPointWorldText", "m_flFontSize")]
	public ref float FontSize => ref Schema.GetRef<float>(this.Handle, "CPointWorldText", "m_flFontSize");

	// m_flDepthOffset
	[SchemaMember("CPointWorldText", "m_flDepthOffset")]
	public ref float DepthOffset => ref Schema.GetRef<float>(this.Handle, "CPointWorldText", "m_flDepthOffset");

	// m_Color
	[SchemaMember("CPointWorldText", "m_Color")]
	public Color Color
	{
		get { return Schema.GetCustomMarshalledType<Color>(this.Handle, "CPointWorldText", "m_Color"); }
		set { Schema.SetCustomMarshalledType<Color>(this.Handle, "CPointWorldText", "m_Color", value); }
	}

	// m_nJustifyHorizontal
	[SchemaMember("CPointWorldText", "m_nJustifyHorizontal")]
	public ref PointWorldTextJustifyHorizontal_t JustifyHorizontal => ref Schema.GetRef<PointWorldTextJustifyHorizontal_t>(this.Handle, "CPointWorldText", "m_nJustifyHorizontal");

	// m_nJustifyVertical
	[SchemaMember("CPointWorldText", "m_nJustifyVertical")]
	public ref PointWorldTextJustifyVertical_t JustifyVertical => ref Schema.GetRef<PointWorldTextJustifyVertical_t>(this.Handle, "CPointWorldText", "m_nJustifyVertical");

	// m_nReorientMode
	[SchemaMember("CPointWorldText", "m_nReorientMode")]
	public ref PointWorldTextReorientMode_t ReorientMode => ref Schema.GetRef<PointWorldTextReorientMode_t>(this.Handle, "CPointWorldText", "m_nReorientMode");

}
