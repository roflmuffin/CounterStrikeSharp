// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CLogicRelay : CLogicalEntity
{
    public CLogicRelay (IntPtr pointer) : base(pointer) {}

	// m_bDisabled
	[SchemaMember("CLogicRelay", "m_bDisabled")]
	public bool Disabled
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CLogicRelay", "m_bDisabled"); }
		set { Schema.SetValueType<bool>(this.Handle, "CLogicRelay", "m_bDisabled", value); }
	}

	// m_bWaitForRefire
	[SchemaMember("CLogicRelay", "m_bWaitForRefire")]
	public bool WaitForRefire
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CLogicRelay", "m_bWaitForRefire"); }
		set { Schema.SetValueType<bool>(this.Handle, "CLogicRelay", "m_bWaitForRefire", value); }
	}

	// m_bTriggerOnce
	[SchemaMember("CLogicRelay", "m_bTriggerOnce")]
	public bool TriggerOnce
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CLogicRelay", "m_bTriggerOnce"); }
		set { Schema.SetValueType<bool>(this.Handle, "CLogicRelay", "m_bTriggerOnce", value); }
	}

	// m_bFastRetrigger
	[SchemaMember("CLogicRelay", "m_bFastRetrigger")]
	public bool FastRetrigger
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CLogicRelay", "m_bFastRetrigger"); }
		set { Schema.SetValueType<bool>(this.Handle, "CLogicRelay", "m_bFastRetrigger", value); }
	}

	// m_bPassthoughCaller
	[SchemaMember("CLogicRelay", "m_bPassthoughCaller")]
	public bool PassthoughCaller
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CLogicRelay", "m_bPassthoughCaller"); }
		set { Schema.SetValueType<bool>(this.Handle, "CLogicRelay", "m_bPassthoughCaller", value); }
	}

}
