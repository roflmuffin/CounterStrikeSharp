// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using System.Numerics;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CHostage : CHostageExpresserShim
{
    public CHostage (IntPtr pointer) : base(pointer) {}

	// m_OnHostageBeginGrab
	[SchemaMember("CHostage", "m_OnHostageBeginGrab")]
	public CEntityIOOutput OnHostageBeginGrab => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CHostage", "m_OnHostageBeginGrab");

	// m_OnFirstPickedUp
	[SchemaMember("CHostage", "m_OnFirstPickedUp")]
	public CEntityIOOutput OnFirstPickedUp => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CHostage", "m_OnFirstPickedUp");

	// m_OnDroppedNotRescued
	[SchemaMember("CHostage", "m_OnDroppedNotRescued")]
	public CEntityIOOutput OnDroppedNotRescued => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CHostage", "m_OnDroppedNotRescued");

	// m_OnRescued
	[SchemaMember("CHostage", "m_OnRescued")]
	public CEntityIOOutput OnRescued => Schema.GetDeclaredClass<CEntityIOOutput>(this.Handle, "CHostage", "m_OnRescued");

	// m_entitySpottedState
	[SchemaMember("CHostage", "m_entitySpottedState")]
	public EntitySpottedState_t EntitySpottedState => Schema.GetDeclaredClass<EntitySpottedState_t>(this.Handle, "CHostage", "m_entitySpottedState");

	// m_nSpotRules
	[SchemaMember("CHostage", "m_nSpotRules")]
	public Int32 SpotRules
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CHostage", "m_nSpotRules"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CHostage", "m_nSpotRules", value); }
	}

	// m_uiHostageSpawnExclusionGroupMask
	[SchemaMember("CHostage", "m_uiHostageSpawnExclusionGroupMask")]
	public UInt32 UiHostageSpawnExclusionGroupMask
	{
		get { return Schema.GetValueType<UInt32>(this.Handle, "CHostage", "m_uiHostageSpawnExclusionGroupMask"); }
		set { Schema.SetValueType<UInt32>(this.Handle, "CHostage", "m_uiHostageSpawnExclusionGroupMask", value); }
	}

	// m_nHostageSpawnRandomFactor
	[SchemaMember("CHostage", "m_nHostageSpawnRandomFactor")]
	public UInt32 HostageSpawnRandomFactor
	{
		get { return Schema.GetValueType<UInt32>(this.Handle, "CHostage", "m_nHostageSpawnRandomFactor"); }
		set { Schema.SetValueType<UInt32>(this.Handle, "CHostage", "m_nHostageSpawnRandomFactor", value); }
	}

	// m_bRemove
	[SchemaMember("CHostage", "m_bRemove")]
	public bool Remove
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_bRemove"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_bRemove", value); }
	}

	// m_vel
	[SchemaMember("CHostage", "m_vel")]
	public Vector3 Vel
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CHostage", "m_vel"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CHostage", "m_vel", value); }
	}

	// m_isRescued
	[SchemaMember("CHostage", "m_isRescued")]
	public bool IsRescued
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_isRescued"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_isRescued", value); }
	}

	// m_jumpedThisFrame
	[SchemaMember("CHostage", "m_jumpedThisFrame")]
	public bool JumpedThisFrame
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_jumpedThisFrame"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_jumpedThisFrame", value); }
	}

	// m_nHostageState
	[SchemaMember("CHostage", "m_nHostageState")]
	public Int32 HostageState
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CHostage", "m_nHostageState"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CHostage", "m_nHostageState", value); }
	}

	// m_leader
	[SchemaMember("CHostage", "m_leader")]
	public CHandle<CBaseEntity> Leader => Schema.GetDeclaredClass<CHandle<CBaseEntity>>(this.Handle, "CHostage", "m_leader");

	// m_lastLeader
	[SchemaMember("CHostage", "m_lastLeader")]
	public CHandle<CCSPlayerPawnBase> LastLeader => Schema.GetDeclaredClass<CHandle<CCSPlayerPawnBase>>(this.Handle, "CHostage", "m_lastLeader");

	// m_reuseTimer
	[SchemaMember("CHostage", "m_reuseTimer")]
	public CountdownTimer ReuseTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CHostage", "m_reuseTimer");

	// m_hasBeenUsed
	[SchemaMember("CHostage", "m_hasBeenUsed")]
	public bool HasBeenUsed
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_hasBeenUsed"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_hasBeenUsed", value); }
	}

	// m_accel
	[SchemaMember("CHostage", "m_accel")]
	public Vector3 Accel
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CHostage", "m_accel"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CHostage", "m_accel", value); }
	}

	// m_isRunning
	[SchemaMember("CHostage", "m_isRunning")]
	public bool IsRunning
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_isRunning"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_isRunning", value); }
	}

	// m_isCrouching
	[SchemaMember("CHostage", "m_isCrouching")]
	public bool IsCrouching
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_isCrouching"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_isCrouching", value); }
	}

	// m_jumpTimer
	[SchemaMember("CHostage", "m_jumpTimer")]
	public CountdownTimer JumpTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CHostage", "m_jumpTimer");

	// m_isWaitingForLeader
	[SchemaMember("CHostage", "m_isWaitingForLeader")]
	public bool IsWaitingForLeader
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_isWaitingForLeader"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_isWaitingForLeader", value); }
	}

	// m_repathTimer
	[SchemaMember("CHostage", "m_repathTimer")]
	public CountdownTimer RepathTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CHostage", "m_repathTimer");

	// m_inhibitDoorTimer
	[SchemaMember("CHostage", "m_inhibitDoorTimer")]
	public CountdownTimer InhibitDoorTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CHostage", "m_inhibitDoorTimer");

	// m_inhibitObstacleAvoidanceTimer
	[SchemaMember("CHostage", "m_inhibitObstacleAvoidanceTimer")]
	public CountdownTimer InhibitObstacleAvoidanceTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CHostage", "m_inhibitObstacleAvoidanceTimer");

	// m_wiggleTimer
	[SchemaMember("CHostage", "m_wiggleTimer")]
	public CountdownTimer WiggleTimer => Schema.GetDeclaredClass<CountdownTimer>(this.Handle, "CHostage", "m_wiggleTimer");

	// m_isAdjusted
	[SchemaMember("CHostage", "m_isAdjusted")]
	public bool IsAdjusted
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_isAdjusted"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_isAdjusted", value); }
	}

	// m_bHandsHaveBeenCut
	[SchemaMember("CHostage", "m_bHandsHaveBeenCut")]
	public bool HandsHaveBeenCut
	{
		get { return Schema.GetValueType<bool>(this.Handle, "CHostage", "m_bHandsHaveBeenCut"); }
		set { Schema.SetValueType<bool>(this.Handle, "CHostage", "m_bHandsHaveBeenCut", value); }
	}

	// m_hHostageGrabber
	[SchemaMember("CHostage", "m_hHostageGrabber")]
	public CHandle<CCSPlayerPawn> HostageGrabber => Schema.GetDeclaredClass<CHandle<CCSPlayerPawn>>(this.Handle, "CHostage", "m_hHostageGrabber");

	// m_fLastGrabTime
	[SchemaMember("CHostage", "m_fLastGrabTime")]
	public float LastGrabTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CHostage", "m_fLastGrabTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CHostage", "m_fLastGrabTime", value); }
	}

	// m_vecPositionWhenStartedDroppingToGround
	[SchemaMember("CHostage", "m_vecPositionWhenStartedDroppingToGround")]
	public Vector3 PositionWhenStartedDroppingToGround
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CHostage", "m_vecPositionWhenStartedDroppingToGround"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CHostage", "m_vecPositionWhenStartedDroppingToGround", value); }
	}

	// m_vecGrabbedPos
	[SchemaMember("CHostage", "m_vecGrabbedPos")]
	public Vector3 GrabbedPos
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CHostage", "m_vecGrabbedPos"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CHostage", "m_vecGrabbedPos", value); }
	}

	// m_flRescueStartTime
	[SchemaMember("CHostage", "m_flRescueStartTime")]
	public float RescueStartTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CHostage", "m_flRescueStartTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CHostage", "m_flRescueStartTime", value); }
	}

	// m_flGrabSuccessTime
	[SchemaMember("CHostage", "m_flGrabSuccessTime")]
	public float GrabSuccessTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CHostage", "m_flGrabSuccessTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CHostage", "m_flGrabSuccessTime", value); }
	}

	// m_flDropStartTime
	[SchemaMember("CHostage", "m_flDropStartTime")]
	public float DropStartTime
	{
		get { return Schema.GetValueType<float>(this.Handle, "CHostage", "m_flDropStartTime"); }
		set { Schema.SetValueType<float>(this.Handle, "CHostage", "m_flDropStartTime", value); }
	}

	// m_nApproachRewardPayouts
	[SchemaMember("CHostage", "m_nApproachRewardPayouts")]
	public Int32 ApproachRewardPayouts
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CHostage", "m_nApproachRewardPayouts"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CHostage", "m_nApproachRewardPayouts", value); }
	}

	// m_nPickupEventCount
	[SchemaMember("CHostage", "m_nPickupEventCount")]
	public Int32 PickupEventCount
	{
		get { return Schema.GetValueType<Int32>(this.Handle, "CHostage", "m_nPickupEventCount"); }
		set { Schema.SetValueType<Int32>(this.Handle, "CHostage", "m_nPickupEventCount", value); }
	}

	// m_vecSpawnGroundPos
	[SchemaMember("CHostage", "m_vecSpawnGroundPos")]
	public Vector3 SpawnGroundPos
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CHostage", "m_vecSpawnGroundPos"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CHostage", "m_vecSpawnGroundPos", value); }
	}

	// m_vecHostageResetPosition
	[SchemaMember("CHostage", "m_vecHostageResetPosition")]
	public Vector3 HostageResetPosition
	{
		get { return Schema.GetValueType<Vector3>(this.Handle, "CHostage", "m_vecHostageResetPosition"); }
		set { Schema.SetValueType<Vector3>(this.Handle, "CHostage", "m_vecHostageResetPosition", value); }
	}

	public void EntitySpottedStatePropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_entitySpottedState");
	public void VelPropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_vel");
	public void IsRescuedPropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_isRescued");
	public void JumpedThisFramePropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_jumpedThisFrame");
	public void HostageStatePropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_nHostageState");
	public void LeaderPropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_leader");
	public void ReuseTimerPropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_reuseTimer");
	public void HandsHaveBeenCutPropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_bHandsHaveBeenCut");
	public void HostageGrabberPropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_hHostageGrabber");
	public void RescueStartTimePropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_flRescueStartTime");
	public void GrabSuccessTimePropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_flGrabSuccessTime");
	public void DropStartTimePropertyChanged() => Utilities.SetStateChanged(this, "CHostage", "m_flDropStartTime");
}
