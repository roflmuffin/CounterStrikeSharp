// <auto-generated />
#nullable enable
#pragma warning disable CS1591

using System;
using System.Diagnostics;
using System.Drawing;
using CounterStrikeSharp;
using CounterStrikeSharp.API.Modules.Events;
using CounterStrikeSharp.API.Modules.Entities;
using CounterStrikeSharp.API.Modules.Memory;
using CounterStrikeSharp.API.Modules.Utils;
using CounterStrikeSharp.API.Core.Attributes;

namespace CounterStrikeSharp.API.Core;

public partial class CEnvLightProbeVolume : CBaseEntity
{
    public CEnvLightProbeVolume (IntPtr pointer) : base(pointer) {}

	// m_hLightProbeTexture
	[SchemaMember("CEnvLightProbeVolume", "m_hLightProbeTexture")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvLightProbeVolume", "m_hLightProbeTexture");

	// m_hLightProbeDirectLightIndicesTexture
	[SchemaMember("CEnvLightProbeVolume", "m_hLightProbeDirectLightIndicesTexture")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightIndicesTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvLightProbeVolume", "m_hLightProbeDirectLightIndicesTexture");

	// m_hLightProbeDirectLightScalarsTexture
	[SchemaMember("CEnvLightProbeVolume", "m_hLightProbeDirectLightScalarsTexture")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightScalarsTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvLightProbeVolume", "m_hLightProbeDirectLightScalarsTexture");

	// m_hLightProbeDirectLightShadowsTexture
	[SchemaMember("CEnvLightProbeVolume", "m_hLightProbeDirectLightShadowsTexture")]
	public CStrongHandle<InfoForResourceTypeCTextureBase> LightProbeDirectLightShadowsTexture => Schema.GetDeclaredClass<CStrongHandle<InfoForResourceTypeCTextureBase>>(this.Handle, "CEnvLightProbeVolume", "m_hLightProbeDirectLightShadowsTexture");

	// m_vBoxMins
	[SchemaMember("CEnvLightProbeVolume", "m_vBoxMins")]
	public Vector BoxMins => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvLightProbeVolume", "m_vBoxMins");

	// m_vBoxMaxs
	[SchemaMember("CEnvLightProbeVolume", "m_vBoxMaxs")]
	public Vector BoxMaxs => Schema.GetDeclaredClass<Vector>(this.Handle, "CEnvLightProbeVolume", "m_vBoxMaxs");

	// m_bMoveable
	[SchemaMember("CEnvLightProbeVolume", "m_bMoveable")]
	public ref bool Moveable => ref Schema.GetRef<bool>(this.Handle, "CEnvLightProbeVolume", "m_bMoveable");

	// m_nHandshake
	[SchemaMember("CEnvLightProbeVolume", "m_nHandshake")]
	public ref Int32 Handshake => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nHandshake");

	// m_nPriority
	[SchemaMember("CEnvLightProbeVolume", "m_nPriority")]
	public ref Int32 Priority => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nPriority");

	// m_bStartDisabled
	[SchemaMember("CEnvLightProbeVolume", "m_bStartDisabled")]
	public ref bool StartDisabled => ref Schema.GetRef<bool>(this.Handle, "CEnvLightProbeVolume", "m_bStartDisabled");

	// m_nLightProbeSizeX
	[SchemaMember("CEnvLightProbeVolume", "m_nLightProbeSizeX")]
	public ref Int32 LightProbeSizeX => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeSizeX");

	// m_nLightProbeSizeY
	[SchemaMember("CEnvLightProbeVolume", "m_nLightProbeSizeY")]
	public ref Int32 LightProbeSizeY => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeSizeY");

	// m_nLightProbeSizeZ
	[SchemaMember("CEnvLightProbeVolume", "m_nLightProbeSizeZ")]
	public ref Int32 LightProbeSizeZ => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeSizeZ");

	// m_nLightProbeAtlasX
	[SchemaMember("CEnvLightProbeVolume", "m_nLightProbeAtlasX")]
	public ref Int32 LightProbeAtlasX => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeAtlasX");

	// m_nLightProbeAtlasY
	[SchemaMember("CEnvLightProbeVolume", "m_nLightProbeAtlasY")]
	public ref Int32 LightProbeAtlasY => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeAtlasY");

	// m_nLightProbeAtlasZ
	[SchemaMember("CEnvLightProbeVolume", "m_nLightProbeAtlasZ")]
	public ref Int32 LightProbeAtlasZ => ref Schema.GetRef<Int32>(this.Handle, "CEnvLightProbeVolume", "m_nLightProbeAtlasZ");

	// m_bEnabled
	[SchemaMember("CEnvLightProbeVolume", "m_bEnabled")]
	public ref bool Enabled => ref Schema.GetRef<bool>(this.Handle, "CEnvLightProbeVolume", "m_bEnabled");

}
