/*
 *  This file is part of CounterStrikeSharp.
 *  CounterStrikeSharp is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  CounterStrikeSharp is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with CounterStrikeSharp.  If not, see <https://www.gnu.org/licenses/>. *
 */

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Text.Json;

using CounterStrikeSharp.API.Core;
using CounterStrikeSharp.API.Core.Logging;
using Microsoft.Extensions.Logging;

namespace CounterStrikeSharp.API.Modules.Config
{
    public static class ConfigManager
    {
        private static readonly DirectoryInfo? _rootDir;

        private static readonly string _pluginConfigsFolderPath;
        private static ILogger _logger = CoreLogging.Factory.CreateLogger("ConfigManager");

        static ConfigManager()
        {
            _rootDir = new FileInfo(Assembly.GetExecutingAssembly().Location).Directory.Parent;
            _pluginConfigsFolderPath = Path.Combine(_rootDir.FullName, "configs", "plugins");
        }

        public static T Load<T>(string pluginName) where T : IBasePluginConfig, new()
        {
            string directoryPath = Path.Combine(_pluginConfigsFolderPath, pluginName);
            string configPath = Path.Combine(directoryPath, $"{pluginName}.json");
            string exampleConfigPath = Path.Combine(directoryPath, $"{pluginName}.example.json");

            T config = (T)Activator.CreateInstance(typeof(T))!;

            if (!File.Exists(configPath) && !File.Exists(exampleConfigPath))
            {
                try
                {
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }

                    StringBuilder builder = new StringBuilder();
                    builder.Append(
                        $"// This configuration was automatically generated by CounterStrikeSharp for plugin '{pluginName}', at {DateTimeOffset.Now:yyyy/MM/dd hh:mm:ss}\n");
                    builder.Append(JsonSerializer.Serialize<T>(config,
                        new JsonSerializerOptions { WriteIndented = true }));
                    File.WriteAllText(configPath, builder.ToString());
                    return config;
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to generate configuration file for {PluginName}", pluginName);
                }
            } else if (File.Exists(exampleConfigPath) && !File.Exists(configPath))
            {
                try
                {
                    _logger.LogInformation("Copying example configuration file for {PluginName}", pluginName);
                    File.Copy(exampleConfigPath, configPath);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to copy example configuration file for {PluginName}", pluginName);
                }
            }

            try
            {
                config = JsonSerializer.Deserialize<T>(File.ReadAllText(configPath), new JsonSerializerOptions() { ReadCommentHandling = JsonCommentHandling.Skip })!;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to parse configuration file for {PluginName}", pluginName);
            }

            return config;
        }
    }
}